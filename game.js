// Initialize canvas and context
var canvas = document.getElementById("overlay");
var ctx = canvas.getContext("2d");
var savebox = document.getElementById("save-code"); // deprecated
var sky = []; // RGB sky color
var insertedSeed = "", toggleLookingAt = false;

const gamemodes = [{
		name: "Creative",
		blockBreaking: true,
		blockPlacing: true,
		hotbar: true,
		inventory: true,
		fog: true,
		flight: true,
		dayNight: false,
	},
	{
		name: "Adventure",
		blockBreaking: false,
		blockPlacing: true,
		hotbar: ["effectBlock"],
		inventory: false,
		fog: true,
		flight: true,
		dayNight: false,
	},
	{
		name: "Block Hunt",
		blockBreaking: true,
		blockPlacing: true,
		hotbar: ["redConcrete", "orangeConcrete", "yellowConcrete", "limeConcrete", "lightBlueConcrete", "purpleConcrete", "effectBlock", "redstoneBlock", "tnt"],
		inventory: false,
		fog: true,
		flight: false,
		dayNight: false,
	},
	{
		name: "Ore Hunt",
		blockBreaking: true,
		blockPlacing: false,
		hotbar: false,
		inventory: false,
		fog: true,
		flight: false,
		dayNight: false,
	},
	{
		name: "Explosive",
		blockBreaking: false,
		blockPlacing: true,
		hotbar: ["redstoneBlock", "tnt", "megaTnt", "nuke"],
		inventory: false,
		fog: true,
		flight: false,
		dayNight: false,
	}
];

const worldmodes = [{
		name: "Normal",
		caveFog: true,
		populate: true,
	},
	{
		name: "Superflat",
		ySpawn: 6,
		caveFog: false,
		populate: false,
	},
	{
		name: "Nether",
		caveFog: false,
		populate: false,
		populateNether: true,
		ySpawn: 75
	},
	{
		name: "Moon",
		caveFog: false,
		populate: false,
		populateMoon: true,
		ySpawn: 30
	},
	{
		name: "Stone",
		caveFog: false,
		populate: false,
		ySpawn: 62
	}
];

var gamemode = 0,
	worldmode = 0,
	genmode = [];

// Game take up the entire window
ctx.canvas.width = window.innerWidth;
ctx.canvas.height = window.innerHeight;

// Playable sounds
const sounds = {
	background: [{
			"path": "audio/sweden1.m4a",
			"volume": 0.5,
			"repeat": false,
			"bg": true
		},
		{
			"path": "audio/sweden2.m4a",
			"volume": 0.5,
			"repeat": false,
			"bg": true
		},
		{
			"path": "audio/dh.ogg",
			"volume": 0.5,
			"repeat": false,
			"bg": true
		},
		{
			"path": "audio/wh.ogg",
			"volume": 0.5,
			"repeat": false,
			"bg": true
		},
		{
			"path": "audio/haggstrom.ogg",
			"volume": 0.5,
			"repeat": false,
			"bg": true
		},
		{
			"path": "audio/subwoofer.ogg",
			"volume": 0.5,
			"repeat": false,
			"bg": true
		},
	],
	tnt: {
		"path": "audio/tnt.m4a",
		"volume": 0.4,
		"repeat": false,
		"bg": false
	},
};

/*
Play and stop audio
src: source of audio
volume: how loud on scale of 0 (nothing) to 1 (max)
loop: boolean
*/
var Sound = function (d) {
	// create, append HTML element
	this.sound = document.createElement("audio");
	this.sound.src = d.path;
	this.sound.loop = d.repeat;
	this.sound.volume = d.volume;
	if (d.bg) {
		this.sound.classList.add("background");
	}
	this.sound.setAttribute("preload", "auto");
	this.sound.setAttribute("controls", "none");
	this.sound.style.display = "none";
	document.body.appendChild(this.sound);

	this.play = function () {
		this.sound.play();
	}

	// Delete HTML element to prevent overload
	this.stop = function () {
		this.sound.remove();
		this.sound.pause();
	}
}

String.prototype.capitalize = function () {
	return this.charAt(0).toUpperCase() + this.slice(1);
}

// Optimize functions
function delag(f) {
	delag.stripDetection = delag.stripDetection || function (s) {
		var outLines = [];
		var lines = s.split("\n");
		for (var i = 0; i < lines.length; i++) {
			outLines.push(lines[i]);
		}
		return outLines.join("\n");
	};
	var str = delag.stripDetection(f.toString());
	return Object.constructor("return (function(__env__) {return " + str + ";});")()(this);
}


var init = delag(function () {
	var setPixel, getPixels;
	/*
	  All block textures
	  if function, manually generated
	  if base32 string, yoinked from Willard's original minekhan
	  if array of rgb values, yoinked from minecraft 1.17 block files
	*/
	var textures = {
		grassTop: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				d = 0;
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					d = Math.random() * 0.25 + 0.65;
					r = 0x54 * d;
					g = 0xa0 * d;
					b = 0x48 * d;
					setPixel(n, x, y, r, g, b);
				}
			}
		},
		grassSide: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				d = 0;
			var pix = getPixels("0g0g70ordrzz0u30g730wa4vzz0xnyl8f11lrk7315qj7jz1fh47pb6553365533033636350335403653650063306333633300635163503655353653535605335031350330553500033033366333433663663535336655335055335553353530355333033503300333336635353663650660554353355635155305303053556333333366353323553060365553063030663533555365534355335530");
			for (var i = 0; i < pix.length; i += 4) {
				setPixel(n, i >> 2 & 15, i >> 6, pix[i], pix[i + 1], pix[i + 2], pix[i + 3]);
			}
			for (var x = 0; x < 16; x++) {
				var m = Math.random() * 4 + 1;
				for (var y = 0; y < m; y++) {
					d = Math.random() * 0.25 + 0.65;
					r = 0x54 * d;
					g = 0xa0 * d;
					b = 0x48 * d;
					setPixel(n, x, y, r, g, b);
				}
			}
		},
		darkGrassTop: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				d = 0;
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					d = Math.random() * 0.25 + 0.65;
					r = 0x54 * d;
					g = 0x8f * d;
					b = 0x48 * d;
					setPixel(n, x, y, r, g, b);
				}
			}
		},
		darkGrassSide: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				d = 0;
			var pix = getPixels("0g0g70ordrzz0u30g730wa4vzz0xnyl8f11lrk7315qj7jz1fh47pb6553365533033636350335403653650063306333633300635163503655353653535605335031350330553500033033366333433663663535336655335055335553353530355333033503300333336635353663650660554353355635155305303053556333333366353323553060365553063030663533555365534355335530");
			for (var i = 0; i < pix.length; i += 4) {
				setPixel(n, i >> 2 & 15, i >> 6, pix[i], pix[i + 1], pix[i + 2], pix[i + 3]);
			}
			for (var x = 0; x < 16; x++) {
				var m = Math.random() * 4 + 1;
				for (var y = 0; y < m; y++) {
					d = Math.random() * 0.25 + 0.65;
					r = 0x54 * d;
					g = 0x8f * d;
					b = 0x48 * d;
					setPixel(n, x, y, r, g, b);
				}
			}
		},
		leaves: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				a = 0;
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					r = 0;
					g = Math.floor(Math.random() * 30 + 100);
					b = Math.floor(Math.random() * 30);
					a = (Math.random() < 0.35) ? 0 : 255;
					setPixel(n, x, y, r, g, b, a);
				}
			}
		},
		spruceLeaves: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				a = 0;
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					r = 0;
					g = Math.floor(Math.random() * 30 + 70);
					b = Math.floor(Math.random() * 30);
					a = (Math.random() < 0.3) ? 0 : 255;
					setPixel(n, x, y, r, g, b, a);
				}
			}
		},
		autumnLeaves: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				a = 0;
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					r = 250;
					g = Math.floor(Math.random() * 80 + 100);
					b = Math.floor(Math.random() * 30);
					a = (Math.random() < 0.35) ? 0 : 255;
					setPixel(n, x, y, r, g, b, a);
				}
			}
		},
		pinkLeaves: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				a = 0;
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					r = 219;
					g = 127;
					b = 214;
					a = (Math.random() < 0.35) ? 0 : 255;
					if (Math.random() < 0.30) {
						r = 219;
						g = 127;
						b = 166;
					} else {
						r = 230;
						g = 158;
						b = 189;
					}
					setPixel(n, x, y, r, g, b, a);
				}
			}
		},
		oakPlanks: function (n) {
			var r = 0;
			for (var y = 0; y < 16; y++) {
				var a = (y & 3) === 3 ? 0.7 : 1;
				for (var x = 0; x < 16; x++) {
					var mid = x === 8 && (y & 7) > 3 && a === 1 ? 0.85 : 1;
					var rit = x === 15 && (y & 7) < 3 && a === 1 ? 0.85 : 1;
					r = (Math.random() * 0.1 + 0.9) * a * mid * rit;
					setPixel(n, x, y, 190 * r, 154 * r, 96 * r);
				}
			}
		},
		hitbox: function (n) {
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					setPixel(n, x, y, 0, 0, 0, 255);
				}
			}
		},
		redBerryLeaves: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				a = 0;
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					r = 0;
					g = Math.floor(Math.random() * 30 + 100);
					b = Math.floor(Math.random() * 30);
					a = (Math.random() < 0.35) ? 0 : 255;
					if (Math.random() < 0.10) {
						r = 255;
						g = 50;
						b = 0;
					} else {
						r = 0;
					}
					setPixel(n, x, y, r, g, b, a);
				}
			}
		},
		blueBerryLeaves: function (n) {
			var r = 0,
				g = 0,
				b = 0,
				a = 0;
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					r = 0;
					g = Math.floor(Math.random() * 30 + 100);
					b = Math.floor(Math.random() * 30);
					a = (Math.random() < 0.35) ? 0 : 255;
					if (Math.random() < 0.10) {
						r = 0;
						g = 0;
						b = 255;
					} else {
						b = Math.floor(Math.random() * 30);
					}
					setPixel(n, x, y, r, g, b, a);
				}
			}
		},
		dirt: "0g0g70ordrzz0u30g730wa4vzz0xnyl8f11lrk7315qj7jz1fh47pb6553365533033636350335403653650063306333633300635163503655353653535605335031350330553500033033366333433663663535336655335055335553353530355333033503300333336635353663650660554353355635155305303053556333333366353323553060365553063030663533555365534355335530",
		stone: "0g0g40sywflr0wb8hdr0zdjj0f13tzldr3333211210112222221212222220012121001110111222222233232233222111122111212333312223222222211010131223331331112222110010112211122233323223332222212232223332233332021211001212211122222332222233232111232112200101332112211122111321122222222233332222221123322122",
		logSide: "0g0g60fl1ssf0l5j1fj0qftm2n0wa7mdb14cs7wf16az8xr3143304330341432315230523034133230223052313113324032313232301342413230325232314343134131524131432313422343433143230343243342324331053324324242433315332332414303333432303231430331343230533053135133424052303323531343314231333343143340313114334314134131331432",
		logTop: "0g0g90l5j1fj0qftm2n0wa7mdb0z2esxr15quebj189da7z1cpma671f7ppfj1hzyayn1012101120110111077776768667777017334454555544811738877776777471164766666666756107576445544674601646636666466471165764655656756116576465464674610657646666566460164764434556756116576666666674610757767777787460175454444444447117776676686677711011101120110211",
		bedrock: "0g0g509gy58f0e7f7r30o8fd330rkrev31627mkf3111124324211212133434341443012110110111412224232433202422111112014111121134433112221221102211014432344323443410222122211011213234421122344344442110121213211143334134410144431102221123442334402111321134111112343420211101234433211211234421121011044312301123",
		glass: "0g0g50ybfh8f0znkiyo12rzshr1au95hb1lytipr4444444444444443411111111111111341114111111111104114111111111110413111111111111041111111111111124111111111111110411111111111111241111111111111124111111111111112411111111111111241111111111111123111111111111412411111111111411231111111111111133323222222222233",
		cobblestone: "0g0g60muaccf0r0pekf0un11q711vr5rz1a8mosf1ef1r0f2144011454313543145330554330132314342143342101321132113232134310021354131154443152453321033543234313433211243215332233213541231321542213533311021543232233121341323231101221044532211235411035532354215434213323154331432332113244323212332143111311232121135432",
		mossyCobble: "0g0gb0muaccf0mupnnj0p38xdr0r0pekf0rbmj9b0un11q70w1wkxr0y07svz11vr5rz1a8mosf1ef1r0f4199211276438a9619a8812764813858398951644251118533852182851464110531183233866642a176895308948428981498852118851988111851664158385117641484642305126244558824124185442111155214698112124761318998127651764653885847488164588511858685851588531841183352111338a984",
		stoneBricks: "0g0g70p2gyyn0rkrev30tj2nlr0xf9ou70zdjj0f12psrnj17g8flr5666666666665550645455555444445065454444445534406434554345434330632334544334324053244333345324302222222222222220110011000111111166666650566666663555544065455554544544306435354445544320634344454444343053345433332322305443344322222220222222221111110000111111",
		mossyStoneBricks: "0g0gc0mupnnj0p2gyyn0p38xdr0rbmj9b0rkrev30tj2nlr0w1wkxr0xf9ou70y07svz0zdjj0f12psrnj17g8flrab3668863b88a680b9a28683a9999332ba926363996a2931b9792a679a979721b737793993697591a72397773632297075225752332277924410441110000444886bbba1abbbb6883aaaa991ba9aaaa6a99a9971b97a7a399aa99351b797992a99997371a689a97777573371a897799755223791722757754000041110004400",
		bricks: "0g0g90vz62nz0yhavi712oqn7j13rinsv173m8lb193f4zj1b1w1rz1d7u7sv1j1u51b7742888777458777443513444435144410060033100503112256522225565222887747458777474214444315133333151341110600133105522225565522225677458887474588774435344444153444110511331106133325565222225652224777474287774745144444353444441501111106011111065222225655222566",
		luckyBlock: "[231, 255, 255, 255, 156, 255, 255, 255, 156, 255, 255, 255, 0, 212, 198, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 0, 212, 198, 255, 156, 255, 255, 255, 156, 255, 255, 255, 231, 255, 255, 255, 156, 255, 255, 255, 108, 253, 255, 255, 108, 253, 255, 255, 0, 245, 241, 255, 135, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 135, 0, 0, 255, 0, 245, 241, 255, 108, 253, 255, 255, 108, 253, 255, 255, 156, 255, 255, 255, 156, 255, 255, 255, 108, 253, 255, 255, 108, 253, 255, 255, 0, 245, 241, 255, 135, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 135, 0, 0, 255, 0, 245, 241, 255, 108, 253, 255, 255, 108, 253, 255, 255, 156, 255, 255, 255, 0, 212, 198, 255, 0, 245, 241, 255, 0, 245, 241, 255, 135, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 124, 0, 39, 255, 124, 0, 39, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 135, 0, 0, 255, 0, 245, 241, 255, 0, 245, 241, 255, 0, 212, 198, 255, 115, 0, 47, 255, 135, 0, 0, 255, 135, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 124, 0, 39, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 124, 0, 39, 255, 171, 0, 0, 255, 171, 0, 0, 255, 135, 0, 0, 255, 135, 0, 0, 255, 115, 0, 47, 255, 115, 0, 47, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 124, 0, 39, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 124, 0, 39, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 115, 0, 47, 255, 115, 0, 47, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 115, 0, 47, 255, 115, 0, 47, 255, 171, 0, 0, 255, 171, 0, 0, 255, 124, 0, 39, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 124, 0, 39, 255, 171, 0, 0, 255, 171, 0, 0, 255, 115, 0, 47, 255, 115, 0, 47, 255, 171, 0, 0, 255, 171, 0, 0, 255, 124, 0, 39, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 124, 0, 39, 255, 171, 0, 0, 255, 171, 0, 0, 255, 115, 0, 47, 255, 115, 0, 47, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 115, 0, 47, 255, 115, 0, 47, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 124, 0, 39, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 124, 0, 39, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 115, 0, 47, 255, 115, 0, 47, 255, 135, 0, 0, 255, 135, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 124, 0, 39, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 95, 1, 45, 255, 124, 0, 39, 255, 171, 0, 0, 255, 171, 0, 0, 255, 135, 0, 0, 255, 135, 0, 0, 255, 115, 0, 47, 255, 0, 212, 198, 255, 0, 245, 241, 255, 0, 245, 241, 255, 135, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 124, 0, 39, 255, 124, 0, 39, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 135, 0, 0, 255, 0, 245, 241, 255, 0, 245, 241, 255, 0, 212, 198, 255, 156, 255, 255, 255, 108, 253, 255, 255, 108, 253, 255, 255, 0, 245, 241, 255, 135, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 135, 0, 0, 255, 0, 245, 241, 255, 108, 253, 255, 255, 108, 253, 255, 255, 156, 255, 255, 255, 156, 255, 255, 255, 108, 253, 255, 255, 108, 253, 255, 255, 0, 245, 241, 255, 135, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 171, 0, 0, 255, 135, 0, 0, 255, 0, 245, 241, 255, 108, 253, 255, 255, 108, 253, 255, 255, 156, 255, 255, 255, 231, 255, 255, 255, 156, 255, 255, 255, 156, 255, 255, 255, 0, 212, 198, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 115, 0, 47, 255, 0, 212, 198, 255, 156, 255, 255, 255, 156, 255, 255, 255, 231, 255, 255, 255]",
		coalOre: "[143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 104, 104, 104, 255, 92, 92, 92, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 92, 92, 92, 255, 37, 37, 37, 255, 57, 60, 54, 255, 54, 54, 54, 255, 92, 92, 92, 255, 116, 116, 116, 255, 127, 127, 127, 255, 46, 46, 46, 255, 54, 54, 54, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 92, 92, 92, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 46, 46, 46, 255, 57, 60, 54, 255, 54, 54, 54, 255, 73, 75, 63, 255, 46, 46, 46, 255, 37, 37, 37, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 37, 37, 37, 255, 54, 54, 54, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 92, 92, 92, 255, 46, 46, 46, 255, 37, 37, 37, 255, 37, 37, 37, 255, 92, 92, 92, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 116, 116, 116, 255, 116, 116, 116, 255, 92, 92, 92, 255, 92, 92, 92, 255, 104, 104, 104, 255, 116, 116, 116, 255, 143, 143, 143, 255, 116, 116, 116, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 92, 92, 92, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 57, 60, 54, 255, 46, 46, 46, 255, 57, 60, 54, 255, 92, 92, 92, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 92, 92, 92, 255, 116, 116, 116, 255, 92, 92, 92, 255, 37, 37, 37, 255, 57, 60, 54, 255, 46, 46, 46, 255, 92, 92, 92, 255, 127, 127, 127, 255, 127, 127, 127, 255, 92, 92, 92, 255, 57, 60, 54, 255, 73, 75, 63, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 116, 116, 116, 255, 127, 127, 127, 255, 37, 37, 37, 255, 57, 60, 54, 255, 73, 75, 63, 255, 54, 54, 54, 255, 46, 46, 46, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 116, 116, 116, 255, 92, 92, 92, 255, 46, 46, 46, 255, 54, 54, 54, 255, 92, 92, 92, 255, 116, 116, 116, 255, 116, 116, 116, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 92, 92, 92, 255, 92, 92, 92, 255, 127, 127, 127, 255, 104, 104, 104, 255, 127, 127, 127, 255, 143, 143, 143, 255, 116, 116, 116, 255, 92, 92, 92, 255, 92, 92, 92, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 92, 92, 92, 255, 37, 37, 37, 255, 57, 60, 54, 255, 104, 104, 104, 255, 127, 127, 127, 255, 127, 127, 127, 255, 92, 92, 92, 255, 92, 92, 92, 255, 116, 116, 116, 255, 92, 92, 92, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 92, 92, 92, 255, 92, 92, 92, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 92, 92, 92, 255, 37, 37, 37, 255, 73, 75, 63, 255, 54, 54, 54, 255, 37, 37, 37, 255, 37, 37, 37, 255, 143, 143, 143, 255, 143, 143, 143, 255, 92, 92, 92, 255, 73, 75, 63, 255, 57, 60, 54, 255, 37, 37, 37, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 143, 143, 143, 255, 116, 116, 116, 255, 92, 92, 92, 255, 57, 60, 54, 255, 37, 37, 37, 255, 92, 92, 92, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 92, 92, 92, 255, 54, 54, 54, 255, 37, 37, 37, 255, 92, 92, 92, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 54, 54, 54, 255, 46, 46, 46, 255, 127, 127, 127, 255, 127, 127, 127, 255, 92, 92, 92, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255]",
		copperOre: "0g0ge0fnfu2n0fnwqgv0lacfsv0oksv7j0pmkdtr0sywflr0wb8hdr0yjgikf0znkb9b12zwkxr18kgnwf1hdqvwf1q9usjj1uqaxa79999799765667767776766777775567776115445556cb966779641145979a767666418cb897766777958bcda9664456967779aa9654884676564456770323b579951845799038cb6732238797691aa976913a9745779a776779a755b457797667666518cdb6565579918a9181a97512679aa979aa97799797776767977777997",
		ironOre: "[143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 119, 103, 79, 255, 136, 116, 85, 255, 136, 116, 85, 255, 119, 103, 79, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 136, 116, 85, 255, 175, 142, 119, 255, 136, 116, 85, 255, 116, 116, 116, 255, 127, 127, 127, 255, 104, 104, 104, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 136, 116, 85, 255, 175, 142, 119, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 136, 116, 85, 255, 175, 142, 119, 255, 216, 175, 147, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 136, 116, 85, 255, 136, 116, 85, 255, 175, 142, 119, 255, 175, 142, 119, 255, 136, 116, 85, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 136, 116, 85, 255, 175, 142, 119, 255, 216, 175, 147, 255, 216, 175, 147, 255, 226, 192, 170, 255, 216, 175, 147, 255, 175, 142, 119, 255, 127, 127, 127, 255, 116, 116, 116, 255, 136, 116, 85, 255, 175, 142, 119, 255, 143, 143, 143, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 175, 142, 119, 255, 216, 175, 147, 255, 216, 175, 147, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 104, 104, 104, 255, 136, 116, 85, 255, 175, 142, 119, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 127, 127, 127, 255, 119, 103, 79, 255, 136, 116, 85, 255, 175, 142, 119, 255, 119, 103, 79, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 119, 103, 79, 255, 175, 142, 119, 255, 175, 142, 119, 255, 216, 175, 147, 255, 216, 175, 147, 255, 143, 143, 143, 255, 127, 127, 127, 255, 143, 143, 143, 255, 175, 142, 119, 255, 216, 175, 147, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 104, 104, 104, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 216, 175, 147, 255, 226, 192, 170, 255, 143, 143, 143, 255, 104, 104, 104, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 119, 103, 79, 255, 136, 116, 85, 255, 143, 143, 143, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 116, 116, 116, 255, 136, 116, 85, 255, 175, 142, 119, 255, 143, 143, 143, 255, 116, 116, 116, 255, 119, 103, 79, 255, 136, 116, 85, 255, 175, 142, 119, 255, 216, 175, 147, 255, 216, 175, 147, 255, 175, 142, 119, 255, 136, 116, 85, 255, 116, 116, 116, 255, 143, 143, 143, 255, 136, 116, 85, 255, 175, 142, 119, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 143, 143, 143, 255, 175, 142, 119, 255, 216, 175, 147, 255, 226, 192, 170, 255, 175, 142, 119, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 136, 116, 85, 255, 119, 103, 79, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255]",
		goldOre: "[143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 156, 112, 32, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 104, 104, 104, 255, 92, 92, 92, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 143, 143, 143, 255, 104, 104, 104, 255, 92, 92, 92, 255, 156, 112, 32, 255, 104, 104, 104, 255, 116, 116, 116, 255, 116, 116, 116, 255, 92, 92, 92, 255, 92, 92, 92, 255, 156, 112, 32, 255, 156, 112, 32, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 104, 104, 104, 255, 92, 92, 92, 255, 156, 112, 32, 255, 235, 157, 14, 255, 156, 112, 32, 255, 116, 116, 116, 255, 127, 127, 127, 255, 92, 92, 92, 255, 156, 112, 32, 255, 235, 157, 14, 255, 156, 112, 32, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 92, 92, 92, 255, 156, 112, 32, 255, 235, 157, 14, 255, 252, 238, 75, 255, 156, 112, 32, 255, 104, 104, 104, 255, 143, 143, 143, 255, 143, 143, 143, 255, 235, 157, 14, 255, 235, 157, 14, 255, 162, 162, 162, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 104, 104, 104, 255, 235, 157, 14, 255, 252, 238, 75, 255, 252, 238, 75, 255, 255, 255, 181, 255, 235, 157, 14, 255, 116, 116, 116, 255, 116, 116, 116, 255, 104, 104, 104, 255, 162, 162, 162, 255, 162, 162, 162, 255, 116, 116, 116, 255, 143, 143, 143, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 162, 162, 162, 255, 235, 157, 14, 255, 252, 238, 75, 255, 235, 157, 14, 255, 156, 112, 32, 255, 162, 162, 162, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 162, 162, 162, 255, 235, 157, 14, 255, 162, 162, 162, 255, 162, 162, 162, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 235, 157, 14, 255, 156, 112, 32, 255, 127, 127, 127, 255, 143, 143, 143, 255, 104, 104, 104, 255, 156, 112, 32, 255, 235, 157, 14, 255, 143, 143, 143, 255, 162, 162, 162, 255, 156, 112, 32, 255, 162, 162, 162, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 235, 157, 14, 255, 252, 238, 75, 255, 162, 162, 162, 255, 127, 127, 127, 255, 162, 162, 162, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 104, 104, 104, 255, 143, 143, 143, 255, 127, 127, 127, 255, 104, 104, 104, 255, 143, 143, 143, 255, 162, 162, 162, 255, 162, 162, 162, 255, 143, 143, 143, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 92, 92, 92, 255, 156, 112, 32, 255, 156, 112, 32, 255, 235, 157, 14, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 104, 104, 104, 255, 104, 104, 104, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 104, 104, 104, 255, 156, 112, 32, 255, 235, 157, 14, 255, 235, 157, 14, 255, 255, 255, 181, 255, 252, 238, 75, 255, 156, 112, 32, 255, 104, 104, 104, 255, 127, 127, 127, 255, 116, 116, 116, 255, 156, 112, 32, 255, 156, 112, 32, 255, 235, 157, 14, 255, 116, 116, 116, 255, 127, 127, 127, 255, 156, 112, 32, 255, 116, 116, 116, 255, 162, 162, 162, 255, 235, 157, 14, 255, 252, 238, 75, 255, 252, 238, 75, 255, 162, 162, 162, 255, 162, 162, 162, 255, 116, 116, 116, 255, 143, 143, 143, 255, 156, 112, 32, 255, 235, 157, 14, 255, 252, 238, 75, 255, 255, 255, 181, 255, 252, 238, 75, 255, 143, 143, 143, 255, 162, 162, 162, 255, 116, 116, 116, 255, 127, 127, 127, 255, 156, 112, 32, 255, 235, 157, 14, 255, 162, 162, 162, 255, 116, 116, 116, 255, 116, 116, 116, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 162, 162, 162, 255, 235, 157, 14, 255, 252, 238, 75, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 162, 162, 162, 255, 162, 162, 162, 255, 143, 143, 143, 255, 143, 143, 143, 255, 235, 157, 14, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 162, 162, 162, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255]",
		diamondOre: "[143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 103, 103, 103, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 103, 103, 103, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 103, 103, 103, 255, 103, 103, 103, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 103, 103, 103, 255, 103, 103, 103, 255, 30, 208, 214, 255, 143, 143, 143, 255, 127, 127, 127, 255, 103, 103, 103, 255, 103, 103, 103, 255, 116, 116, 116, 255, 116, 116, 116, 255, 103, 103, 103, 255, 119, 231, 209, 255, 35, 150, 152, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 141, 173, 177, 255, 143, 143, 143, 255, 103, 103, 103, 255, 119, 231, 209, 255, 35, 150, 152, 255, 141, 173, 177, 255, 143, 143, 143, 255, 127, 127, 127, 255, 141, 173, 177, 255, 143, 143, 143, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 103, 103, 103, 255, 103, 103, 103, 255, 143, 143, 143, 255, 141, 173, 177, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 103, 103, 103, 255, 213, 255, 246, 255, 119, 231, 209, 255, 103, 103, 103, 255, 127, 127, 127, 255, 116, 116, 116, 255, 213, 255, 246, 255, 119, 231, 209, 255, 116, 116, 116, 255, 103, 103, 103, 255, 116, 116, 116, 255, 143, 143, 143, 255, 116, 116, 116, 255, 116, 116, 116, 255, 143, 143, 143, 255, 213, 255, 246, 255, 119, 231, 209, 255, 30, 208, 214, 255, 30, 208, 214, 255, 35, 150, 152, 255, 141, 173, 177, 255, 127, 127, 127, 255, 30, 208, 214, 255, 35, 150, 152, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 103, 103, 103, 255, 103, 103, 103, 255, 143, 143, 143, 255, 141, 173, 177, 255, 162, 162, 162, 255, 141, 173, 177, 255, 141, 173, 177, 255, 103, 103, 103, 255, 103, 103, 103, 255, 143, 143, 143, 255, 141, 173, 177, 255, 127, 127, 127, 255, 143, 143, 143, 255, 162, 162, 162, 255, 162, 162, 162, 255, 103, 103, 103, 255, 119, 231, 209, 255, 30, 208, 214, 255, 141, 173, 177, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 103, 103, 103, 255, 213, 255, 246, 255, 119, 231, 209, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 116, 116, 116, 255, 127, 127, 127, 255, 141, 173, 177, 255, 141, 173, 177, 255, 127, 127, 127, 255, 103, 103, 103, 255, 127, 127, 127, 255, 116, 116, 116, 255, 119, 231, 209, 255, 30, 208, 214, 255, 35, 150, 152, 255, 35, 150, 152, 255, 141, 173, 177, 255, 143, 143, 143, 255, 162, 162, 162, 255, 162, 162, 162, 255, 127, 127, 127, 255, 103, 103, 103, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 30, 208, 214, 255, 116, 116, 116, 255, 103, 103, 103, 255, 143, 143, 143, 255, 141, 173, 177, 255, 141, 173, 177, 255, 143, 143, 143, 255, 103, 103, 103, 255, 103, 103, 103, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 116, 116, 116, 255, 103, 103, 103, 255, 119, 231, 209, 255, 35, 150, 152, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 143, 143, 143, 255, 103, 103, 103, 255, 103, 103, 103, 255, 127, 127, 127, 255, 143, 143, 143, 255, 116, 116, 116, 255, 119, 231, 209, 255, 213, 255, 246, 255, 119, 231, 209, 255, 30, 208, 214, 255, 30, 208, 214, 255, 35, 150, 152, 255, 143, 143, 143, 255, 116, 116, 116, 255, 143, 143, 143, 255, 143, 143, 143, 255, 141, 173, 177, 255, 119, 231, 209, 255, 35, 150, 152, 255, 103, 103, 103, 255, 116, 116, 116, 255, 127, 127, 127, 255, 162, 162, 162, 255, 35, 150, 152, 255, 30, 208, 214, 255, 141, 173, 177, 255, 141, 173, 177, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 141, 173, 177, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 141, 173, 177, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255]",
		redstoneOre: "[147, 140, 140, 255, 147, 140, 140, 255, 147, 140, 140, 255, 147, 140, 140, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 104, 104, 104, 255, 105, 92, 92, 255, 105, 92, 92, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 150, 6, 6, 255, 150, 6, 6, 255, 150, 6, 6, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 202, 7, 7, 255, 150, 6, 6, 255, 202, 7, 7, 255, 255, 0, 0, 255, 253, 94, 94, 255, 198, 4, 4, 255, 151, 3, 3, 255, 127, 127, 127, 255, 116, 116, 116, 255, 105, 92, 92, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 147, 140, 140, 255, 116, 116, 116, 255, 147, 140, 140, 255, 198, 4, 4, 255, 255, 0, 0, 255, 255, 137, 137, 255, 255, 0, 0, 255, 191, 147, 147, 255, 147, 140, 140, 255, 127, 127, 127, 255, 127, 127, 127, 255, 202, 7, 7, 255, 247, 28, 28, 255, 116, 116, 116, 255, 147, 140, 140, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 147, 140, 140, 255, 191, 147, 147, 255, 191, 147, 147, 255, 191, 147, 147, 255, 147, 140, 140, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 147, 140, 140, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 105, 92, 92, 255, 105, 92, 92, 255, 104, 104, 104, 255, 116, 116, 116, 255, 104, 104, 104, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 105, 92, 92, 255, 105, 92, 92, 255, 105, 92, 92, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 247, 28, 28, 255, 253, 94, 94, 255, 150, 6, 6, 255, 147, 140, 140, 255, 127, 127, 127, 255, 127, 127, 127, 255, 147, 140, 140, 255, 147, 140, 140, 255, 150, 6, 6, 255, 202, 7, 7, 255, 150, 6, 6, 255, 202, 7, 7, 255, 253, 94, 94, 255, 247, 28, 28, 255, 116, 116, 116, 255, 127, 127, 127, 255, 150, 6, 6, 255, 247, 28, 28, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 147, 140, 140, 255, 147, 140, 140, 255, 147, 140, 140, 255, 127, 127, 127, 255, 191, 147, 147, 255, 253, 94, 94, 255, 255, 137, 137, 255, 247, 28, 28, 255, 191, 147, 147, 255, 127, 127, 127, 255, 104, 104, 104, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 104, 104, 104, 255, 104, 104, 104, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 191, 147, 147, 255, 191, 147, 147, 255, 191, 147, 147, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 104, 104, 104, 255, 105, 92, 92, 255, 105, 92, 92, 255, 105, 92, 92, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 147, 140, 140, 255, 147, 140, 140, 255, 127, 127, 127, 255, 147, 140, 140, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 150, 6, 6, 255, 247, 28, 28, 255, 202, 7, 7, 255, 247, 28, 28, 255, 150, 6, 6, 255, 105, 92, 92, 255, 127, 127, 127, 255, 127, 127, 127, 255, 202, 7, 7, 255, 247, 28, 28, 255, 147, 140, 140, 255, 104, 104, 104, 255, 116, 116, 116, 255, 147, 140, 140, 255, 147, 140, 140, 255, 127, 127, 127, 255, 147, 140, 140, 255, 253, 94, 94, 255, 255, 137, 137, 255, 191, 147, 147, 255, 147, 140, 140, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 147, 140, 140, 255, 147, 140, 140, 255, 116, 116, 116, 255, 116, 116, 116, 255, 147, 140, 140, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 147, 140, 140, 255, 191, 147, 147, 255, 147, 140, 140, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 147, 140, 140, 255, 147, 140, 140, 255, 147, 140, 140, 255, 147, 140, 140, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 147, 140, 140, 255, 147, 140, 140, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255]",
		lapisOre: "[143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 104, 104, 104, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 92, 92, 92, 255, 92, 92, 92, 255, 104, 104, 104, 255, 116, 116, 116, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 92, 92, 92, 255, 92, 92, 92, 255, 127, 127, 127, 255, 116, 116, 116, 255, 127, 127, 127, 255, 116, 116, 116, 255, 24, 85, 189, 255, 32, 89, 139, 255, 24, 85, 189, 255, 22, 68, 141, 255, 104, 104, 104, 255, 92, 92, 92, 255, 92, 92, 92, 255, 116, 116, 116, 255, 116, 116, 116, 255, 143, 143, 143, 255, 16, 52, 189, 255, 22, 68, 141, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 143, 143, 143, 255, 162, 162, 162, 255, 143, 143, 143, 255, 16, 68, 172, 255, 116, 116, 116, 255, 22, 68, 141, 255, 68, 111, 220, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 162, 162, 162, 255, 143, 143, 143, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 92, 92, 92, 255, 92, 92, 92, 255, 116, 116, 116, 255, 143, 143, 143, 255, 127, 127, 127, 255, 92, 92, 92, 255, 92, 92, 92, 255, 143, 143, 143, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 127, 127, 127, 255, 104, 104, 104, 255, 92, 92, 92, 255, 24, 85, 189, 255, 16, 68, 172, 255, 127, 127, 127, 255, 127, 127, 127, 255, 104, 104, 104, 255, 32, 89, 139, 255, 16, 52, 189, 255, 116, 116, 116, 255, 104, 104, 104, 255, 116, 116, 116, 255, 143, 143, 143, 255, 116, 116, 116, 255, 127, 127, 127, 255, 92, 92, 92, 255, 16, 52, 189, 255, 68, 111, 220, 255, 105, 149, 244, 255, 68, 111, 220, 255, 22, 68, 141, 255, 143, 143, 143, 255, 127, 127, 127, 255, 68, 111, 220, 255, 105, 149, 244, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 16, 68, 172, 255, 68, 111, 220, 255, 162, 162, 162, 255, 162, 162, 162, 255, 162, 162, 162, 255, 143, 143, 143, 255, 92, 92, 92, 255, 104, 104, 104, 255, 104, 104, 104, 255, 127, 127, 127, 255, 162, 162, 162, 255, 116, 116, 116, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 143, 143, 143, 255, 68, 111, 220, 255, 105, 149, 244, 255, 162, 162, 162, 255, 143, 143, 143, 255, 127, 127, 127, 255, 104, 104, 104, 255, 16, 68, 172, 255, 92, 92, 92, 255, 24, 85, 189, 255, 22, 68, 141, 255, 22, 68, 141, 255, 127, 127, 127, 255, 92, 92, 92, 255, 92, 92, 92, 255, 116, 116, 116, 255, 127, 127, 127, 255, 162, 162, 162, 255, 162, 162, 162, 255, 127, 127, 127, 255, 104, 104, 104, 255, 127, 127, 127, 255, 104, 104, 104, 255, 16, 68, 172, 255, 24, 85, 189, 255, 68, 111, 220, 255, 68, 111, 220, 255, 22, 68, 141, 255, 104, 104, 104, 255, 16, 68, 172, 255, 104, 104, 104, 255, 104, 104, 104, 255, 104, 104, 104, 255, 127, 127, 127, 255, 104, 104, 104, 255, 104, 104, 104, 255, 16, 68, 172, 255, 116, 116, 116, 255, 116, 116, 116, 255, 104, 104, 104, 255, 16, 52, 189, 255, 68, 111, 220, 255, 105, 149, 244, 255, 143, 143, 143, 255, 116, 116, 116, 255, 68, 111, 220, 255, 32, 89, 139, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 22, 68, 141, 255, 16, 52, 156, 255, 16, 52, 156, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 162, 162, 162, 255, 162, 162, 162, 255, 143, 143, 143, 255, 127, 127, 127, 255, 143, 143, 143, 255, 105, 149, 244, 255, 68, 111, 220, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 162, 162, 162, 255, 162, 162, 162, 255, 143, 143, 143, 255, 16, 52, 156, 255, 104, 104, 104, 255, 104, 104, 104, 255, 22, 68, 141, 255, 68, 111, 220, 255, 68, 111, 220, 255, 104, 104, 104, 255, 162, 162, 162, 255, 16, 52, 189, 255, 68, 111, 220, 255, 143, 143, 143, 255, 143, 143, 143, 255, 143, 143, 143, 255, 127, 127, 127, 255, 116, 116, 116, 255, 68, 111, 220, 255, 105, 149, 244, 255, 24, 85, 189, 255, 127, 127, 127, 255, 68, 111, 220, 255, 105, 149, 244, 255, 16, 52, 189, 255, 162, 162, 162, 255, 116, 116, 116, 255, 162, 162, 162, 255, 162, 162, 162, 255, 127, 127, 127, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 24, 85, 189, 255, 68, 111, 220, 255, 22, 68, 141, 255, 162, 162, 162, 255, 127, 127, 127, 255, 162, 162, 162, 255, 162, 162, 162, 255, 127, 127, 127, 255, 116, 116, 116, 255, 116, 116, 116, 255, 116, 116, 116, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 162, 162, 162, 255, 162, 162, 162, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 127, 127, 127, 255, 143, 143, 143, 255, 143, 143, 143, 255]",
		emeraldOre: "0g0g7004swsf06mdmv30sywflr0wb8hdr0zdjj0f13tzldr1ohjdhb5445432232334555443445615442334343223310333422445555225555546133344361324555104445441061243255353445551054434444332232552323355555545461442244534444441053615224243433223310361344444556155551044223455103322553261334455444344441045554455433344554443544444455",
		coalBlock: "[31, 30, 30, 255, 31, 30, 30, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 31, 30, 30, 255, 31, 30, 30, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 41, 40, 40, 255, 31, 30, 30, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 5, 5, 5, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 31, 30, 30, 255, 31, 30, 30, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 5, 5, 5, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 5, 5, 5, 255, 13, 13, 13, 255, 31, 30, 30, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 5, 5, 5, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 31, 30, 30, 255, 41, 40, 40, 255, 31, 30, 30, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 13, 13, 13, 255, 13, 13, 13, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 31, 30, 30, 255, 31, 30, 30, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 13, 13, 13, 255, 21, 21, 21, 255, 31, 30, 30, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 13, 13, 13, 255, 5, 5, 5, 255, 31, 30, 30, 255, 21, 21, 21, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 13, 13, 13, 255, 21, 21, 21, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 13, 13, 13, 255, 21, 21, 21, 255, 31, 30, 30, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 21, 21, 21, 255, 13, 13, 13, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 31, 30, 30, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 13, 13, 13, 255, 13, 13, 13, 255, 31, 30, 30, 255, 41, 40, 40, 255, 31, 30, 30, 255, 21, 21, 21, 255, 13, 13, 13, 255, 21, 21, 21, 255, 31, 30, 30, 255, 31, 30, 30, 255, 21, 21, 21, 255, 21, 21, 21, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 31, 30, 30, 255, 41, 40, 40, 255, 21, 21, 21, 255, 5, 5, 5, 255, 5, 5, 5, 255, 21, 21, 21, 255, 31, 30, 30, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 31, 30, 30, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 21, 21, 21, 255, 21, 21, 21, 255, 21, 21, 21, 255, 13, 13, 13, 255, 5, 5, 5, 255, 5, 5, 5, 255, 5, 5, 5, 255]",
		ironBlock: "0g0gb1dawbnj1fj5rlr1hrdssf1m7r1mn1nlyvwf1pa4wsf1qe8xdr1s2ey9r1t6iyv31tqkz5r1ver01r32233333333222232aaaaa9998777772277777777777777105555555666444402aaaaaa999777771277777777777777105555566664444402aa9999977777771277777777777777105555555566644402aaaaaa999977771277777777777777105555556666444402aaaa9999777777127777777777777712222222112111111",
		goldBlock: "0g0g91kr8um71mphb0f1w77ain1xakkqn1ypvwu71yr43jz1yzk7pb1z0cef31z10mwv2222332223333221285577888776688125664877623324812564877462224471374777462264467137777462267762302877444667762330287444664462232037444664466222613744664466662461364667766666742032667762262776203267762332446261334462332666224132322332662264701101100011001100",
		diamondBlock: "0g0g90434min061d2in0h634zj0l2fpxb0sagdtr0vckf0f1845xbz1ndl24f1z141z33333223332222331378866777664477138445766432235713845766543335561265666543345546126666543346643203766555446643220376555445543323026555445544333412655445544443541245446644444653023446643343664302346643223554341225543223444335123233223443345601101100011001100",
		copperBlock: "[227, 130, 108, 255, 227, 130, 108, 255, 227, 130, 108, 255, 214, 123, 91, 255, 227, 130, 108, 255, 214, 123, 91, 255, 214, 123, 91, 255, 227, 130, 108, 255, 227, 130, 108, 255, 227, 130, 108, 255, 227, 130, 108, 255, 227, 130, 108, 255, 214, 123, 91, 255, 200, 116, 86, 255, 194, 107, 76, 255, 167, 90, 64, 255, 227, 130, 108, 255, 200, 116, 86, 255, 200, 116, 86, 255, 194, 107, 76, 255, 194, 107, 76, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 227, 130, 108, 255, 214, 123, 91, 255, 214, 123, 91, 255, 214, 123, 91, 255, 194, 107, 76, 255, 194, 107, 76, 255, 178, 98, 71, 255, 154, 80, 56, 255, 227, 130, 108, 255, 200, 116, 86, 255, 227, 130, 108, 255, 178, 98, 71, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 227, 130, 108, 255, 214, 123, 91, 255, 214, 123, 91, 255, 214, 123, 91, 255, 194, 107, 76, 255, 227, 130, 108, 255, 178, 98, 71, 255, 178, 98, 71, 255, 154, 80, 56, 255, 227, 130, 108, 255, 194, 107, 76, 255, 178, 98, 71, 255, 154, 80, 56, 255, 200, 116, 86, 255, 214, 123, 91, 255, 227, 130, 108, 255, 214, 123, 91, 255, 200, 116, 86, 255, 214, 123, 91, 255, 194, 107, 76, 255, 194, 107, 76, 255, 178, 98, 71, 255, 154, 80, 56, 255, 178, 98, 71, 255, 144, 73, 49, 255, 227, 130, 108, 255, 194, 107, 76, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 214, 123, 91, 255, 214, 123, 91, 255, 200, 116, 86, 255, 200, 116, 86, 255, 194, 107, 76, 255, 194, 107, 76, 255, 167, 90, 64, 255, 167, 90, 64, 255, 178, 98, 71, 255, 194, 107, 76, 255, 144, 73, 49, 255, 227, 130, 108, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 214, 123, 91, 255, 214, 123, 91, 255, 200, 116, 86, 255, 200, 116, 86, 255, 194, 107, 76, 255, 194, 107, 76, 255, 167, 90, 64, 255, 154, 80, 56, 255, 167, 90, 64, 255, 194, 107, 76, 255, 178, 98, 71, 255, 144, 73, 49, 255, 227, 130, 108, 255, 200, 116, 86, 255, 214, 123, 91, 255, 227, 130, 108, 255, 214, 123, 91, 255, 200, 116, 86, 255, 200, 116, 86, 255, 194, 107, 76, 255, 194, 107, 76, 255, 167, 90, 64, 255, 154, 80, 56, 255, 167, 90, 64, 255, 194, 107, 76, 255, 178, 98, 71, 255, 178, 98, 71, 255, 144, 73, 49, 255, 227, 130, 108, 255, 214, 123, 91, 255, 227, 130, 108, 255, 214, 123, 91, 255, 200, 116, 86, 255, 200, 116, 86, 255, 194, 107, 76, 255, 194, 107, 76, 255, 167, 90, 64, 255, 154, 80, 56, 255, 167, 90, 64, 255, 194, 107, 76, 255, 194, 107, 76, 255, 178, 98, 71, 255, 200, 116, 86, 255, 144, 73, 49, 255, 227, 130, 108, 255, 227, 130, 108, 255, 214, 123, 91, 255, 200, 116, 86, 255, 200, 116, 86, 255, 194, 107, 76, 255, 178, 98, 71, 255, 167, 90, 64, 255, 154, 80, 56, 255, 167, 90, 64, 255, 194, 107, 76, 255, 194, 107, 76, 255, 178, 98, 71, 255, 200, 116, 86, 255, 200, 116, 86, 255, 144, 73, 49, 255, 227, 130, 108, 255, 214, 123, 91, 255, 200, 116, 86, 255, 200, 116, 86, 255, 194, 107, 76, 255, 178, 98, 71, 255, 178, 98, 71, 255, 167, 90, 64, 255, 167, 90, 64, 255, 194, 107, 76, 255, 194, 107, 76, 255, 194, 107, 76, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 154, 80, 56, 255, 227, 130, 108, 255, 200, 116, 86, 255, 200, 116, 86, 255, 194, 107, 76, 255, 178, 98, 71, 255, 178, 98, 71, 255, 167, 90, 64, 255, 178, 98, 71, 255, 194, 107, 76, 255, 194, 107, 76, 255, 194, 107, 76, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 227, 130, 108, 255, 154, 80, 56, 255, 227, 130, 108, 255, 200, 116, 86, 255, 194, 107, 76, 255, 178, 98, 71, 255, 178, 98, 71, 255, 178, 98, 71, 255, 178, 98, 71, 255, 194, 107, 76, 255, 194, 107, 76, 255, 178, 98, 71, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 227, 130, 108, 255, 214, 123, 91, 255, 154, 80, 56, 255, 227, 130, 108, 255, 194, 107, 76, 255, 227, 130, 108, 255, 178, 98, 71, 255, 167, 90, 64, 255, 178, 98, 71, 255, 194, 107, 76, 255, 194, 107, 76, 255, 178, 98, 71, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 227, 130, 108, 255, 178, 98, 71, 255, 200, 116, 86, 255, 144, 73, 49, 255, 227, 130, 108, 255, 178, 98, 71, 255, 178, 98, 71, 255, 154, 80, 56, 255, 178, 98, 71, 255, 194, 107, 76, 255, 178, 98, 71, 255, 178, 98, 71, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 214, 123, 91, 255, 178, 98, 71, 255, 154, 80, 56, 255, 194, 107, 76, 255, 144, 73, 49, 255, 227, 130, 108, 255, 167, 90, 64, 255, 154, 80, 56, 255, 178, 98, 71, 255, 194, 107, 76, 255, 178, 98, 71, 255, 178, 98, 71, 255, 200, 116, 86, 255, 200, 116, 86, 255, 214, 123, 91, 255, 214, 123, 91, 255, 214, 123, 91, 255, 200, 116, 86, 255, 194, 107, 76, 255, 194, 107, 76, 255, 154, 80, 56, 255, 214, 123, 91, 255, 154, 80, 56, 255, 167, 90, 64, 255, 154, 80, 56, 255, 154, 80, 56, 255, 144, 73, 49, 255, 154, 80, 56, 255, 144, 73, 49, 255, 167, 90, 64, 255, 167, 90, 64, 255, 167, 90, 64, 255, 154, 80, 56, 255, 154, 80, 56, 255, 144, 73, 49, 255, 154, 80, 56, 255, 154, 80, 56, 255]",
		redstoneBlock: "0g0g50vx660v153407319j36671gh49a71runlz34444444444444444433433222334333443342202222232344332311001120234443211012011244443210000000042344302100000011134421100000000122442231000000111344324110210111234432110004001224443321101001110344322211111122224443124211022323443334433223333344444444444444444",
		lapisBlock: "0g0gd05lqqkf06zt0xr07js8hr07tw35r084kzr308e6ein08e99fj08yjpq708ys8ov0an2j270c0w4cf0dp94hr0fdf5kv98999989cb848484878b78736733677197b8867767623765967877377863366597687666378a63759a77776636a7736197a767676236763596763666a6233625c636636376632775c633687363332371963237873676327186672236338763619763722332677630877633332336667143766633633367708111111610220000",
		emeraldBlock: "0g0g606lfrb306mdmv307ei5fj07xmdbz0iaro5b10c5ptr0000000000000002055555454551144305000000200002430404555411114243050500000002425305050555445212130405054411421203040405451142120305040411020202130404041122120213042105410112420301212222222242030405510000441213012222222222224301011001110014532333333333333332",
		tntTop: "0g0g704qh5a70nyecxr13jyl8f14a4flr1d4tukf1otd8u71szz8jj5665566556655665622462246224622462136210012300234431403344004433566006655660566562246204121402246211120000231023443341000111403356651000000506656211020001140224621360200120112344331031140344335661560500611665621462146124612462236223622362234433443344334433",
		tntSides: "0g0ga07ipw5b0fbhzwf14a4flr1d4tukf1gwtvcv1ldqupr1otd8u71pk09vj1szz8jj1z141z38863886388638863663266326632663266326632663266326632663266326632663266326632663295775577755777799711071550711059745055115157177795717717115505479750571550550759444444444444444433223322332233226632663266326632663266326632663266326632663266323332333233323332",
		tntBottom: "0g0g413jyl8f14a4flr1d4tukf1otd8u72332233223322332300130013001300130013001300130011111111111111111233223322332233230013001300130013001300130013001111111111111111123322332233223323001300130013001300130013001300111111111111111112332233223322332300130013001300130013001300130011111111111111111",
		acaciaLogSide: "0g0g60ma181r0oi99fj0pcavi70t8nim70y9464f139ktmn3143304330341432315230523034133230223052313113324032313232301342413230325232314343134131524131432313422343433143230343243342324331053324324242433315332332414303333432303231430331343230533053135133424052303323531343314231333343143340313114334314134131331432",
		acaciaLogTop: "0g0gb0j7rlz30kvxmgv0ma2nen0o889hb0t8nim713rcxdr16jehof18hk3r31c3oo3j1fprugv1hy2osf432332211231433449999898a889999329556676777766a2395aa999989996910869888888889782197986677668968318688588886886932879868778789784487986876868968448798688887886833869866567789782287988888888968219799899999a96811976766666666691099988988a8899933412233444322114",
		acaciaPlanks: "0g0g711t8qgv13rcxdr16jehof18hk3r31c3oo3j1fprugv1hy2osf5456666656666652554423455544553345554543333445522112210011010010563666636665443545543432344555543345444255544333001121000011121056654466656666535455554333434332654433334444335300122100012110006556655366646566445533433555544443345432554333330110012221010000",
		birchLogSide: "0g0g80f1fcov0qqliwv1gxap6n1o60u7z1ptrf271uar6db1uum5mn1z141z36643366634663366346666777634443677744367666636777732100136777737366321101377631211336344363331001266344677766532343777777334556376336775577775777764455577766336336777766634477636777767777577634436633667553210026677763443100000133377761132116331677764336336",
		birchLogTop: "0g0ga0mk6h3316m5am719xxgqn1cg9ce71f8hx4v1jowirj1nv4jcv1nvimm71tgjy7z1z141z39818811001809889966665657556666816223343444433718627766665666360153655555555645106465334433563580535525555355368154653544545645995465354353563599546535555455358853653323445645115465555555563510646656666676350064343333333336016665565575566688901188999811009",
		birchPlanks: "0g0g717znmrj19xxgqn1cg9ce71f8hx4v1jowirj1nv4jcv1nvimm75456666656666652554423455544553345554543333445522112210011010010563666636665443545543432344555543345444255544333001121000011121056654466666666535455554333434332654433334444335300122100012110006356655366636566445533433554544443345432554333330110012221010000",
		darkOakLogSide: "0g0g60besef30dcwlbz0e6y70f0hj7ev30klcs8v0oho0e73143304330341432315230523034133230223052313113324032313232301342413230325232314343134131524131432313422343433143230343243342324331053324324242433315332332414303333432303231430331343230533053135133424052303323531343314231333343143340313114334314134131331432",
		darkOakLogTop: "0g0gb08ml79b0auqebj0dcmqdb0e6y70f0f117gf0g4r4730h8wirj0hj7ev30kb0idb0lz2akf0n393wf741441100140744779999898a889999419225565666655a1492aa999989995903859888888889681096985566558958408588288885885941869858668689687786985865858958778698588886885844859855256689681186988888888958109699899999a95800965655555555590399988988a8899944701144777411007",
		darkOakPlanks: "0g0g70bejy0v0dcmqdb0g4r4730h8wirj0kb0idb0lz2akf0n393wf5456666656666652554423455544553345554543333445522112210011010010563666636665443545543432344555543345444255544333001121000011121056654466666666535455554333434332654433334444335300122100012110006356655366636566445533433554544443345432554333330110012221010000",
		jungleLogSide: "0g0g90h96cxr0htdywv0m9k4xr0ne277j0orqc5b0rkbldr0sxvim70wunksf0ys83cv4688422222666444444114414441001111137510011441866644668842422224146644411143573444422235311010006646442222444886101000466412222444688411068844441122575311222100755444666664355741100112241201661144866643341111623533422111444644111004661664444664122244442222",
		jungleLogTop: "0g0g90h96cxr0htdywv0rkbldr0ys83cv160fym7188mku71batekf1f77h1b1h5ei2n3212210011213223377776768667777217444454555544812748877776777470164766666666756107576445544674620646646666466472165764655656756336576465464674633657646666566462264764444556756106576666666674600757767777787460175454444444447117776676686677722310122333211013",
		junglePlanks: "0g0g70sxkd1b0xdxkov160fym7188mku71batekf1f77h1b1h5ei2n5456666656666652554423455544553345554543333445522112210011010010563666636665443545543432344555543345444255544333001121000011121056654466666666535455554333434332654433334444335300122100012110006356655366636566445533433554544443345432554333330110012221010000",
		spruceLogSide: "0g0g60csc9vj0cskpof0dmmb5r0geuxof0lf4i670nnb4sf3243304330342431325130513034233130113051323223314031323131302341423130315131324343234232514232431323411343433243130343143341314332053314314141433325331331424303333431303132430332343130533053235233414051303313532343324132333343243340323224334324234232332431",
		spruceLogTop: "0g0g80ix87pb0nnb4sf0p1n6db0qzu7zz0v5xypr0xy569r106bshr11ueyv31012101120110111066665657556666016223343444433711627766665666361153655555555645106465334433563501535525555355361154653533545645115465353353563510546535555455350153653323445645115465555555563510646656666676350164343333333336116665565575566611011101120110211",
		sprucePlanks: "0g0g80nnb4sf0p1n6db0qzu7zz0v5xypr0xe36rj0xy569r106bshr11ueyv36567777767777762665523566655663356665643333556622112210011010010673777737776553656653532355666653356555266655333001121000011121067765577777777636566665333535332765533335555336300122100012110007367766377737677556633533665655553356532665333330110012221010000",
		sand: "0g0g61m6x62n1nb9nnj1opn5dr1r80f7j1scbi0v1u0izgf4223213232132313122121130142502432011422222121122331213133132122125213232322122321223332123122121421151211022121212212212111242112322310131232124212221120212231202321232232012311223212331112121213132145321123323230232323221223235332323203223232332321223232",
		gravel: "0g0g80rufq4f0vqwlbz0zxiprz125i9rz15rvcan1627mkf1d0twqn1dackxr0341152512122521522122312102333522103133522351352232321522512322132741122210253202140133526552213104226515530122553253522311225353521223310256122311652152322132123553102521325022533562113225212132222537415525331025232422215235323311243310351274122232321212",
		blackConcrete: "0g0g40149on3028826702882yn028dp8f1330112022012232303130022112212111032203010022012122012222321221011223213030101033110011212233120230013131003200032022012002002112233122202312230200102211312102222122132011021201223320211021220121122122321331201102120210001220112022023302312210123220102110",
		blackWool: "0g0gf0149on3028826702882yn028dp8f03cc2rj03cc3jz03chptr04gg3cv04glqf305kk3y705kpr0f06oo4jj07ss54v08ww5q70a106bj46348b45ab13993299eebb7742570367bc77dc97bcbbdeb996bc768c47cc96ec9749bb115953bb31314c414641672547eebb8879bea7eeb966eebacc45bca9ccbb35ca4657528733577b117949ee7beeccbbecbacb799839349966bb445911796611cd318b9bee92badecb9717bc77cedc97c99beb559b6424c946cd76ac44bc",
		blueConcrete: "0g0g30c98pof0c98qgv0c9ecqn1000001101000201011001000101120101211111010200000001000110100100220110011001121111001100100100010200102101101000000011110001101010101011020111110000000101121111101100100100010110111010210111001101000100000111110100101111000120000010100000110001200110010002",
		blueWool: "0g0gj0c98pof0c98qgv0c9ecqn0c9edj30ddcr270ddidbz0ddie4f0ehgrnj0ehgsfz0ehmepr0ehmfi70flkt1b0flqfb30flqg3j0flw2db0flw35r0gpugov0gq02yn0gqbd3335237c44ac12992289iidc6632460256de67ge96cebbhic985ce657e46ee85ie9648cc114942cc21214e413541562436iidc7769dia6iic955iicaee34cea9eecb24ea4546427622466d116949ii7biieecciecaed699728249955cb344911695511eg217c9bii92bahiec9617be67eigf86e99cid449b5324e935eh65ae34de",
		brownConcrete: "0g0g30pl5gqn0qp3u9r0qp9hbz0211211202222221222122211211122121011102222222212211200222112101121111211111222121222122122221201212121222112122222221220222222122221201121212022122122110221211122221211011221212121010121011111212122221121221222212122112112112211010222111121211220222221122",
		brownWool: "0g0gi0qp3u9r0qp9hbz0rt7uv30rtdh4v0sxbunz0sxbvgf0u1a8zj0u1fv9b0v5e8sf0v5e9kv0v5jvun0w9i9dr0xdgmwv0xdm9z30yhkni70yhq9rz0zloo3j0zluadb35228d45bd12aa219bhhed7721570257ef77gfa7dfccghdb95df758f47ff95hfb749dd115a52dd21214f413541571526hhed887aehb7hhda55hhdbff25dfbbffdc25fb4557518722576e117b4bhh7chhffddhfdbfe7ab82924bb55dc245b116b5511fg218dachhb1cbghfda717cf77fhgg97fabdhe55ac5214fa25fg75bf24ef",
		cyanConcrete: "0g0g305objsv05obklb05oh6v31112010122111202100121222111122012212211101111202102221210222122211111211221111011021102021212212220211021022022201210110010212210211110202101010201110112020221222112102111202212110222110211221001010211001221212202222122111221102211100222112011211120220211",
		cyanWool: "0g0ge05obklb05oh6v305omt4v05omtxb05osg7305oy2gv05p3pj305p9bsv05p9clb05peyv305pkl4v05pklxb05pq87305pq8zj242269347912662167dda95521450145ab55cb659b88cd97649b546b35bb64db7536991146419921113b312431451424dda96656ad75dd9644dd97bb249b77bb9814b73445416521454a115737dd58ddbb99db97ba56762623774498234711474411bc116968dd7187cdb965158b55bdcc65b679da44684213b624bc547b23ab",
		grayConcrete: "0g0g20ehlvr30flk9a70000000000000000000000000000000000000000000000000000000000000000000000000000100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000100000000000000000001000000010000",
		grayWool: "0g0gd0ehlvr30flk9a70flpvjz0flpwcf0flvim70gptwxr0gpzjzz0htxxj30hu3jsv0hu3klb0iy1y4f0iy7ke70iy7l6n333359337803663157cca85531350135ab55cb658b88cc87539b545b35bb53ca7535990036329930103b303330350335cc995556ac75cc8633cc87ba339b77ba8813a73435305532355a005737cc58ccab88cb87ba56753533773498333700574300ac205968cc7087cca865058b55bccc55b679ca33684313a634bc537a33ab",
		greenConcrete: "0g0g20k2mku70k2s73z0001000100111100101010100101101101101100111010010111001001011000100001100011000100101010110101111010000001011001001000100001010110101110010011010000101011110000010110101000000001010000110101011101000111110011101010011000111100001100011000000111101001101100",
		greenWool: "0g0gh0k2mku70k2s6bj0k2s73z0l6qjun0l6w64f0l71rlr0mb054v0mb5qm70mb5ren0nf9qf30nffcov0ojdq7z0ojjbpb0ojoxz30pnnbi70pnsxrz0rw0y6746447c45ab1499419aggcb8841580168ce88ee98bebbfgba96ce867e48ee96gda849cc125953cc41114e424642681546ggcc7789cga8ggb966ggbaed45ceaaedbb15da4658517843586c21894agg8bggdebbgebaec89a749449966cb445a116a6621de327c9bgga1bafgdb9828be88egee98e9acgc559b6414d946ef86ad44ce",
		lightBlueConcrete: "0g0g3090ti4f090z4e70a4xipr2120111111121222222121122112211121121211112221221111102221122212112021111111122111112111112121211222221111122121212121112021122112211121211211111121220111212121111121222001122211222221022122111011221111111021211221211211121112212111111122121111211112222111",
		lightBlueWool: "0g0gq090z4e70a4xipr0a534zj0a58r9b0b974sf0b9crun0b9ie4f0cdgrnj0cdmepr0cds0zj0dhqein0dhw0sf0dhw1kv0em01dr0em5nnj0fq9o8v0fqfain0gudou70gujb3z0hyhon30hynawv0hynbpb0j2lp8f0j2rbi70k6pptr0latpmn7b57fm89ik26ff63fippnkdd739d04benodepogdkojjppkifblodcfo8doofbpoie8fml21af95mm62428o817b81bd397cppmlffefnpidppkgbbppkioo79loiiookj4aoi8cad93fd55adcn22dh8ippejppookkpokiondfif6f68hhbcmj78ai22cicb22op51fmfjppi3jippokfd2ejoeeoppofdofilpn9agjc738og7copebio78no",
		lightGrayConcrete: "0g0g20yjgg730yjggzj1000110001001010100010000000011101100010001001011010001100101010001000000000000010100000000100010100000000001010100010001000000000100000110000100001100000011101110001001011001001001001011000000000011001001001001010000000010000000010100110000000001000001001",
		lightGrayWool: "0g0gi0yjgg730yjggzj0znkgsf0znkhkv10rohdr10roi6711vshz311vsirj11vy5tr12zwjcv12zwk5b1440jy7144670f1584kjj1584lbz16c8l4v16c8lxb17gclq745339e55bd1399329bhhfd7732570257ff78hfa7dfcchhdb95df769f57ff95hfb759ed115953ee31215f514551572537hhed9979fhb7hhda55hhdbff35dfbbgfdc25fb5657529733577f117b5bhh8chhfgddhfdbgf79b93935bb56ec355b117b6511fh319e9chhb2cbhhfd9718cf78fhhg97f9bdhf55ac6325fa36fh75bf35ff",
		limeConcrete: "0g0g30ppd5a70ppirjz0qth5331121111111100111111111110111110111010211100110111211111211101111112111111111111101110111011110211011011110111110102111110100111000110112112110211112112112111212111111111111111011111011100101111111111212111111111112010011011221111111110111120011110111101111",
		limeWool: "0g0gg0ppirjz0qth5330qtmrcv0rxl4vz0rxqr5r0t1p4ov0t1uqyn0u5t4hr0u5yqrj0v9x4an0va2qkf0we143j0xi53wf0ym3hfj0ym94hr10uh5of35237c44bb1299228affcb6632460257cd67ed96bdbbefba85bd657d46dd85fca748cb104942cc21214d403540562435ffcb7779cfb6ffb955ffbbdc34bdbaecbb24cb4546427622465c01694aff7bffcebbfdbbec69a728249955cb344a105a5501ce207c9bffa2bbefcb9607bd77dfee86d9abfc449b5324c935de75bc34cd",
		magentaConcrete: "0g0g419jw2rj1anugan1ao02kf1ao03cv2233313332221332333333233213322333223332331233333313323103121223222131233211303233130230322231223302323103002220333103232232223333313231221331233333231232212303302330122232333333332123320111033031332321233232303322232223332223231233212323332233222231230323",
		magentaWool: "0g0gs1ao02kf1ao03cv1brygvz1bs435r1bs43y71cw2hhb1cw83r31cw84jj1e06i2n1e0c4cf1e0c54v1f4ainz1f4g4xr1f4g5q71g8ej9b1g8k5j31g8k6bj1hcijun1hco64f1hco6wv1igmkfz1igs6pr1igs7i71jkw7b31jkw83j1kp08ov1lt49a71mxdwxr6945dl77ij14ff43ehrrmjba537a039cmoacqogajojjqrjhe9koa9do7booe9rnhc7elk118f74ll41317o7169719a275arrmkddcfmribrrjg99rrjion57koihonjj38ni798a72db448bam11bh7hrrcjrrnojjrojiomafhd4e47hh99lj578h11ah9911nq41dlfjrrh2jiqrnjfa1cjoccorqpebofhkrm78gj9537ng59oqc9in57mo",
		orangeConcrete: "0g0g21p59iwv1q97wfz1011110111101111111011111110000111101110100111111110011111011001001101110110111111111110111111011111101110111111110111111111111111011110111101111011101101101111010010111111110110101110010011101111111010101001101111111011111110111111111001111111101111111111",
		orangeWool: "0g0gm1q97wfz1rdbw8v1rdbx1b1rdhjb31shfwu71shfxmn1tljxfj1tljy7z1tlpkhr1upnytb1uptl331uptlvj1vtrzen1vtxlof1vtxmgv1wy1m9r1wy1n271wy79bz1wycwe71wyijgf1wyo5q71wytssf46239f55de02aa219dllhe8731570268hi79kib7eieelled96fi779i58ii96lhd859ff005a52ff20205i504650671537llgf998ahld8lleb66lledih35fiddihee25hd5757519822587h008c5dll9ellhieeliedih7ad92925cc67fe355d007d7600hk209faelld1edllhea709ei89ilkj98iadflh55be7315hb37il86dh35hi",
		pinkConcrete: "0g0g31ltks8v1mxj5rz1mxj6kf1122212121112211111211211211122112111221111111121211212111122211111112112121112111111111111112111212221121111111212211112101110212211211122111211112212111211110211211211211111111121212221211121111112212211121211111211212211111111111121112111211212122122111",
		pinkWool: "0g0gv1mxj6kf1o1hk3j1o1n6db1p5r6yn1q9v6rj1q9v7jz1rdz7cv1re4uf31si37y71si8u7z1tm78jj1tmcutb1tmcvlr1uqgven1uqmigv1uqs4qn1vuqj271vuw5bz1vuw64f1vv1se71vv7fgf1vvd1q71vvd2in1vviosf1vvipkv1vvobun1vvocn31vvtywv1vvzlz31vw588v1vw591b6a46em78jk25gg53fjuuokdc638c03adoqcesqhckqkktukjfalqcbeq7dqqfaupjd7fml219g83mm52327q716a71ac386buunleedgoujduukhaauukjqp68lqjjrpkk39pj7b9c83ed439dbo12di7juuekuuprkkuqkjrocgje5f57iiabmk679j22bjba12ps31emgkuuj3kjtupkgc1ekqdequssfdqgjluo89hkb637ph6bqtdajp67oq",
		purpleConcrete: "0g0g40qo16v30rrzke70rrzl6n0rs57gf3222322033323333333312320220233231302222232332333202332233033330333322320012333323333330233022223332223332223232323303323233332332021220323110033223333322032332312323332322322202232223033232221223233023333332022233332332233232023333233223032323332323323332",
		purpleWool: "0g0gm0rrzl6n0rs57gf0sw3kzj0sw3lrz0u01zb30u07lkv0u07mdb0v45zwf0w84dfj0w84e7z0xc8e0v0xc8etb0yg6scf0ygcem70zkasxr10o96gv10o979b10oetj311sd72711sd7un12wh8fz154uxhb47349e45ce13aa32acllfe8742570279fh79jhb7ehddkleca7eh779h48hha7lgc94aee116a52ee31214h414741771547llfe999aflc8lleb77llechg45ehcchged26gc4767519832687f118c4cll9dllgheelhechf7ac93a34cc77ed446c117c7711gj219eadllc1dcklgea719dh99hljia8hacelf56bd7424gb47hk97cg44fh",
		redConcrete: "0g0g112voa9r0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		redWool: "0g0gd12voa9r13zmnsv153l1bz167jev3167p14v17bnenz18fls7319jprzz1ano5j31ano6bj1brmjun1brs64f1f3yku7241258227712662157cc9754212401459b45bb647b77bc77548b445b25bb54ca7525881036218821112b202420441224cc8855569c75cc7644cc77ba228b77ba7713a724342155113549015627cc57ccab77cb77b946752522664487223711474401ab105867cc7177bca764057b55bcbb55b678c923674212a624bb547a229b",
		boneBlock: "0g0g31ktui9r1ku04jj1lxyi2n1121212211221121111221111121122111211111121112111212112211111211212222111111221112211112101110211111122211211211111111212221111112212121212222111121122211111111222111111112121222121111111111211121221112221111121222121112212122111221211212111121221211221212",
		whiteWool: "0g0gn1lxyi2n1lxyiv31ly454v1n22inz1n22jgf1n285q71o66j9b1o66k1r1o6c6bj1paajun1qeekfz1ricyrj1riil1b1smgykf1smmlmn1tqkz5r1tqqm7z1uuozr31uuumtb1vyt0cf1vyynen1x2x0xr1y711j37a56dj89hi26ee63egmmliba639a04acllacmlfailiimmigeajlaadl8blleamlgc8ejj219e94jj62429l817a81aa396ammkjddcelmhbmmifaammihll69jlhgllii49lh8a9a93db549bal12bg8gmmcimmlliimlihllaegd6e68ggaaji689g22agaa12lm41djeimmg3ihmmliea1cilcclmmmeblegjml99fia638lf6almcahl68ll",
		yellowConcrete: "0g0g41to1w5b1us09of1us5vy71us5wqn2111111122222221232021021213122222211020112110121211022201012212122222312211221122213110202011133121132211112221221211211111112120231210211111201132001211212111211102220222021102211223011100222121202222222132111211111112111112021121120222221222011012122121",
		yellowWool: "0g0gj1us5vy71usbj0f1vw9wjj1vwfitb1vwfjlr1vwl5vj1vwl6nz1vwqsxr1x0p6gv1x0utj31x10fsv1x10glb1x163nj1y54h6n1y5a48v1y5a51b1y5frb31y5fs3j1y5lf5r45239e44bc0299219biiec7731470158eg78hga7cgcchicb95dg759g47gg95ifb849ed005942ee20104g404540571436iied9989eib7iica55iicbgf34dgbbgfcc15fb4557419722576e007b4bii8ciifgccigcbge79b92924bb55ec345b006b5500fh209e9ciib1cbhifc9708cg88gihh97g9bdie45ac5314fa35gh85bf34eg",
		bookshelf: "0g0gt03fxnnj04laqdb0a0ot1b0b6j6db0c8r6db0deww730df88ov0egz6rj0gpo9330ht5kov0k20av30nf40zj0pnc1dr0qoh8fz0sy416n0w8kcn30wc5n9b0yicu0v11vb08v11vskcf13z03jz16atkvz17fehvj1as1ce71czhmv31e50qv31g6nvgf1gbtpfj1ks44qnommllhlllmmmmlmoo44477444772534oo799kk999ni9637olkffqk99gpjk631lsqffqk64gnik631soqfdqf6gcngf651ookd9kf3c7igf350mlorrsssroorrroolollmmhmllmmmllhoo77227cb7427724ooqk763gck99cb97olpj063gckq4gc10hsqk063a8fqkgcpjsoqf065a87kqgc10omkfe35ccefkcb03oorrsssroorrrrooo",
		netherBricks: "0g0g706o77cv08w9lhb0b4bzlr0dcedq70fkb4sf0gof6670iwn6kf0000000000000000556515666555165532340433333405333432133223321333000111000001110015666544155545540543333306433333143333221433243211000001110000014416641644164414330433063304330423143314321333140111011101110111464414666644166433330433344303333322033333330333",
		redNetherBricks: "0g0g70c7i51b0efew3j0fjiwov0ive1a70nbiubj0svgd1b0v3ir5r0000000000000000556515666555165532340433333405333432133223321333000111000001110015666544155545540543333306433333143333221433243211000001110000014416641644164414330433063304330423143314321333140111011101110111464414666644166433330433344303333322033333330333",
		netherQuartzOre: "0g0gc0hs27zz0m7vq4f0m81d6n0ncb0u70rsft330u2845b0v4m7sv10p0npb1bug2671e4e1vj1n1fv9b1smb9xb1312426644044643344320246610442164643068a921424676466baa866314246766ba8674662643166895678a8544641466565ba95146866310289856642b9742469b814466ab862467ba624646b952364a950268665602426852108b61623214642649a9164941364667689238976124667423804646442246624630246644",
		netherrack: "0g0g70hs27zz0m7vq4f0m81d6n0ncb0u70rsft330v4m7sv10p0npb1312425544044543344320245210442154543012432142456545423545531424565424566455254315431566554244541452054554214565531024541154246642454221445541452456540245455112354554025655200242254210254102321454254122154541354556512234565124556423204545442245524530245544",
		netherWartBlock: "0g0g60of09vj0suze9r0xana4f1539r7j1brbain1g7rcvz0122001222532010222235202110022112111222202202320122201003202242042220021211122103224300222201201022220122252002210210211223102220000221222200222022221132210202012201104100222102201012211021042230122022012022212012022002220222202202220234022205220322022302",
		chiseledStoneBricks: "0g0g70oigd8f0qqoef30sz21vj0xf6vpb0yjgikf11vskcf17g711b6666655666566562644424444224444054110000111123205206665566561530640654434442154064064322334315405205430005421630540632000643062052054300053206306215435655420630641644545432053064163232322215406421110000011530556655666655543053343234433232202000000000000000",
		smoothStone: "0g0g70wb8hdr0yjgikf12zwkxr17gcnb318kgnwf1asop331d0wq9r1011002200220121054556666553445204334454444555501666455566655442255444545666645006555555554343412556664665545550243343443434466116656545555455620555554566656661054544334454454215555666665566622444566454433452165445556555455104456665566544401022112221000121",
		soulSand: "0g0g60egz94v0ht5n270k181z30oho3jz0sxyiv30xeekfz3130033202100434433135531100234004241451321012411423432542212230032442154212211332234104322433212002314322315332220023322345513032322211233445304302332013540423202342330242132302341043213032020354044321232020431445421112202350345131123302354202432103212415",
		glowstone: "0g0g80u1fugv0v5phbz10pn01r11uj6db1kqv1tr1x1ncov1y6jzlr1y711j35420045440276423654011240346654024032201131054033034542017510033014766405664136502566552454236751004554020132450531024010352320465230213276501576442654346640335420454220452013000320356304012311354016754036520357660354215764034654201003242013154216521100013",
		andesite: "0g0g60sywflr0wb8hdr0yjgikf11vsl4v17gcnb31asolxb2114332104423221245323445330122411334410122443224410133445433231235442223333211433323243210013432324542104543333423310154332333433114143343224533143342221154333332321101544332201331254422332333443443233212331543333334533112233301244323223541321322323234432",
		diorite: "0g0g60xfchz311vskcf19of1fj1gd8su71ktouf31smgykf1222352233524355201322135345543151355101325543235255312553213225351243153532255245355541332335235332455214554102243123234555521232203255443244250155213551234541244310134335513055510144221512352542543554223223212343125454353242115521455321245235554124421255",
		granite: "0g0ga0l56fi70plgu0v0yhw0sf1424tmn17eb8cf1aqna4f1e3al8f1e3x7un1jnje2n1qczoxr7434244344046445431548244224422341444335249241464143446145532344234232113754334244255342143347242445524442555322424474302155243346344255522344245535242552464245557314243844212555415442024425030323244424324439435524312355344448553215435547245544733324244425",
		polishedAndesite: "0g0g90oilzi70sz23gf0v7a3270yjgjcv10ru60v11vyakf11w3ugv19okmwv1e4v30f7878888888788785843334442443134084444443376644307416763343446440844442456433334083344333424433318444634666554320833433332123444184562444466776608434433443344540844667633366444081444444664466208466654333134760844433334465334083333664444334406100000000110000",
		polishedDiorite: "0g0g80qqu0ov0xfi5tr11vy6m71asubcv1f94t1b1jpkttr1o60w731ri7bpb7776677777666774764556657643564166764466577434506565333565454441675334576435457176544567733456607566767655346450744765756564534063556655467534516566544565544761664334655465666075673555775644517557654375466340745654576435744072445566545654512101110001100110",
		polishedGranite: "0g0g90l56fi70plgu0v0yhw0sf1424tmn17eb8cf1aqna4f1e3al8f1e3x7un1jnje2n8888786866866565843344345444334374744554442446418444243334553342844444453344443262343344443734428345543644444431844444423445544263422344554433636444433443344442734444444464334284473344244442318455444445543341633443264434455264443444334447412111001110111100",
		obsidian: "0g0g50000073013yfb304gainz0a0p1q70fksanz1000012104311343101202104211342100443013322023010432231212001210032220000001110122200211114311002212344310301001102422020000043000432223310032223200213321021211211011121100210302112012144322221442022234212421332111022211103103112131122010012102012320111111",
		craftingTableTop: "0g0g903c6e4f06oif3z0hsj18f0k0r37j0nd8r9b0v4xd6n17dojcv1bu4kxr1gbtpfj1001255555521011088267777776288008277777777772801274344433334721267467477377476257747736746747755774434434434775577477477477477557747747747747755773334334434775577367376377477526746737736747621274434444444721082777777777728018826777777628811101255555521001",
		craftingTableSide: "0g0gh04gaepr06oif3z0a0ufb30b4n4zj0fkmbr30hsj18f0k0r37j0ru00lb0v4xd6n0yicsfz156v7cv17fehvj1bvja4f1e50qv31f7pou71hfxp8f1o60w731ceff486684fffe11eccab4664cceeb11eeecec22bbccee1199aa971197977911fbffff66ffeccb11ee5b5b44cceeee11bc3c3c44eeccbb11799g97117999a911ffgcgf66fffffe11cededc44bcbcbb11eccbbb44cccbbe1179aa97009a997711beffee66ffbfef11ceebbc44eececc11bbcecb44ecbbbb1199779a119797771",
		craftingTableFront: "0g0gh04gaepr06oif3z0b4n4zj0fkmbr30hsj18f0k0r37j0ru00lb0v4xd6n0yicsfz156v7cv17fehvj1bvja4f1e50qv31f7pou71hfxp8f1o60w731y711j31bdee375573eeed11dbb9a3553bbdda11dddbdb33aabbdd118899861186444811eaeeee55ee2b2a11dd4aba33bb222d11ab2bbb33ddccca116829861168gff811ee2bbe55eegffd11bfffdb33abaffa11dcfgaa33bbbgfd11689986008988f611adeedd55eeaege11bddaab33ddbdbb11aabdba33dbaaaa11886689118686661",
		furnaceFront: "0g0gd04gg2kf08ww4xr0gpim0v0ma2ozj0pmeqrj0sywflr0wb8hdr10rojr31440lj317gcnb31asop331d0wq9r1ilgt8f3333233322232233355665656656564324686756787865633577211111127653367200000000264226500011110008423650022222200843268aabbbbbbaa86226765465456565533cbccccccccccca33aaaba7777abab9239a8410000148a933883000000003693368000111100098328601111111106922522233333322252",
		furnaceSide: "0g0gc0gpim0v0ma2ozj0pmeqrj0sywflr0wb8hdr0yjgikf10rojr31440lj317gcnb31asop331d0wq9r1ilgt8f1111011100010011123343643334332112477232664366411366672347663661124664243676243002233267634631101377436676334421046673664276664003443224276664311babbbbbbbbbbb911899a9aaaaaa8a8008899999999999710788889899999871157878888987875113344344444433311111011100001111",
		furnaceTop: "0g0g70gpim0v0ma2ozj0pmeqrj0sywflr0wb8hdr10rojr31440lj31111011100010011122235542334532112466442565355411365662466653441145654234666243003233254334522101256356665225531046653666356664006666445356664511666653353455511146664566653223002454366666536410522324566645551146224234443554112434541233234311111011100001111",
		blastFurnaceFront: "0g0gg04gg2kf0gpo9vj0k20av30l64bgf0oigd8f0rumry70sywflr0v7fojj0wb8hdr0yjgikf11vmy2n12zwkxr17gcnb31asubcv1e50qv31ilgt8ffdbb68686886fdbbd12632112221d126b24722333443b247877a12221133877a61134544432211168122244312233338823aaaaa88886338633afffffddd62266118cd0d0d0c6116befc6d0d0d0c4eeb6b6c6d0c0c0c4cc66b847cfcfcf74ac66ba2777777772ba64aa2222444444a9449a98888888899944444444444444444",
		blastFurnaceSide: "0g0gf0gpo9vj0k20av30l64bgf0oigd8f0rumry70sywflr0v7fojj0wb8hdr0yjgikf11vmy2n12zwkxr17gcnb31asubcv1e50qv31ilgt8fecaa57757775ecaac01521001110c015a13611222332a136766901110022766950023433321100055011133211122335712332121233332772332122011222175011000000111005adddddddddddddda59babbabaa999aa559a9ba9aa9a9a8a55989a9a989998985389889899898787337887877887877733333333333333333",
		blastFurnaceTop: "0g0g60gpo9vj0k20av30l64bgf0oigd8f0sywflr0wb8hdr4554433333344555541211000112214441123321000121155021100011222225412331012333210432100000001100043232101233333203311011233221111330001101000010133122022122333223311233222112221342221100010110035001111101332105511232123321011554122101121001454545443333335353",
		smokerBottom: "0g0g80fl385b0gpim0v0ma2ozj0pmeqrj0ru00lb0sywflr0wb8hdr10rojr34422122211121144402357763556720422677663777577222577773677775662267776356777365115355376556733212377577777337752167775777577776117777667577776722777775575677722267776777775335113676577777757621733536777767772227336356665772244256762355352040422122211112244",
		smokerFront: "0g0gj06oo3r308wku0v0a105j30egz9xb0fl385b0gpim0v0k20av30m9fzzz0ma2ozj0oigd8f0ru00lb0sywflr0wb8hdr0yicsfz0yjgikf11vmy2n156v7cv1asubcv1ilgt8fga555555555555ggd74aadda7dd7a47aga47aa7477aa74a7gg9bbbbbbbbbc9daad6ii2000002bbgg7a9ii0000000fcadda9ih0000002fc7adg6ie2222222cfa777ffcfhfhhhhff77a7113731137111gddg1da3d33da3a1daad4477474477447aga4da4da4da4a4ddgd3a73a73a7377adad133133133131a77488888888888874",
		smokerSide: "0g0gc0fl385b0gpim0v0m9fzzz0ma2ozj0pmeqrj0ru00lb0sywflr0wb8hdr0yicsfz10rojr31440lj3156v7cvb5111111111111bb8205588528825025b502552022552052bb4666466666648558699479999676bb257974679994775885664976679447258b76999994499452227767776777772252002202002200b88b085085085050855805205205202225b53aa4a4aaa6a388b8399a467a9963585839974769a943522033333333333320",
		smokerTop: "0g0ga06oo3r30a105j30fl385b0gpim0v0ma2ozj0pmeqrj0ru00lb0sywflr0wb8hdr10rojr36644344433343366624579985778942644877887777799444777995899997884487943111134587337573111111355434579110000119774387911000011978339791100001197944979110000119744487931111113557335894311113477843955758999989794449558578887774466478984577574262644344433334466",
		loomTop: "0g0gd0dcv7r30m9lm9r0sy416n0zmb5z310qqnsv1576pdr19n5lvj1arwg731czhmv31e4e51b1gbifb31jo5rzz1lx68e7b39393937393939b80709090907070788171719191919178819171917171719881919191919191988090c09090c190c8829292c2c2c2c29886c6c6c6c6c6c6c881c1c17171c1c1c88191c1c19191919881717171717171788040404040404048abbaabbabbbbbbba81417151715171488010101010101018bb8ba8aaabbb8bab",
		loomSide: "0g0g90ncxji70u1ac5b0zmb5z310phiin12xpiwv19n5lvj1gbifb31ik1ptr1jo5rzz8888868866666888611111111111111861033333333330166343333344333416633333333111100660113133333333166333333333333316655555555555552667888686888678866111111111111116633344444333341661111131333311166103333333333016614444443344431668887688868886762222222222222222",
		loomFront: "0g0gf0dcv7r30m9lm9r0ncxji70sy416n0u1ac5b0zmb5z310qqnsv16bapz319n5lvj1arwg731czhmv31e4e51b1gbifb31ik1ptr1jo5rzzebebebebe9e9ebee89898989898b89888b8989898989898889a9a9a9a9a9a9a887a7a7a7a7a7a7a887a7a7a7a7a7a7a8871717171717171886363636363636388eeddeeeededdde88d244444444442c88aacaccccccacaa88000000000000008801111111111110880355555555553088aeeddeedeeecda85555555555555555",
		loomBottom: "0g0g40dcv7r30m9lm9r0sy416n0zmb5z31111111111111111100000000000002110111111111111211011111111111121100000000000001110111111111111211011111111111121100000000000001110111111111111211011111111111121100000000000001110111111111111211011111111111121100000000000001113333333333333311111111111111111",
		water: function (n) {
			var pix = getPixels("0g0g819okofo1bwspmc1hhcsl01ktoud01lxsuyc1n1wvjo1x2x0vo1y711h02111000111112435000011111100000011000000112221001000122111221111001110000100011100101121112110002111111111114472434111211111112277424742121221140000000000000100100001000112111100000000000000010000000000010000100001111122101000000001127732101211466211211111")
			for (var i = 0; i < pix.length; i += 4) {
				var bright = pix[i] / 255
				setPixel(n, i >> 2 & 15, i >> 6, bright * 30, bright * 50, bright * 255, 255);
			}
		},
		lava: "0g0gp1jjxhbz1jjxi4f1jk33lr1knvuv31ko1hxb1lsrytb1lsrzlr1mwqd4v1o1mhvj1o1minz1p5kven1p5kw731p67ev31p6io731qa5se71qabfgf1qaxxbz1qaxy4f1rewbnj1sjmuwv1sjmvpb1to7sov1ut3zsv1ut9m2n1y687b3965ckke60666999cf996f8c66cd69fjddd96606669f67hold967629c96669lll966666dhc9969jfh97666chh69df699c96999kk969kd69f99696dlnf069536669ha66fh960066456hhk97690017ll66chgl96000009ml5696969hg63066862666666kl7066c60068li69990669d6609knldh66046699hb6hefckh960656fhd69",
		shroomlight: "0g0gh1dzj3sv1mwkohr1o0j20v1o0ooan1rdsr271rdydbz1y2bd331y2bdvj1y2h05b1y3vvnj1y3vwfz1y41ipr1y4tp8f1y4zbi71y5rl6n1y5x7gf1y6perj303518843009ee7105444199852de9d838899dc991879dc92489eeed94996998519eg9d819cc96a4249f99719cgge9841811dda19cgg998484ff14481de994a88aec7eed84dd819984d96eg9d4811b984847dd99d8a99444884d44dd944eefa184fc9a48129eg9451dc9a4ddb1a97843489844d9834444304414424200352300",
		polishedBlackstoneBricks: "0g0g605k8ttr07sb8qn0a0uhof0dd6ltr0gpioe70l5yqrj3554554554554430343435443223334034544423224424404343433443432120443333433332112023441233212212302243232221132330110011000011111154554440124555453343434034344544234544402355444343343420443443344343232045432323323221104432121221121210332211110011100000101100",
		gildedBlackstone: "0g0ga05k8ttr07sb8qn0a0uhof0dd6ltr0gpioe70iw63un0l5yqrj0yh98n31o36n0f1y6dkvz2332220233343553308750023334435308122103389432107233332334791121133444244662812544643213222271253443222533225211122225732133211311233034318752233331013215133225222378112364433713344192114664383344438211113472446622272222255244631125011103313221112022235322",
		chiseledPolishedBlackstone: "0g0g605k8ttr07sb8qn0a0uhof0dd6ltr0gpioe70l5yqrj5554555555554452534344333334334053111212222215315315555555452541541544444434244144253433333425315413555555431541542451555153254154235154414315315323444444432431542533222234154154244443443315314312222121111531335554555545453123334344333333322212100000102121",
		blackstone: "0g0g605k8ttr07sb8qn0a0uhof0dd6ltr0gpioe70l5yqrj2332220233343113300110023334431301122103344432100233332334451121133444244552112144543213222211213443222133221211122220032133211311233034310112233331013210133220222320112354433013344102114554313344431211113412445522212222210244531120011103313221112022232322",
		blackstoneTop: "0g0g505k8ttr07sb8qn0a0uhof0dd6ltr0gpioe72344331234322300044332111232103404342234311134231232033442144342220002442003433122242013000033211244343012100211134343314422013322342024333302342201122443320011400234324421012343233444200134244034402321024442124432121102343213342323432023223211332344400430",
		netheriteBlock: "0g0ga0a0oven0c92jnj0dd0x6n0flk8hr0gp7bwf0hts9of0k1uolb0l5ne9r0l5yp6n0oiaqyn4244444444424420269999999998998049366888567766804956778868875380496578788886546049565768988854624955568889666360496538888865638049688886685653624988985556556362288878555533448049878763353341802836665335341180283433341111148228666888688888602000022000220000",
		basaltSide: "0g0g506p53b30ddc9of0flkbnj0l5yp6n0pmkdtr3023343444343313101134344434332201133444443432330033444434341233203434323322330221144322343231021114242344323123113122334341313213343243444102331333434444441244113343443443034411344344234403413334433213432321133123231332342213234244313224333033434443432343",
		basaltTop: "0g0g706p53b30ehga9r0gpoc8v0l5yp6n0pmkdtr0wb8hdr11vskcf4455351155441441456511331442211325311344412652343145234531556413056542441155542004544221451442440044001444512332511033244551032544133442550001542223454220155144344044144154451344550145545444014555224533144100054145233100144001144450155145541443445056434544",
		polishedBasaltSide: "0g0g606p53b30ddc9of0flkbnj0l5yp6n0pmkdtr0wb8hdr1235443544334421023545354543342202354545454534221335555545554422123455454555433222344545455543321234355543544321113335555354432101353545545353210135354555545320014545455554431012444545555543101345453555453321234545355545433123454535454543312345443545444432",
		polishedBasaltTop: "0g0g70ddc9of0ehga9r0gpoc8v0l5yp6n0pmkdtr0wb8hdr11vskcf0255331155431320054464436445343225656554655654443453434433333553244366665555333226546434434535442433636565354664566363634545354444435364353636532563545555364665345354343346354444535555566635523554333434333653246653645644555225565455564545420245443555434520",
		chiseledSandstone: "0g0g71ikin0f1lwur5r1n1a1vj1o5pclb1qdxfcv1ricpa71tqf5rz6666656655565555433332233333333221211111111010006666665555555550634330033003323053333103310332204344344004433320534333000033322044334404403432202111111111100000555555555555454053303300333000404302112112144020414143414313313043443333223323201111111110100000",
		cutSandstone: "0g0g71ikin0f1lwur5r1n1a1vj1o5pclb1qdxfcv1ricpa71tqf5rz6666656555555554433222223323332222111111100000006666652555555540644343332442323164323333333332405333433322333340433224433243432052333343333333305223333333223320532342334323322024334433234333405434433333333330433333333322234144214344332134410100001100000000",
		sandstoneTop: "0g0g51n1a1vj1o5jqbj1p9td6n1qdxfcv1ricpa70322342222123321232223333131233133133234222102234233222323233212333321033333312222333013134311222132332132332212102232332131232121022343112232113202333321333321331134313233323332323310232332323123310133214311331333223332233222431233233322332023133222343332",
		sandstone: "0g0g71ikin0f1lwur5r1n1a1vj1o5pclb1qdxfcv1ricpa71tqf5rz6666656555555554433222223323332200001100011000005014555515551015313232514433313335114410434340533331100013321003333504551214551013014333414343501002335300323334344253315514433133301015325104011315530323333024415441533324135231442015410001333311145114512211",
		sandstoneBottom: "0g0g61ikin0f1lwur5r1n1a1vj1o5pclb1qdxfcv1ricpa70244131433351344243310003331044213314441010030213014332315551105313232514433313335114410434340533331100013321003333504551214551013014333414343501002335300323334344253315514433133301015325104011315530323333024415441533324135231442015410001333311145114512210",
		lodestoneSide: "0g0g80flk9a70k20cfz0sywflr0wb8hdr0yjgikf12zwkxr18kmcjj1at00sf7677656555565667764001112122146664423434332424466112430000432106613335034045430541545044340445154250035004300515413034000054041442414510115513154241136116411524424661566516651442254615526345254244551222552225477255666654266555522422222426544556665655566655",
		lodestoneTop: "0g0g50sywflr0yjgikf12zwkxr18kmcjj1at00sf4344433444433444411100101100011441444434443444134143323232323403304321232123331441322111121224034042121111112314404221111111331431421111111224043133211112113404403222121122240331432321123233144043322223233404414444334434441441100001001011144443333334434444",
		magma: "0g1ca0hs27zz0m81d6n0rsft330v4m7sv1jkpkov1rdbzen1vu37y71vueiv31wzat4v1wzrrwf
		slime: "0g0g50olklv80qty9bo0va8r040xigqlw0ximegk2213321122213342244444223222220434321221112321231421013222222121241002221200212223211122340122222321222233222122231210222222213223120022222220322212223222011232122122222111232112322222221003213224322021101342300112111222334240123333444444422432221122222122",
		nukeSide: "[219, 67, 26, 255, 201, 62, 23, 255, 184, 55, 23, 255, 167, 53, 19, 255, 217, 68, 26, 255, 201, 62, 23, 255, 181, 57, 23, 255, 167, 53, 19, 255, 219, 67, 26, 255, 201, 62, 23, 255, 183, 56, 21, 255, 168, 52, 21, 255, 219, 67, 26, 255, 200, 63, 21, 255, 183, 56, 21, 255, 167, 53, 19, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 52, 16, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 51, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 61, 22, 255, 169, 52, 19, 255, 145, 45, 17, 255, 219, 67, 26, 255, 192, 61, 25, 255, 169, 52, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 52, 16, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 51, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 61, 22, 255, 169, 52, 19, 255, 145, 45, 17, 255, 219, 67, 26, 255, 192, 61, 25, 255, 169, 52, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 52, 16, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 51, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 61, 22, 255, 169, 52, 19, 255, 145, 45, 17, 255, 219, 67, 26, 255, 192, 61, 25, 255, 169, 52, 19, 255, 145, 46, 17, 255, 215, 70, 24, 255, 191, 63, 18, 255, 170, 52, 17, 255, 140, 48, 17, 255, 215, 69, 26, 255, 191, 63, 18, 255, 168, 53, 15, 255, 140, 48, 17, 255, 215, 70, 24, 255, 190, 63, 18, 255, 165, 54, 15, 255, 142, 48, 12, 255, 215, 70, 24, 255, 190, 63, 18, 255, 165, 54, 15, 255, 140, 48, 17, 255, 219, 219, 219, 255, 219, 219, 219, 255, 219, 219, 219, 255, 206, 206, 206, 255, 219, 219, 219, 255, 219, 219, 219, 255, 219, 219, 219, 255, 219, 219, 219, 255, 206, 206, 206, 255, 219, 219, 219, 255, 219, 219, 219, 255, 206, 206, 206, 255, 206, 206, 206, 255, 219, 219, 219, 255, 219, 219, 219, 255, 206, 206, 206, 255, 206, 206, 206, 255, 219, 219, 219, 255, 247, 0, 0, 255, 246, 1, 0, 255, 247, 1, 0, 255, 206, 206, 206, 255, 247, 0, 0, 255, 205, 207, 206, 255, 219, 219, 219, 255, 249, 0, 0, 255, 206, 206, 206, 255, 247, 1, 0, 255, 246, 1, 0, 255, 247, 0, 0, 255, 219, 219, 219, 255, 206, 206, 206, 255, 206, 206, 206, 255, 206, 206, 206, 255, 206, 206, 206, 255, 246, 1, 0, 255, 204, 207, 207, 255, 206, 206, 206, 255, 246, 1, 0, 255, 246, 1, 0, 255, 206, 206, 206, 255, 249, 0, 0, 255, 206, 206, 206, 255, 204, 207, 207, 255, 246, 1, 0, 255, 206, 206, 206, 255, 206, 206, 206, 255, 206, 206, 206, 255, 206, 206, 206, 255, 206, 206, 206, 255, 206, 206, 206, 255, 246, 1, 0, 255, 204, 207, 207, 255, 206, 206, 206, 255, 248, 0, 0, 255, 206, 206, 206, 255, 246, 1, 0, 255, 246, 1, 0, 255, 206, 206, 206, 255, 204, 207, 207, 255, 246, 1, 0, 255, 206, 206, 206, 255, 206, 206, 206, 255, 206, 206, 206, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 246, 1, 0, 255, 204, 207, 207, 255, 175, 175, 175, 255, 248, 0, 0, 255, 206, 206, 206, 255, 205, 207, 206, 255, 247, 0, 0, 255, 206, 206, 206, 255, 204, 207, 207, 255, 246, 1, 0, 255, 175, 175, 175, 255, 175, 175, 175, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 175, 175, 175, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 175, 175, 175, 255, 180, 59, 16, 255, 159, 50, 17, 255, 136, 45, 16, 255, 120, 37, 10, 255, 179, 58, 19, 255, 159, 50, 17, 255, 141, 43, 16, 255, 120, 37, 10, 255, 180, 59, 16, 255, 158, 51, 18, 255, 141, 43, 15, 255, 124, 35, 13, 255, 180, 59, 16, 255, 155, 52, 17, 255, 141, 43, 15, 255, 120, 37, 10, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 52, 16, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 51, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 61, 22, 255, 169, 52, 19, 255, 145, 45, 17, 255, 219, 67, 26, 255, 192, 61, 25, 255, 169, 52, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 52, 16, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 51, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 61, 22, 255, 169, 52, 19, 255, 145, 45, 17, 255, 219, 67, 26, 255, 192, 61, 25, 255, 169, 52, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 52, 16, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 60, 25, 255, 170, 51, 19, 255, 145, 46, 17, 255, 219, 67, 26, 255, 194, 61, 22, 255, 169, 52, 19, 255, 145, 45, 17, 255, 219, 67, 26, 255, 192, 61, 25, 255, 169, 52, 19, 255, 145, 46, 17, 255, 196, 59, 25, 255, 178, 55, 21, 255, 161, 48, 20, 255, 145, 46, 17, 255, 196, 59, 23, 255, 178, 55, 21, 255, 159, 50, 19, 255, 145, 46, 17, 255, 196, 59, 25, 255, 178, 55, 21, 255, 162, 49, 19, 255, 146, 45, 18, 255, 196, 59, 25, 255, 177, 56, 19, 255, 162, 49, 19, 255, 145, 46, 17, 255]",
		honeyBlockTop: "[247, 153, 9, 191, 247, 153, 9, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 246, 219, 112, 191, 255, 206, 93, 191, 250, 171, 28, 191, 247, 153, 9, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 255, 206, 93, 191, 253, 193, 52, 191, 253, 193, 52, 191, 250, 171, 28, 191, 250, 171, 28, 191, 253, 193, 52, 191, 255, 206, 93, 191, 248, 227, 138, 191, 255, 206, 93, 191, 253, 193, 52, 191, 250, 171, 28, 191, 247, 153, 9, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 255, 206, 93, 191, 253, 193, 52, 191, 250, 171, 28, 191, 250, 171, 28, 191, 253, 193, 52, 191, 255, 206, 93, 191, 248, 227, 138, 191, 248, 227, 138, 191, 255, 206, 93, 191, 253, 193, 52, 191, 250, 171, 28, 191, 247, 153, 9, 191, 250, 171, 28, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 253, 193, 52, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 255, 206, 93, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 253, 193, 52, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 247, 153, 9, 191, 250, 171, 28, 191, 255, 206, 93, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 255, 206, 93, 191, 253, 193, 52, 191, 250, 171, 28, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 250, 171, 28, 191, 255, 206, 93, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 250, 171, 28, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 250, 171, 28, 191, 250, 171, 28, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 253, 193, 52, 191, 255, 206, 93, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 247, 153, 9, 191, 250, 171, 28, 191, 250, 171, 28, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 250, 171, 28, 191, 247, 153, 9, 191, 247, 153, 9, 191, 247, 153, 9, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 255, 206, 93, 191, 255, 206, 93, 191, 255, 206, 93, 191, 253, 193, 52, 191, 250, 171, 28, 191, 253, 193, 52, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 247, 153, 9, 191, 253, 193, 52, 191, 253, 193, 52, 191, 253, 193, 52, 191, 255, 206, 93, 191, 246, 219, 112, 191, 246, 219, 112, 191, 246, 219, 112, 191, 255, 206, 93, 191, 255, 206, 93, 191, 253, 193, 52, 191, 247, 153, 9, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 247, 153, 9, 191, 250, 171, 28, 191, 253, 193, 52, 191, 255, 206, 93, 191, 246, 219, 112, 191, 248, 227, 138, 191, 248, 227, 138, 191, 246, 219, 112, 191, 255, 206, 93, 191, 253, 193, 52, 191, 253, 193, 52, 191, 250, 171, 28, 191, 247, 153, 9, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 250, 171, 28, 191, 250, 171, 28, 191, 255, 206, 93, 191, 246, 219, 112, 191, 248, 227, 138, 191, 248, 227, 138, 191, 255, 206, 93, 191, 255, 206, 93, 191, 246, 219, 112, 191, 253, 193, 52, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 253, 193, 52, 191, 247, 153, 9, 191, 247, 153, 9, 191, 250, 171, 28, 191, 250, 171, 28, 191, 255, 206, 93, 191, 246, 219, 112, 191, 246, 219, 112, 191, 255, 206, 93, 191, 255, 206, 93, 191, 246, 219, 112, 191, 255, 206, 93, 191, 253, 193, 52, 191, 250, 171, 28, 191, 250, 171, 28, 191, 250, 171, 28, 191, 253, 193, 52, 191, 247, 153, 9, 191, 247, 153, 9, 191, 250, 171, 28, 191, 253, 193, 52, 191, 246, 219, 112, 191, 246, 219, 112, 191, 255, 206, 93, 191, 255, 206, 93, 191, 255, 206, 93, 191, 246, 219, 112, 191, 253, 193, 52, 191, 250, 171, 28, 191, 250, 171, 28, 191, 247, 153, 9, 191, 253, 193, 52, 191, 250, 171, 28, 191]",
		honeyBlockSide: "[250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 253, 193, 52, 189, 248, 227, 138, 189, 248, 227, 138, 189, 246, 219, 112, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 253, 193, 52, 189, 253, 193, 52, 189, 246, 219, 112, 189, 246, 219, 112, 189, 246, 219, 112, 189, 246, 219, 112, 189, 255, 206, 93, 189, 255, 206, 93, 189, 246, 219, 112, 189, 255, 206, 93, 189, 253, 193, 52, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 253, 193, 52, 189, 250, 171, 28, 189, 255, 206, 93, 189, 246, 219, 112, 189, 246, 219, 112, 189, 255, 206, 93, 189, 255, 206, 93, 189, 246, 219, 112, 189, 255, 206, 93, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 253, 193, 52, 189, 250, 171, 28, 189, 255, 206, 93, 189, 255, 206, 93, 189, 246, 219, 112, 189, 253, 193, 52, 189, 250, 171, 28, 189, 253, 193, 52, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189, 250, 171, 28, 189, 253, 193, 52, 189, 253, 193, 52, 189, 255, 206, 93, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 247, 153, 9, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 247, 153, 9, 189, 250, 171, 28, 189, 253, 193, 52, 189, 255, 206, 93, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 250, 171, 28, 189, 247, 153, 9, 189, 250, 171, 28, 189, 253, 193, 52, 189, 255, 206, 93, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 250, 171, 28, 189, 255, 206, 93, 189, 253, 193, 52, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 253, 193, 52, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189, 253, 193, 52, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 253, 193, 52, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 253, 193, 52, 189, 253, 193, 52, 189, 246, 219, 112, 189, 248, 227, 138, 189, 248, 227, 138, 189, 246, 219, 112, 189, 255, 206, 93, 189, 253, 193, 52, 189, 253, 193, 52, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189, 250, 171, 28, 189, 246, 219, 112, 189, 248, 227, 138, 189, 248, 227, 138, 189, 246, 219, 112, 189, 246, 219, 112, 189, 246, 219, 112, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 253, 193, 52, 189, 253, 193, 52, 189, 253, 193, 52, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 246, 219, 112, 189, 246, 219, 112, 189, 246, 219, 112, 189, 255, 206, 93, 189, 255, 206, 93, 189, 246, 219, 112, 189, 246, 219, 112, 189, 246, 219, 112, 189, 255, 206, 93, 189, 255, 206, 93, 189, 246, 219, 112, 189, 246, 219, 112, 189, 246, 219, 112, 189, 253, 193, 52, 189, 255, 206, 93, 189, 255, 206, 93, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 253, 193, 52, 189, 255, 206, 93, 189, 246, 219, 112, 189, 246, 219, 112, 189, 246, 219, 112, 189, 246, 219, 112, 189, 255, 206, 93, 189, 255, 206, 93, 189, 246, 219, 112, 189, 246, 219, 112, 189, 246, 219, 112, 189, 255, 206, 93, 189, 253, 193, 52, 189, 255, 206, 93, 189, 253, 193, 52, 189, 253, 193, 52, 189, 253, 193, 52, 189, 255, 206, 93, 189, 255, 206, 93, 189, 255, 206, 93, 189, 246, 219, 112, 189, 246, 219, 112, 189, 253, 193, 52, 189, 253, 193, 52, 189, 255, 206, 93, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 253, 193, 52, 189, 253, 193, 52, 189, 255, 206, 93, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 250, 171, 28, 189, 253, 193, 52, 189, 255, 206, 93, 189, 255, 206, 93, 189, 253, 193, 52, 189, 250, 171, 28, 189, 250, 171, 28, 189, 250, 171, 28, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 247, 153, 9, 189, 250, 171, 28, 189]",
		honeyBlockBottom: "[250, 171, 28, 129, 250, 171, 28, 129, 250, 171, 28, 129, 250, 171, 28, 129, 253, 193, 52, 129, 253, 193, 52, 129, 250, 171, 28, 129, 253, 193, 52, 129, 250, 171, 28, 129, 247, 153, 9, 129, 235, 127, 17, 129, 247, 153, 9, 129, 250, 171, 28, 129, 250, 171, 28, 129, 253, 193, 52, 129, 253, 193, 52, 129, 250, 171, 28, 129, 253, 193, 52, 129, 253, 193, 52, 129, 247, 153, 9, 129, 247, 153, 9, 129, 247, 153, 9, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 235, 127, 17, 129, 250, 171, 28, 129, 253, 193, 52, 129, 253, 193, 52, 129, 253, 193, 52, 129, 253, 193, 52, 129, 247, 153, 9, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 228, 117, 3, 129, 247, 153, 9, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 247, 153, 9, 129, 250, 171, 28, 129, 253, 193, 52, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 247, 153, 9, 129, 235, 127, 17, 129, 228, 117, 3, 129, 228, 117, 3, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 250, 171, 28, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 235, 127, 17, 129, 253, 193, 52, 129, 247, 153, 9, 129, 235, 127, 17, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 250, 171, 28, 129, 247, 153, 9, 129, 250, 171, 28, 129, 235, 127, 17, 129, 235, 127, 17, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 235, 127, 17, 129, 247, 153, 9, 129, 228, 117, 3, 129, 247, 153, 9, 129, 235, 127, 17, 129, 247, 153, 9, 129, 250, 171, 28, 129, 247, 153, 9, 129, 250, 171, 28, 129, 235, 127, 17, 129, 247, 153, 9, 129, 228, 117, 3, 129, 235, 127, 17, 129, 235, 127, 17, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 235, 127, 17, 129, 228, 117, 3, 129, 235, 127, 17, 129, 235, 127, 17, 129, 250, 171, 28, 129, 250, 171, 28, 129, 235, 127, 17, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 235, 127, 17, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 235, 127, 17, 129, 247, 153, 9, 129, 250, 171, 28, 129, 250, 171, 28, 129, 235, 127, 17, 129, 250, 171, 28, 129, 235, 127, 17, 129, 235, 127, 17, 129, 228, 117, 3, 129, 247, 153, 9, 129, 235, 127, 17, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 253, 193, 52, 129, 250, 171, 28, 129, 247, 153, 9, 129, 247, 153, 9, 129, 247, 153, 9, 129, 235, 127, 17, 129, 228, 117, 3, 129, 235, 127, 17, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 228, 117, 3, 129, 235, 127, 17, 129, 235, 127, 17, 129, 250, 171, 28, 129, 250, 171, 28, 129, 253, 193, 52, 129, 250, 171, 28, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 228, 117, 3, 129, 235, 127, 17, 129, 235, 127, 17, 129, 228, 117, 3, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 250, 171, 28, 129, 250, 171, 28, 129, 253, 193, 52, 129, 247, 153, 9, 129, 235, 127, 17, 129, 247, 153, 9, 129, 235, 127, 17, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 235, 127, 17, 129, 228, 117, 3, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 250, 171, 28, 129, 250, 171, 28, 129, 253, 193, 52, 129, 250, 171, 28, 129, 247, 153, 9, 129, 235, 127, 17, 129, 250, 171, 28, 129, 247, 153, 9, 129, 250, 171, 28, 129, 247, 153, 9, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 250, 171, 28, 129, 250, 171, 28, 129, 250, 171, 28, 129, 253, 193, 52, 129, 253, 193, 52, 129, 253, 193, 52, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 253, 193, 52, 129, 250, 171, 28, 129, 253, 193, 52, 129, 250, 171, 28, 129, 247, 153, 9, 129, 247, 153, 9, 129, 247, 153, 9, 129, 247, 153, 9, 129, 247, 153, 9, 129, 250, 171, 28, 129, 250, 171, 28, 129, 250, 171, 28, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 253, 193, 52, 129, 253, 193, 52, 129, 250, 171, 28, 129, 247, 153, 9, 129, 250, 171, 28, 129, 250, 171, 28, 129, 250, 171, 28, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 247, 153, 9, 129, 247, 153, 9, 129, 235, 127, 17, 129, 235, 127, 17, 129, 247, 153, 9, 129, 250, 171, 28, 129]",
		soulSoil: "0g0g50egz94v0gp1n9b0k181z30oho3jz0sxyiv33221122101123344221023101013233421003310012224231111320012223332100230222233232101133223332332211133233344322210232233234322111221133443222112221133443221113321343443221123211144432121133200133432211133210124432210023310023443120012321012434221012221012334",
		gildedDebrisTop: "[142, 53, 0, 255, 142, 53, 0, 255, 225, 197, 93, 255, 226, 255, 150, 255, 226, 255, 150, 255, 226, 255, 150, 255, 225, 197, 93, 255, 191, 146, 56, 255, 151, 89, 0, 255, 142, 53, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 192, 98, 0, 255, 226, 255, 150, 255, 192, 98, 0, 255, 225, 197, 93, 255, 113, 48, 0, 255, 225, 197, 93, 255, 226, 255, 150, 255, 142, 53, 0, 255, 113, 48, 0, 255, 113, 48, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 191, 146, 56, 255, 225, 197, 93, 255, 226, 255, 150, 255, 226, 255, 150, 255, 226, 255, 150, 255, 225, 197, 93, 255, 192, 98, 0, 255, 191, 146, 56, 255, 225, 197, 93, 255, 226, 255, 150, 255, 225, 197, 93, 255, 191, 146, 56, 255, 225, 197, 93, 255, 226, 255, 150, 255, 151, 89, 0, 255, 151, 89, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 113, 48, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 226, 255, 150, 255, 226, 255, 150, 255, 191, 146, 56, 255, 192, 98, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 151, 89, 0, 255, 226, 255, 150, 255, 226, 255, 150, 255, 225, 197, 93, 255, 191, 146, 56, 255, 151, 89, 0, 255, 191, 146, 56, 255, 151, 89, 0, 255, 151, 89, 0, 255, 142, 53, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 113, 48, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 225, 197, 93, 255, 191, 146, 56, 255, 113, 48, 0, 255, 225, 197, 93, 255, 113, 48, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 225, 197, 93, 255, 191, 146, 56, 255, 113, 48, 0, 255, 191, 146, 56, 255, 226, 255, 150, 255, 225, 197, 93, 255, 151, 89, 0, 255, 142, 53, 0, 255, 225, 197, 93, 255, 113, 48, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 142, 53, 0, 255, 192, 98, 0, 255, 113, 48, 0, 255, 226, 255, 150, 255, 142, 53, 0, 255, 142, 53, 0, 255, 225, 197, 93, 255, 113, 48, 0, 255, 225, 197, 93, 255, 113, 48, 0, 255, 226, 255, 150, 255, 142, 53, 0, 255, 225, 197, 93, 255, 142, 53, 0, 255, 151, 89, 0, 255, 225, 197, 93, 255, 113, 48, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 225, 197, 93, 255, 113, 48, 0, 255, 142, 53, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 226, 255, 150, 255, 151, 89, 0, 255, 226, 255, 150, 255, 142, 53, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 142, 53, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 226, 255, 150, 255, 151, 89, 0, 255, 191, 146, 56, 255, 151, 89, 0, 255, 225, 197, 93, 255, 225, 197, 93, 255, 113, 48, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 225, 197, 93, 255, 151, 89, 0, 255, 142, 53, 0, 255, 225, 197, 93, 255, 142, 53, 0, 255, 226, 255, 150, 255, 142, 53, 0, 255, 225, 197, 93, 255, 142, 53, 0, 255, 113, 48, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 192, 98, 0, 255, 113, 48, 0, 255, 226, 255, 150, 255, 151, 89, 0, 255, 142, 53, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 225, 197, 93, 255, 151, 89, 0, 255, 142, 53, 0, 255, 225, 197, 93, 255, 226, 255, 150, 255, 226, 255, 150, 255, 191, 146, 56, 255, 225, 197, 93, 255, 192, 98, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 226, 255, 150, 255, 151, 89, 0, 255, 113, 48, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 191, 146, 56, 255, 113, 48, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 151, 89, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 113, 48, 0, 255, 113, 48, 0, 255, 225, 197, 93, 255, 151, 89, 0, 255, 113, 48, 0, 255, 226, 255, 150, 255, 113, 48, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 225, 197, 93, 255, 226, 255, 150, 255, 226, 255, 150, 255, 225, 197, 93, 255, 226, 255, 150, 255, 191, 146, 56, 255, 192, 98, 0, 255, 192, 98, 0, 255, 225, 197, 93, 255, 192, 98, 0, 255, 225, 197, 93, 255, 226, 255, 150, 255, 225, 197, 93, 255, 142, 53, 0, 255, 142, 53, 0, 255, 113, 48, 0, 255, 113, 48, 0, 255, 113, 48, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 191, 146, 56, 255, 226, 255, 150, 255, 113, 48, 0, 255, 142, 53, 0, 255, 192, 98, 0, 255, 225, 197, 93, 255, 225, 197, 93, 255, 226, 255, 150, 255, 226, 255, 150, 255, 226, 255, 150, 255, 225, 197, 93, 255, 191, 146, 56, 255, 191, 146, 56, 255, 142, 53, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 226, 255, 150, 255, 142, 53, 0, 255, 192, 98, 0, 255, 142, 53, 0, 255, 191, 146, 56, 255, 226, 255, 150, 255, 192, 98, 0, 255, 191, 146, 56, 255, 225, 197, 93, 255, 191, 146, 56, 255, 191, 146, 56, 255, 151, 89, 0, 255, 225, 197, 93, 255, 226, 255, 150, 255, 225, 197, 93, 255, 226, 255, 150, 255, 225, 197, 93, 255, 142, 53, 0, 255, 225, 197, 93, 255]",
		gildedDebrisSide: "[192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 151, 89, 0, 255, 142, 53, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 113, 48, 0, 255, 151, 89, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 191, 146, 56, 255, 142, 53, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 191, 146, 56, 255, 225, 197, 93, 255, 226, 255, 150, 255, 225, 197, 93, 255, 142, 53, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 151, 89, 0, 255, 191, 146, 56, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 226, 255, 150, 255, 225, 197, 93, 255, 191, 146, 56, 255, 191, 146, 56, 255, 225, 197, 93, 255, 191, 146, 56, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 142, 53, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 226, 255, 150, 255, 226, 255, 150, 255, 225, 197, 93, 255, 191, 146, 56, 255, 151, 89, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 142, 53, 0, 255, 113, 48, 0, 255, 142, 53, 0, 255, 225, 197, 93, 255, 225, 197, 93, 255, 191, 146, 56, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 142, 53, 0, 255, 192, 98, 0, 255, 113, 48, 0, 255, 151, 89, 0, 255, 225, 197, 93, 255, 226, 255, 150, 255, 226, 255, 150, 255, 226, 255, 150, 255, 142, 53, 0, 255, 113, 48, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 142, 53, 0, 255, 113, 48, 0, 255, 225, 197, 93, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 225, 197, 93, 255, 226, 255, 150, 255, 225, 197, 93, 255, 151, 89, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 142, 53, 0, 255, 113, 48, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 113, 48, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 191, 146, 56, 255, 192, 98, 0, 255, 191, 146, 56, 255, 192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 226, 255, 150, 255, 226, 255, 150, 255, 226, 255, 150, 255, 226, 255, 150, 255, 225, 197, 93, 255, 225, 197, 93, 255, 225, 197, 93, 255, 113, 48, 0, 255, 142, 53, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 225, 197, 93, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 142, 53, 0, 255, 113, 48, 0, 255, 191, 146, 56, 255, 225, 197, 93, 255, 226, 255, 150, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 142, 53, 0, 255, 113, 48, 0, 255, 151, 89, 0, 255, 191, 146, 56, 255, 225, 197, 93, 255, 226, 255, 150, 255, 226, 255, 150, 255, 191, 146, 56, 255, 151, 89, 0, 255, 151, 89, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 142, 53, 0, 255, 142, 53, 0, 255, 142, 53, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 225, 197, 93, 255, 142, 53, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 192, 98, 0, 255, 226, 255, 150, 255, 226, 255, 150, 255, 225, 197, 93, 255, 151, 89, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 113, 48, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 192, 98, 0, 255, 225, 197, 93, 255, 226, 255, 150, 255, 191, 146, 56, 255, 225, 197, 93, 255, 226, 255, 150, 255, 225, 197, 93, 255, 151, 89, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 151, 89, 0, 255, 113, 48, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 192, 98, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 191, 146, 56, 255, 192, 98, 0, 255, 151, 89, 0, 255, 151, 89, 0, 255, 192, 98, 0, 255, 113, 48, 0, 255, 151, 89, 0, 255, 225, 197, 93, 255, 226, 255, 150, 255, 226, 255, 150, 255, 226, 255, 150, 255, 151, 89, 0, 255, 191, 146, 56, 255, 191, 146, 56, 255]",
		packedIce: "0g0g60yl1czj10t9ddr145ldkv18lq48v1ge6ubj1jqd7gf0012233221023330012243112213310012243012311100002231003310110011222100210022122221222110022223321122111222223311001113321223321001123220113431001222221002531000322321002420010123321002321001123321001121001222331101111221122231111112232122341111222233122353",
		calcite: "0g0g61d0wq9r1jpkt1b1o60ven1tqkxkv1uuumtb1y711j34323123211454233322210221553322332210012354333233210011234444322211012334443421212012322243331005532221233232012343321123222112332255431245223442233453112425543123334212333432223332323433342213332245553223211123213543221001225541344221001225433234321211124",
		transparent: "[93, 93, 82, 0, 106, 110, 111, 0, 106, 110, 111, 0, 106, 110, 111, 0, 106, 110, 111, 0, 93, 93, 82, 0, 77, 80, 70, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 93, 93, 82, 0, 93, 93, 82, 0, 133, 131, 123, 0, 106, 110, 111, 0, 106, 110, 111, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 77, 80, 70, 0, 77, 80, 70, 0, 106, 110, 111, 0, 106, 110, 111, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 106, 110, 111, 0, 106, 110, 111, 0, 133, 131, 123, 0, 93, 93, 82, 0, 77, 80, 70, 0, 77, 80, 70, 0, 93, 93, 82, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 133, 131, 123, 0, 160, 162, 151, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 93, 93, 82, 0, 77, 80, 70, 0, 106, 110, 111, 0, 106, 110, 111, 0, 106, 110, 111, 0, 93, 93, 82, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 77, 80, 70, 0, 93, 93, 82, 0, 106, 110, 111, 0, 77, 80, 70, 0, 106, 110, 111, 0, 106, 110, 111, 0, 133, 131, 123, 0, 77, 80, 70, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 77, 80, 70, 0, 133, 131, 123, 0, 106, 110, 111, 0, 106, 110, 111, 0, 106, 110, 111, 0, 93, 93, 82, 0, 77, 80, 70, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 77, 80, 70, 0, 133, 131, 123, 0, 133, 131, 123, 0, 93, 93, 82, 0, 77, 80, 70, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 133, 131, 123, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 93, 93, 82, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 77, 80, 70, 0, 106, 110, 111, 0, 106, 110, 111, 0, 106, 110, 111, 0, 93, 93, 82, 0, 133, 131, 123, 0, 133, 131, 123, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 93, 93, 82, 0, 93, 93, 82, 0, 77, 80, 70, 0, 93, 93, 82, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 133, 131, 123, 0, 160, 162, 151, 0, 160, 162, 151, 0, 133, 131, 123, 0, 93, 93, 82, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 133, 131, 123, 0, 160, 162, 151, 0, 160, 162, 151, 0, 106, 110, 111, 0, 77, 80, 70, 0, 77, 80, 70, 0, 93, 93, 82, 0, 77, 80, 70, 0, 93, 93, 82, 0, 160, 162, 151, 0, 133, 131, 123, 0, 106, 110, 111, 0, 106, 110, 111, 0, 133, 131, 123, 0, 93, 93, 82, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 77, 80, 70, 0, 77, 80, 70, 0, 77, 80, 70, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 77, 80, 70, 0, 77, 80, 70, 0, 93, 93, 82, 0, 106, 110, 111, 0, 106, 110, 111, 0, 106, 110, 111, 0, 106, 110, 111, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 93, 93, 82, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 77, 80, 70, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 160, 162, 151, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0, 93, 93, 82, 0, 77, 80, 70, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 160, 162, 151, 0, 160, 162, 151, 0, 133, 131, 123, 0, 93, 93, 82, 0, 77, 80, 70, 0, 93, 93, 82, 0, 106, 110, 111, 0, 106, 110, 111, 0, 93, 93, 82, 0, 93, 93, 82, 0, 77, 80, 70, 0, 93, 93, 82, 0, 93, 93, 82, 0, 106, 110, 111, 0, 133, 131, 123, 0, 133, 131, 123, 0, 93, 93, 82, 0, 77, 80, 70, 0, 77, 80, 70, 0, 77, 80, 70, 0, 77, 80, 70, 0, 106, 110, 111, 0, 93, 93, 82, 0, 133, 131, 123, 0, 133, 131, 123, 0, 106, 110, 111, 0]",
		tuff: "[93, 93, 82, 255, 106, 110, 111, 255, 106, 110, 111, 255, 106, 110, 111, 255, 106, 110, 111, 255, 93, 93, 82, 255, 77, 80, 70, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 93, 93, 82, 255, 93, 93, 82, 255, 133, 131, 123, 255, 106, 110, 111, 255, 106, 110, 111, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 77, 80, 70, 255, 77, 80, 70, 255, 106, 110, 111, 255, 106, 110, 111, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 106, 110, 111, 255, 106, 110, 111, 255, 133, 131, 123, 255, 93, 93, 82, 255, 77, 80, 70, 255, 77, 80, 70, 255, 93, 93, 82, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 133, 131, 123, 255, 160, 162, 151, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 93, 93, 82, 255, 77, 80, 70, 255, 106, 110, 111, 255, 106, 110, 111, 255, 106, 110, 111, 255, 93, 93, 82, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 77, 80, 70, 255, 93, 93, 82, 255, 106, 110, 111, 255, 77, 80, 70, 255, 106, 110, 111, 255, 106, 110, 111, 255, 133, 131, 123, 255, 77, 80, 70, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 77, 80, 70, 255, 133, 131, 123, 255, 106, 110, 111, 255, 106, 110, 111, 255, 106, 110, 111, 255, 93, 93, 82, 255, 77, 80, 70, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 77, 80, 70, 255, 133, 131, 123, 255, 133, 131, 123, 255, 93, 93, 82, 255, 77, 80, 70, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 133, 131, 123, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 93, 93, 82, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 77, 80, 70, 255, 106, 110, 111, 255, 106, 110, 111, 255, 106, 110, 111, 255, 93, 93, 82, 255, 133, 131, 123, 255, 133, 131, 123, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 93, 93, 82, 255, 93, 93, 82, 255, 77, 80, 70, 255, 93, 93, 82, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 133, 131, 123, 255, 160, 162, 151, 255, 160, 162, 151, 255, 133, 131, 123, 255, 93, 93, 82, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 133, 131, 123, 255, 160, 162, 151, 255, 160, 162, 151, 255, 106, 110, 111, 255, 77, 80, 70, 255, 77, 80, 70, 255, 93, 93, 82, 255, 77, 80, 70, 255, 93, 93, 82, 255, 160, 162, 151, 255, 133, 131, 123, 255, 106, 110, 111, 255, 106, 110, 111, 255, 133, 131, 123, 255, 93, 93, 82, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 77, 80, 70, 255, 77, 80, 70, 255, 77, 80, 70, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 77, 80, 70, 255, 77, 80, 70, 255, 93, 93, 82, 255, 106, 110, 111, 255, 106, 110, 111, 255, 106, 110, 111, 255, 106, 110, 111, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 93, 93, 82, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 77, 80, 70, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 160, 162, 151, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255, 93, 93, 82, 255, 77, 80, 70, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 160, 162, 151, 255, 160, 162, 151, 255, 133, 131, 123, 255, 93, 93, 82, 255, 77, 80, 70, 255, 93, 93, 82, 255, 106, 110, 111, 255, 106, 110, 111, 255, 93, 93, 82, 255, 93, 93, 82, 255, 77, 80, 70, 255, 93, 93, 82, 255, 93, 93, 82, 255, 106, 110, 111, 255, 133, 131, 123, 255, 133, 131, 123, 255, 93, 93, 82, 255, 77, 80, 70, 255, 77, 80, 70, 255, 77, 80, 70, 255, 77, 80, 70, 255, 106, 110, 111, 255, 93, 93, 82, 255, 133, 131, 123, 255, 133, 131, 123, 255, 106, 110, 111, 255]",
		smoothBasalt: "[79, 75, 79, 255, 58, 59, 72, 255, 92, 92, 92, 255, 92, 92, 92, 255, 58, 59, 72, 255, 58, 59, 72, 255, 79, 75, 79, 255, 79, 75, 79, 255, 79, 75, 79, 255, 79, 75, 79, 255, 79, 75, 79, 255, 79, 75, 79, 255, 58, 59, 72, 255, 58, 59, 72, 255, 92, 92, 92, 255, 92, 92, 92, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 79, 75, 79, 255, 79, 75, 79, 255, 58, 59, 72, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 58, 59, 72, 255, 50, 51, 61, 255, 50, 51, 61, 255, 58, 59, 72, 255, 79, 75, 79, 255, 79, 75, 79, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 92, 92, 92, 255, 58, 59, 72, 255, 50, 51, 61, 255, 79, 75, 79, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 105, 105, 105, 255, 27, 38, 50, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 79, 75, 79, 255, 58, 59, 72, 255, 79, 75, 79, 255, 58, 59, 72, 255, 58, 59, 72, 255, 92, 92, 92, 255, 92, 92, 92, 255, 105, 105, 105, 255, 105, 105, 105, 255, 50, 51, 61, 255, 27, 38, 50, 255, 58, 59, 72, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 50, 51, 61, 255, 27, 38, 50, 255, 50, 51, 61, 255, 58, 59, 72, 255, 79, 75, 79, 255, 79, 75, 79, 255, 79, 75, 79, 255, 50, 51, 61, 255, 50, 51, 61, 255, 79, 75, 79, 255, 50, 51, 61, 255, 58, 59, 72, 255, 79, 75, 79, 255, 79, 75, 79, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 27, 38, 50, 255, 58, 59, 72, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 58, 59, 72, 255, 27, 38, 50, 255, 58, 59, 72, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 58, 59, 72, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 50, 51, 61, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 50, 51, 61, 255, 58, 59, 72, 255, 79, 75, 79, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 79, 75, 79, 255, 58, 59, 72, 255, 79, 75, 79, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 27, 38, 50, 255, 79, 75, 79, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 50, 51, 61, 255, 50, 51, 61, 255, 50, 51, 61, 255, 58, 59, 72, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 58, 59, 72, 255, 58, 59, 72, 255, 92, 92, 92, 255, 79, 75, 79, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 58, 59, 72, 255, 50, 51, 61, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 79, 75, 79, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 105, 105, 105, 255, 92, 92, 92, 255, 79, 75, 79, 255, 50, 51, 61, 255, 50, 51, 61, 255, 58, 59, 72, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 92, 92, 92, 255, 105, 105, 105, 255, 105, 105, 105, 255, 58, 59, 72, 255, 50, 51, 61, 255, 50, 51, 61, 255, 58, 59, 72, 255, 79, 75, 79, 255, 58, 59, 72, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 79, 75, 79, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 27, 38, 50, 255, 27, 38, 50, 255, 50, 51, 61, 255, 58, 59, 72, 255, 92, 92, 92, 255, 79, 75, 79, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 79, 75, 79, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 27, 38, 50, 255, 27, 38, 50, 255, 50, 51, 61, 255, 58, 59, 72, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 79, 75, 79, 255, 92, 92, 92, 255, 92, 92, 92, 255, 92, 92, 92, 255, 58, 59, 72, 255, 79, 75, 79, 255, 58, 59, 72, 255, 50, 51, 61, 255, 50, 51, 61, 255, 79, 75, 79, 255, 92, 92, 92, 255, 79, 75, 79, 255, 79, 75, 79, 255, 92, 92, 92, 255, 79, 75, 79, 255, 58, 59, 72, 255, 92, 92, 92, 255, 92, 92, 92, 255]",
		cryingObsidian: "0g0g80000073013yfb304gainz0a0p1q70b3kf7j0fksanz0qn3ke70ziwirj1000412105311353101204405216352100553013322723014532236212701640034244667701116122760211165311406712355410306004102522764006053000534723346032224260276321621264244671141100260302142612155322441552042235612421332161022264403103162131162040012106012324111411",
		netherGoldOre: "0g0gc0hs27zz0m7vq4f0m81d6n0ncb0u70rsft330v4m7sv10p0npb1cwijun1ihp1j31wzx4ov1y6dkvz1y70nb3131242554404454334432024521044215454771243914245654ab93545a814245659a45664552543154385665548445414520545542ba56553102454985894664245422744554145245ab40245455112354594025655270247254218254179321454254ba21545413545565a9834565124556423274545442245524530245544",
		crimsonNyliumTop: "0g0gb0rs4iyn0rsa60v0v4gkqn0v4m7sv0xana4f0yelnnj10p0npb152yh331br00e71g7lptr1hbk3cv665022781508847275526677572777880356a2357825787420153555726274776351871536a625293557027508476266575376488726530535326787982a205776357474843262155557532671535783753a62635150735530762355175784375788774726357820557536726663777553017357a62743152625305526787057",
		crimsonNyliumSide: "0g0gl0gnskcf0l3m2gv0l3xclb0m7kfzz0nbzqpr0nc5drz0of09vj0rs4iyn0rsa60v0sutrzz0v4gkqn0v4m7sv0w8ey9r0w8klbz0xana4f0yelnnj10p0npb152yh331br00e71g7lptr1hbk3cvhihiheijhhhihijifhijehijjihjjih99fehfhhe99ekef96f6f9f9ff69hf696636966696639f66333336346653666344348f0d474563547ac49627cb99b76fb7727a7229f6aa797b67aga7067a7ac1964c7aa706bgac2002726b72302a71024237b96b73223d7a734c7aaga32247aga327aag724207a7a77227aa27c4027aa77",
		warpedNyliumTop: "0g0gf01a28e702e0lxb02eybjz02eyccf03fmgov03gq1a703gq22n03gvocf03iwp330gqauwv0hvcjjz0hvi5tr0izax330izgjcv0ng7r3zee49aa519491146c744aee6646c655119d4e3cc460c45154a994c4447cea7465ec490794ce3ea4c2c4479c749046eaee474c6e4115ce4b94c4cae61580c3c9476ec4746414caea9444464cae694c460c74c2eaea49497c44c96eac44974714c747106647aea450c94474ce7ceeec65744c997c462ea64c94aea4c944ce616946",
		warpedNyliumSide: "0g0gn02e0lxb02eybjz03fmgov03fmhhb03gq1a703gq22n03gvocf03iwp330b5qosf0c9p2bj0gnskcf0gqauwv0gqavpb0l3m2gv0l3rpj30l3xclb0m7kfzz0nbzqpr0rs4iyn0v4gkqn0w8ey9r0w8klbz10p0npb40406b0744404070b507b607704770522bb6b66b22b1bb29c9b2b2bc936b9399g93999398g3c99ggggg8gh98hg998ghhghicalhihh8ghhijkh38fikk33ki8ckiifikife3c8kji3ik8ijmjia9ikijkg38hkijjia8kmjkfaafie8kifgafjidafhfgik38kigffglijighkikjmjgffhijmjgfijjmifhfaijijiiffijjfikhafijjii",
		cactusTop: "0g0g900000000fmt0cf0hv6n0f0hv6nsv0mbxwcf0okh5a70rwt69r17gnmdb1f9a6m70000000000000000013331337313311003444344444444100345735565355430034564586546543001345665658444100375655666555430034664466666643003466846656654300345666668547430014456656654441003456455664554300345547555357430014443144424441001133133331331100000000000000000",
		cactusSide: "0g0g900000000fmt0cf0hv6nsv0k3k9of0mbxwcf0okh5a70rwt69r17gnmdb1f9a6m70156534665156410024548456516658087454144653665100155514565756420015662466414541001665146641455808166414864146510016651465415651001564245441664200146524644166420024657565416547802455156541644108745515665265410014641566426541001465145658554100156614455146410",
		cactusBottom: "0g0g7000000002aeqrj03fm41r131ary718ljny71jppypr1lxsdmn0000000000000000012222111222211002555566555566100265334444335520026455666655352001535566665536200253555435554610025456466365461001646646646645100164665345664520026456666555452002535565555545200255434444336520015555666666661001122212222221100000000000000000",
		deepslate: "[121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 47, 47, 55, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255]",
		cobbledDeepslate: "[74, 74, 79, 255, 74, 74, 79, 255, 53, 53, 57, 255, 105, 105, 105, 255, 63, 63, 69, 255, 74, 74, 79, 255, 63, 63, 69, 255, 105, 105, 105, 255, 122, 122, 122, 255, 122, 122, 122, 255, 74, 74, 79, 255, 90, 90, 90, 255, 74, 74, 79, 255, 105, 105, 105, 255, 90, 90, 90, 255, 90, 90, 90, 255, 74, 74, 79, 255, 63, 63, 69, 255, 53, 53, 57, 255, 90, 90, 90, 255, 74, 74, 79, 255, 63, 63, 69, 255, 53, 53, 57, 255, 122, 122, 122, 255, 105, 105, 105, 255, 74, 74, 79, 255, 63, 63, 69, 255, 74, 74, 79, 255, 63, 63, 69, 255, 105, 105, 105, 255, 90, 90, 90, 255, 74, 74, 79, 255, 53, 53, 57, 255, 53, 53, 57, 255, 53, 53, 57, 255, 63, 63, 69, 255, 63, 63, 69, 255, 53, 53, 57, 255, 53, 53, 57, 255, 105, 105, 105, 255, 74, 74, 79, 255, 63, 63, 69, 255, 53, 53, 57, 255, 63, 63, 69, 255, 53, 53, 57, 255, 90, 90, 90, 255, 63, 63, 69, 255, 63, 63, 69, 255, 63, 63, 69, 255, 74, 74, 79, 255, 122, 122, 122, 255, 105, 105, 105, 255, 90, 90, 90, 255, 90, 90, 90, 255, 74, 74, 79, 255, 90, 90, 90, 255, 74, 74, 79, 255, 53, 53, 57, 255, 63, 63, 69, 255, 53, 53, 57, 255, 53, 53, 57, 255, 63, 63, 69, 255, 53, 53, 57, 255, 63, 63, 69, 255, 122, 122, 122, 255, 122, 122, 122, 255, 105, 105, 105, 255, 90, 90, 90, 255, 74, 74, 79, 255, 74, 74, 79, 255, 53, 53, 57, 255, 63, 63, 69, 255, 63, 63, 69, 255, 53, 53, 57, 255, 53, 53, 57, 255, 53, 53, 57, 255, 90, 90, 90, 255, 122, 122, 122, 255, 122, 122, 122, 255, 74, 74, 79, 255, 105, 105, 105, 255, 90, 90, 90, 255, 105, 105, 105, 255, 74, 74, 79, 255, 74, 74, 79, 255, 63, 63, 69, 255, 53, 53, 57, 255, 74, 74, 79, 255, 90, 90, 90, 255, 122, 122, 122, 255, 105, 105, 105, 255, 74, 74, 79, 255, 122, 122, 122, 255, 122, 122, 122, 255, 90, 90, 90, 255, 63, 63, 69, 255, 105, 105, 105, 255, 90, 90, 90, 255, 74, 74, 79, 255, 63, 63, 69, 255, 63, 63, 69, 255, 53, 53, 57, 255, 53, 53, 57, 255, 105, 105, 105, 255, 122, 122, 122, 255, 74, 74, 79, 255, 90, 90, 90, 255, 63, 63, 69, 255, 105, 105, 105, 255, 74, 74, 79, 255, 74, 74, 79, 255, 63, 63, 69, 255, 74, 74, 79, 255, 63, 63, 69, 255, 53, 53, 57, 255, 53, 53, 57, 255, 63, 63, 69, 255, 53, 53, 57, 255, 63, 63, 69, 255, 105, 105, 105, 255, 90, 90, 90, 255, 74, 74, 79, 255, 74, 74, 79, 255, 53, 53, 57, 255, 90, 90, 90, 255, 74, 74, 79, 255, 74, 74, 79, 255, 53, 53, 57, 255, 122, 122, 122, 255, 122, 122, 122, 255, 105, 105, 105, 255, 63, 63, 69, 255, 74, 74, 79, 255, 90, 90, 90, 255, 74, 74, 79, 255, 90, 90, 90, 255, 74, 74, 79, 255, 63, 63, 69, 255, 74, 74, 79, 255, 53, 53, 57, 255, 63, 63, 69, 255, 63, 63, 69, 255, 63, 63, 69, 255, 53, 53, 57, 255, 105, 105, 105, 255, 90, 90, 90, 255, 90, 90, 90, 255, 63, 63, 69, 255, 74, 74, 79, 255, 74, 74, 79, 255, 90, 90, 90, 255, 90, 90, 90, 255, 63, 63, 69, 255, 74, 74, 79, 255, 63, 63, 69, 255, 53, 53, 57, 255, 53, 53, 57, 255, 53, 53, 57, 255, 90, 90, 90, 255, 90, 90, 90, 255, 105, 105, 105, 255, 74, 74, 79, 255, 74, 74, 79, 255, 53, 53, 57, 255, 63, 63, 69, 255, 74, 74, 79, 255, 63, 63, 69, 255, 74, 74, 79, 255, 74, 74, 79, 255, 63, 63, 69, 255, 90, 90, 90, 255, 122, 122, 122, 255, 105, 105, 105, 255, 74, 74, 79, 255, 74, 74, 79, 255, 90, 90, 90, 255, 90, 90, 90, 255, 74, 74, 79, 255, 63, 63, 69, 255, 53, 53, 57, 255, 53, 53, 57, 255, 53, 53, 57, 255, 53, 53, 57, 255, 63, 63, 69, 255, 63, 63, 69, 255, 63, 63, 69, 255, 122, 122, 122, 255, 74, 74, 79, 255, 74, 74, 79, 255, 53, 53, 57, 255, 74, 74, 79, 255, 74, 74, 79, 255, 90, 90, 90, 255, 63, 63, 69, 255, 74, 74, 79, 255, 63, 63, 69, 255, 63, 63, 69, 255, 53, 53, 57, 255, 105, 105, 105, 255, 122, 122, 122, 255, 122, 122, 122, 255, 63, 63, 69, 255, 90, 90, 90, 255, 74, 74, 79, 255, 74, 74, 79, 255, 53, 53, 57, 255, 74, 74, 79, 255, 63, 63, 69, 255, 63, 63, 69, 255, 53, 53, 57, 255, 63, 63, 69, 255, 74, 74, 79, 255, 90, 90, 90, 255, 63, 63, 69, 255, 122, 122, 122, 255, 90, 90, 90, 255, 105, 105, 105, 255, 74, 74, 79, 255, 74, 74, 79, 255, 53, 53, 57, 255, 53, 53, 57, 255, 63, 63, 69, 255, 63, 63, 69, 255, 53, 53, 57, 255, 63, 63, 69, 255, 53, 53, 57, 255, 74, 74, 79, 255, 122, 122, 122, 255, 122, 122, 122, 255, 63, 63, 69, 255, 105, 105, 105, 255, 90, 90, 90, 255, 74, 74, 79, 255, 90, 90, 90, 255, 74, 74, 79, 255, 53, 53, 57, 255, 63, 63, 69, 255, 90, 90, 90, 255, 74, 74, 79, 255, 74, 74, 79, 255, 90, 90, 90, 255, 53, 53, 57, 255, 63, 63, 69, 255, 122, 122, 122, 255, 90, 90, 90, 255, 53, 53, 57, 255, 53, 53, 57, 255, 74, 74, 79, 255, 63, 63, 69, 255, 63, 63, 69, 255, 53, 53, 57, 255, 90, 90, 90, 255, 90, 90, 90, 255, 122, 122, 122, 255, 122, 122, 122, 255, 105, 105, 105, 255]",
		deepslateBricks: "[88, 88, 88, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 88, 88, 88, 255, 88, 88, 88, 255, 65, 65, 65, 255, 36, 36, 36, 255, 110, 110, 110, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 65, 65, 65, 255, 56, 55, 55, 255, 36, 36, 36, 255, 110, 110, 110, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 36, 36, 36, 255, 110, 110, 110, 255, 65, 65, 65, 255, 75, 76, 79, 255, 88, 88, 88, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 75, 76, 79, 255, 88, 88, 88, 255, 65, 65, 65, 255, 75, 76, 79, 255, 65, 65, 65, 255, 36, 36, 36, 255, 110, 110, 110, 255, 56, 55, 55, 255, 88, 88, 88, 255, 65, 65, 65, 255, 56, 55, 55, 255, 65, 65, 65, 255, 75, 76, 79, 255, 65, 65, 65, 255, 75, 76, 79, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 75, 76, 79, 255, 56, 55, 55, 255, 65, 65, 65, 255, 36, 36, 36, 255, 88, 88, 88, 255, 75, 76, 79, 255, 56, 55, 55, 255, 56, 55, 55, 255, 65, 65, 65, 255, 56, 55, 55, 255, 65, 65, 65, 255, 65, 65, 65, 255, 75, 76, 79, 255, 65, 65, 65, 255, 56, 55, 55, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 45, 45, 45, 255, 36, 36, 36, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 56, 55, 55, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 110, 110, 110, 255, 110, 110, 110, 255, 88, 88, 88, 255, 88, 88, 88, 255, 110, 110, 110, 255, 110, 110, 110, 255, 88, 88, 88, 255, 36, 36, 36, 255, 88, 88, 88, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 110, 110, 110, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 65, 65, 65, 255, 56, 55, 55, 255, 36, 36, 36, 255, 110, 110, 110, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 65, 65, 65, 255, 36, 36, 36, 255, 110, 110, 110, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 65, 65, 65, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 75, 76, 79, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 56, 55, 55, 255, 36, 36, 36, 255, 110, 110, 110, 255, 88, 88, 88, 255, 75, 76, 79, 255, 88, 88, 88, 255, 75, 76, 79, 255, 65, 65, 65, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 56, 55, 55, 255, 65, 65, 65, 255, 65, 65, 65, 255, 75, 76, 79, 255, 88, 88, 88, 255, 56, 55, 55, 255, 36, 36, 36, 255, 88, 88, 88, 255, 75, 76, 79, 255, 65, 65, 65, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 36, 36, 36, 255, 88, 88, 88, 255, 65, 65, 65, 255, 56, 55, 55, 255, 88, 88, 88, 255, 75, 76, 79, 255, 65, 65, 65, 255, 75, 76, 79, 255, 65, 65, 65, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 36, 36, 36, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255]",
		deepslateTiles: "[45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 36, 36, 36, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 65, 65, 65, 255, 75, 76, 79, 255, 65, 65, 65, 255, 45, 45, 45, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 36, 36, 36, 255, 88, 88, 88, 255, 75, 76, 79, 255, 75, 76, 79, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 56, 55, 55, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 88, 88, 88, 255, 75, 76, 79, 255, 75, 76, 79, 255, 65, 65, 65, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 88, 88, 88, 255, 75, 76, 79, 255, 75, 76, 79, 255, 75, 76, 79, 255, 65, 65, 65, 255, 36, 36, 36, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 75, 76, 79, 255, 75, 76, 79, 255, 65, 65, 65, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 56, 55, 55, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 56, 55, 55, 255, 45, 45, 45, 255, 75, 76, 79, 255, 65, 65, 65, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 36, 36, 36, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 88, 88, 88, 255, 88, 88, 88, 255, 88, 88, 88, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 36, 36, 36, 255, 56, 55, 55, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 75, 76, 79, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 36, 36, 36, 255, 56, 55, 55, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 45, 45, 45, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 36, 36, 36, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 65, 65, 65, 255, 65, 65, 65, 255, 65, 65, 65, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 56, 55, 55, 255, 56, 55, 55, 255, 45, 45, 45, 255, 45, 45, 45, 255, 36, 36, 36, 255, 65, 65, 65, 255, 56, 55, 55, 255, 56, 55, 55, 255]",
		deepslateDiamondOre: "[121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 49, 64, 64, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 30, 208, 214, 255, 81, 81, 81, 255, 81, 81, 81, 255, 49, 64, 64, 255, 49, 64, 64, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 119, 231, 209, 255, 20, 143, 146, 255, 100, 138, 140, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 138, 140, 255, 61, 61, 67, 255, 61, 61, 67, 255, 119, 231, 209, 255, 20, 143, 146, 255, 100, 138, 140, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 138, 140, 255, 100, 138, 140, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 138, 140, 255, 100, 138, 140, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 213, 255, 246, 255, 119, 231, 209, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 213, 255, 246, 255, 119, 231, 209, 255, 97, 121, 119, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 138, 140, 255, 213, 255, 246, 255, 119, 231, 209, 255, 30, 208, 214, 255, 30, 208, 214, 255, 20, 143, 146, 255, 97, 121, 119, 255, 81, 81, 81, 255, 30, 208, 214, 255, 20, 143, 146, 255, 100, 138, 140, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 49, 64, 64, 255, 100, 138, 140, 255, 100, 138, 140, 255, 97, 121, 119, 255, 100, 138, 140, 255, 97, 121, 119, 255, 49, 64, 64, 255, 49, 64, 64, 255, 100, 138, 140, 255, 97, 121, 119, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 119, 231, 209, 255, 30, 208, 214, 255, 97, 121, 119, 255, 61, 61, 67, 255, 61, 61, 67, 255, 49, 64, 64, 255, 49, 64, 64, 255, 213, 255, 246, 255, 119, 231, 209, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 97, 121, 119, 255, 97, 121, 119, 255, 47, 47, 55, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 119, 231, 209, 255, 30, 208, 214, 255, 20, 143, 146, 255, 20, 143, 146, 255, 97, 121, 119, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 30, 208, 214, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 97, 121, 119, 255, 100, 138, 140, 255, 100, 138, 140, 255, 49, 64, 64, 255, 49, 64, 64, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 49, 64, 64, 255, 49, 64, 64, 255, 119, 231, 209, 255, 20, 143, 146, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 49, 64, 64, 255, 49, 64, 64, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 119, 231, 209, 255, 213, 255, 246, 255, 119, 231, 209, 255, 30, 208, 214, 255, 30, 208, 214, 255, 20, 143, 146, 255, 97, 121, 119, 255, 100, 100, 100, 255, 61, 61, 67, 255, 61, 61, 67, 255, 97, 121, 119, 255, 119, 231, 209, 255, 20, 143, 146, 255, 100, 138, 140, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 20, 143, 146, 255, 30, 208, 214, 255, 100, 138, 140, 255, 100, 138, 140, 255, 97, 121, 119, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 138, 140, 255, 100, 138, 140, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 97, 121, 119, 255, 100, 138, 140, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255]",
		deepslateEmeraldOre: "[121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 47, 47, 55, 255, 217, 255, 235, 255, 23, 221, 98, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 47, 47, 55, 255, 47, 47, 55, 255, 217, 255, 235, 255, 23, 221, 98, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 23, 221, 98, 255, 0, 123, 24, 255, 121, 121, 121, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 23, 221, 98, 255, 0, 123, 24, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 47, 47, 55, 255, 55, 91, 62, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 65, 243, 132, 255, 65, 243, 132, 255, 28, 152, 41, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 55, 91, 62, 255, 65, 243, 132, 255, 217, 255, 235, 255, 0, 123, 24, 255, 28, 152, 41, 255, 55, 91, 62, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 61, 61, 67, 255, 47, 47, 55, 255, 55, 91, 62, 255, 65, 243, 132, 255, 0, 123, 24, 255, 28, 152, 41, 255, 23, 197, 68, 255, 55, 91, 62, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 217, 255, 235, 255, 23, 221, 98, 255, 81, 81, 81, 255, 61, 61, 67, 255, 217, 255, 235, 255, 23, 221, 98, 255, 61, 61, 67, 255, 23, 197, 68, 255, 28, 152, 41, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 23, 221, 98, 255, 0, 123, 24, 255, 121, 121, 121, 255, 61, 61, 67, 255, 23, 221, 98, 255, 0, 123, 24, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 65, 243, 132, 255, 65, 243, 132, 255, 55, 91, 62, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 0, 123, 24, 255, 65, 243, 132, 255, 217, 255, 235, 255, 0, 123, 24, 255, 28, 152, 41, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 100, 100, 100, 255, 100, 100, 100, 255, 0, 123, 24, 255, 23, 197, 68, 255, 0, 123, 24, 255, 28, 152, 41, 255, 23, 197, 68, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 217, 255, 235, 255, 23, 221, 98, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 55, 91, 62, 255, 28, 152, 41, 255, 121, 121, 121, 255, 121, 121, 121, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 23, 221, 98, 255, 0, 123, 24, 255, 121, 121, 121, 255, 47, 47, 55, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 47, 47, 55, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255]",
		deepslateLapisOre: "[121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 24, 85, 189, 255, 32, 89, 139, 255, 24, 85, 189, 255, 22, 68, 141, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 16, 52, 189, 255, 22, 68, 141, 255, 121, 121, 121, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 16, 68, 172, 255, 121, 121, 121, 255, 22, 68, 141, 255, 68, 111, 220, 255, 121, 121, 121, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 24, 85, 189, 255, 16, 68, 172, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 32, 89, 139, 255, 16, 52, 189, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 61, 61, 67, 255, 16, 52, 189, 255, 68, 111, 220, 255, 105, 149, 244, 255, 68, 111, 220, 255, 22, 68, 141, 255, 81, 81, 81, 255, 81, 81, 81, 255, 68, 111, 220, 255, 105, 149, 244, 255, 121, 121, 121, 255, 100, 100, 100, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 16, 68, 172, 255, 68, 111, 220, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 68, 111, 220, 255, 105, 149, 244, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 16, 68, 172, 255, 100, 100, 100, 255, 24, 85, 189, 255, 22, 68, 141, 255, 22, 68, 141, 255, 100, 100, 100, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 16, 68, 172, 255, 24, 85, 189, 255, 68, 111, 220, 255, 68, 111, 220, 255, 22, 68, 141, 255, 100, 100, 100, 255, 16, 68, 172, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 16, 68, 172, 255, 81, 81, 81, 255, 81, 81, 81, 255, 121, 121, 121, 255, 16, 52, 189, 255, 68, 111, 220, 255, 105, 149, 244, 255, 121, 121, 121, 255, 81, 81, 81, 255, 68, 111, 220, 255, 32, 89, 139, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 22, 68, 141, 255, 16, 52, 156, 255, 16, 52, 156, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 105, 149, 244, 255, 68, 111, 220, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 16, 52, 156, 255, 100, 100, 100, 255, 100, 100, 100, 255, 22, 68, 141, 255, 68, 111, 220, 255, 68, 111, 220, 255, 81, 81, 81, 255, 100, 100, 100, 255, 16, 52, 189, 255, 68, 111, 220, 255, 121, 121, 121, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 68, 111, 220, 255, 105, 149, 244, 255, 24, 85, 189, 255, 100, 100, 100, 255, 68, 111, 220, 255, 105, 149, 244, 255, 16, 52, 189, 255, 121, 121, 121, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 24, 85, 189, 255, 68, 111, 220, 255, 22, 68, 141, 255, 121, 121, 121, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255]",
		deepslateRedstoneOre: "[121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 77, 55, 55, 255, 77, 55, 55, 255, 59, 44, 44, 255, 47, 47, 55, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 77, 55, 55, 255, 77, 55, 55, 255, 150, 6, 6, 255, 150, 6, 6, 255, 150, 6, 6, 255, 59, 44, 44, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 202, 7, 7, 255, 150, 6, 6, 255, 202, 7, 7, 255, 255, 0, 0, 255, 253, 94, 94, 255, 198, 4, 4, 255, 151, 3, 3, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 100, 100, 100, 255, 198, 4, 4, 255, 255, 0, 0, 255, 255, 137, 137, 255, 255, 0, 0, 255, 132, 89, 89, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 202, 7, 7, 255, 247, 28, 28, 255, 132, 89, 89, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 132, 89, 89, 255, 132, 89, 89, 255, 132, 89, 89, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 132, 89, 89, 255, 132, 89, 89, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 77, 55, 55, 255, 77, 55, 55, 255, 59, 44, 44, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 77, 55, 55, 255, 77, 55, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 77, 55, 55, 255, 247, 28, 28, 255, 253, 94, 94, 255, 150, 6, 6, 255, 59, 44, 44, 255, 61, 61, 67, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 150, 6, 6, 255, 202, 7, 7, 255, 150, 6, 6, 255, 202, 7, 7, 255, 253, 94, 94, 255, 247, 28, 28, 255, 81, 81, 81, 255, 61, 61, 67, 255, 150, 6, 6, 255, 247, 28, 28, 255, 132, 89, 89, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 253, 94, 94, 255, 255, 137, 137, 255, 247, 28, 28, 255, 132, 89, 89, 255, 61, 61, 67, 255, 100, 100, 100, 255, 132, 89, 89, 255, 132, 89, 89, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 132, 89, 89, 255, 132, 89, 89, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 59, 44, 44, 255, 77, 55, 55, 255, 77, 55, 55, 255, 59, 44, 44, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 59, 44, 44, 255, 150, 6, 6, 255, 247, 28, 28, 255, 202, 7, 7, 255, 247, 28, 28, 255, 150, 6, 6, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 202, 7, 7, 255, 247, 28, 28, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 132, 89, 89, 255, 253, 94, 94, 255, 255, 137, 137, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 132, 89, 89, 255, 132, 89, 89, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255]",
		deepslateGoldOre: "[121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 156, 100, 32, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 121, 121, 121, 255, 81, 81, 81, 255, 47, 47, 55, 255, 156, 100, 32, 255, 47, 47, 55, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 47, 47, 55, 255, 156, 100, 32, 255, 156, 100, 32, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 156, 100, 32, 255, 235, 157, 14, 255, 156, 100, 32, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 156, 100, 32, 255, 235, 157, 14, 255, 156, 100, 32, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 156, 100, 32, 255, 235, 157, 14, 255, 252, 238, 75, 255, 156, 100, 32, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 235, 157, 14, 255, 235, 157, 14, 255, 121, 121, 121, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 100, 100, 100, 255, 235, 157, 14, 255, 252, 238, 75, 255, 252, 238, 75, 255, 255, 255, 181, 255, 235, 157, 14, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 121, 121, 121, 255, 235, 157, 14, 255, 252, 238, 75, 255, 235, 157, 14, 255, 156, 100, 32, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 235, 157, 14, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 235, 157, 14, 255, 156, 100, 32, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 156, 100, 32, 255, 235, 157, 14, 255, 81, 81, 81, 255, 61, 61, 67, 255, 156, 100, 32, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 61, 61, 67, 255, 61, 61, 67, 255, 235, 157, 14, 255, 252, 238, 75, 255, 121, 121, 121, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 156, 100, 32, 255, 156, 100, 32, 255, 235, 157, 14, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 61, 61, 67, 255, 81, 81, 81, 255, 156, 100, 32, 255, 235, 157, 14, 255, 235, 157, 14, 255, 255, 255, 181, 255, 252, 238, 75, 255, 156, 100, 32, 255, 100, 100, 100, 255, 100, 100, 100, 255, 47, 47, 55, 255, 156, 100, 32, 255, 156, 100, 32, 255, 235, 157, 14, 255, 121, 121, 121, 255, 100, 100, 100, 255, 156, 100, 32, 255, 100, 100, 100, 255, 121, 121, 121, 255, 235, 157, 14, 255, 252, 238, 75, 255, 252, 238, 75, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 61, 61, 67, 255, 156, 100, 32, 255, 235, 157, 14, 255, 252, 238, 75, 255, 255, 255, 181, 255, 252, 238, 75, 255, 100, 100, 100, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 156, 100, 32, 255, 235, 157, 14, 255, 121, 121, 121, 255, 100, 100, 100, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 235, 157, 14, 255, 252, 238, 75, 255, 121, 121, 121, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 235, 157, 14, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255]",
		deepslateCopperOre: "[121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 47, 47, 55, 255, 58, 118, 99, 255, 58, 118, 99, 255, 121, 121, 121, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 224, 115, 77, 255, 193, 103, 70, 255, 121, 121, 121, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 81, 81, 81, 255, 58, 118, 99, 255, 58, 118, 99, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 58, 118, 99, 255, 129, 128, 88, 255, 224, 115, 77, 255, 193, 103, 70, 255, 129, 128, 88, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 129, 128, 88, 255, 193, 103, 70, 255, 224, 115, 77, 255, 243, 130, 104, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 129, 128, 88, 255, 129, 128, 88, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 58, 104, 90, 255, 89, 149, 129, 255, 79, 186, 152, 255, 89, 149, 129, 255, 193, 103, 70, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 58, 118, 99, 255, 129, 128, 88, 255, 61, 61, 67, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 58, 104, 90, 255, 89, 149, 129, 255, 129, 128, 88, 255, 224, 115, 77, 255, 193, 103, 70, 255, 121, 121, 121, 255, 61, 61, 67, 255, 89, 149, 129, 255, 79, 186, 152, 255, 79, 186, 152, 255, 89, 149, 129, 255, 129, 128, 88, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 58, 118, 99, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 61, 61, 67, 255, 100, 100, 100, 255, 81, 81, 81, 255, 58, 118, 99, 255, 89, 149, 129, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 193, 103, 70, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 58, 118, 99, 255, 129, 128, 88, 255, 224, 115, 77, 255, 243, 130, 104, 255, 193, 103, 70, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 61, 61, 67, 255, 61, 61, 67, 255, 58, 118, 99, 255, 129, 128, 88, 255, 47, 47, 55, 255, 81, 81, 81, 255, 58, 118, 99, 255, 129, 128, 88, 255, 58, 118, 99, 255, 121, 121, 121, 255, 47, 47, 55, 255, 61, 61, 67, 255, 47, 47, 55, 255, 58, 118, 99, 255, 79, 186, 152, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255]",
		deepslateCoalOre: "[121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 47, 47, 55, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 10, 10, 10, 255, 42, 42, 42, 255, 42, 42, 42, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 31, 31, 31, 255, 42, 42, 42, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 31, 31, 31, 255, 42, 42, 42, 255, 42, 42, 42, 255, 73, 75, 63, 255, 31, 31, 31, 255, 10, 10, 10, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 10, 10, 10, 255, 42, 42, 42, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 31, 31, 31, 255, 10, 10, 10, 255, 10, 10, 10, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 47, 47, 55, 255, 47, 47, 55, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 42, 42, 42, 255, 31, 31, 31, 255, 42, 42, 42, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 10, 10, 10, 255, 42, 42, 42, 255, 31, 31, 31, 255, 47, 47, 55, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 42, 42, 42, 255, 73, 75, 63, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 10, 10, 10, 255, 42, 42, 42, 255, 73, 75, 63, 255, 42, 42, 42, 255, 31, 31, 31, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 100, 100, 100, 255, 31, 31, 31, 255, 42, 42, 42, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 47, 47, 55, 255, 10, 10, 10, 255, 42, 42, 42, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 47, 47, 55, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 10, 10, 10, 255, 73, 75, 63, 255, 42, 42, 42, 255, 10, 10, 10, 255, 10, 10, 10, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 73, 75, 63, 255, 42, 42, 42, 255, 10, 10, 10, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 42, 42, 42, 255, 10, 10, 10, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 42, 42, 42, 255, 10, 10, 10, 255, 121, 121, 121, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 61, 61, 67, 255, 42, 42, 42, 255, 31, 31, 31, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255]",
		deepslateIronOre: "[121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 119, 103, 79, 255, 136, 116, 85, 255, 136, 116, 85, 255, 119, 103, 79, 255, 81, 81, 81, 255, 61, 61, 67, 255, 100, 100, 100, 255, 100, 100, 100, 255, 136, 116, 85, 255, 175, 142, 119, 255, 136, 116, 85, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 121, 121, 121, 255, 136, 116, 85, 255, 175, 142, 119, 255, 121, 121, 121, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 136, 116, 85, 255, 175, 142, 119, 255, 216, 175, 147, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 47, 47, 55, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 136, 116, 85, 255, 136, 116, 85, 255, 175, 142, 119, 255, 175, 142, 119, 255, 136, 116, 85, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 100, 100, 100, 255, 136, 116, 85, 255, 175, 142, 119, 255, 216, 175, 147, 255, 216, 175, 147, 255, 226, 192, 170, 255, 216, 175, 147, 255, 175, 142, 119, 255, 121, 121, 121, 255, 81, 81, 81, 255, 136, 116, 85, 255, 175, 142, 119, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 175, 142, 119, 255, 216, 175, 147, 255, 216, 175, 147, 255, 121, 121, 121, 255, 121, 121, 121, 255, 61, 61, 67, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 81, 81, 81, 255, 81, 81, 81, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 136, 116, 85, 255, 175, 142, 119, 255, 61, 61, 67, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 119, 103, 79, 255, 136, 116, 85, 255, 175, 142, 119, 255, 119, 103, 79, 255, 61, 61, 67, 255, 61, 61, 67, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 119, 103, 79, 255, 175, 142, 119, 255, 175, 142, 119, 255, 216, 175, 147, 255, 216, 175, 147, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 175, 142, 119, 255, 216, 175, 147, 255, 121, 121, 121, 255, 47, 47, 55, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 81, 81, 81, 255, 100, 100, 100, 255, 121, 121, 121, 255, 216, 175, 147, 255, 226, 192, 170, 255, 121, 121, 121, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 81, 81, 81, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 81, 81, 81, 255, 61, 61, 67, 255, 81, 81, 81, 255, 119, 103, 79, 255, 136, 116, 85, 255, 81, 81, 81, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 136, 116, 85, 255, 175, 142, 119, 255, 121, 121, 121, 255, 100, 100, 100, 255, 119, 103, 79, 255, 136, 116, 85, 255, 175, 142, 119, 255, 216, 175, 147, 255, 216, 175, 147, 255, 175, 142, 119, 255, 136, 116, 85, 255, 100, 100, 100, 255, 61, 61, 67, 255, 136, 116, 85, 255, 175, 142, 119, 255, 47, 47, 55, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 175, 142, 119, 255, 216, 175, 147, 255, 226, 192, 170, 255, 175, 142, 119, 255, 121, 121, 121, 255, 121, 121, 121, 255, 61, 61, 67, 255, 121, 121, 121, 255, 121, 121, 121, 255, 136, 116, 85, 255, 119, 103, 79, 255, 81, 81, 81, 255, 61, 61, 67, 255, 61, 61, 67, 255, 47, 47, 55, 255, 61, 61, 67, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 100, 100, 100, 255, 100, 100, 100, 255, 121, 121, 121, 255, 121, 121, 121, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 47, 47, 55, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 81, 81, 81, 255, 81, 81, 81, 255, 100, 100, 100, 255, 100, 100, 100, 255]",
		pumpkinSide: "[196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 160, 86, 11, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 160, 86, 11, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 171, 97, 18, 255, 160, 86, 11, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 166, 75, 255, 227, 166, 75, 255, 160, 86, 11, 255, 171, 97, 18, 255, 227, 166, 75, 255, 227, 166, 75, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 166, 75, 255, 227, 166, 75, 255, 227, 166, 75, 255, 160, 86, 11, 255, 196, 111, 20, 255, 227, 166, 75, 255, 160, 86, 11, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 166, 75, 255, 171, 97, 18, 255, 160, 86, 11, 255, 227, 166, 75, 255, 227, 166, 75, 255, 227, 166, 75, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 166, 75, 255, 227, 166, 75, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 166, 75, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 126, 61, 14, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 126, 61, 14, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 126, 61, 14, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 126, 61, 14, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 160, 86, 11, 255, 196, 111, 20, 255, 227, 138, 29, 255, 196, 111, 20, 255, 126, 61, 14, 255, 227, 138, 29, 255, 196, 111, 20, 255, 196, 111, 20, 255, 126, 61, 14, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 126, 61, 14, 255, 227, 138, 29, 255, 196, 111, 20, 255, 196, 111, 20, 255, 160, 86, 11, 255, 196, 111, 20, 255, 227, 138, 29, 255, 126, 61, 14, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 126, 61, 14, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 126, 61, 14, 255, 196, 111, 20, 255, 196, 111, 20, 255, 160, 86, 11, 255, 126, 61, 14, 255, 160, 86, 11, 255, 196, 111, 20, 255, 126, 61, 14, 255, 160, 86, 11, 255, 196, 111, 20, 255, 160, 86, 11, 255, 160, 86, 11, 255, 126, 61, 14, 255, 196, 111, 20, 255, 196, 111, 20, 255, 160, 86, 11, 255, 126, 61, 14, 255, 160, 86, 11, 255, 196, 111, 20, 255, 126, 61, 14, 255, 126, 61, 14, 255, 160, 86, 11, 255, 160, 86, 11, 255, 126, 61, 14, 255, 160, 86, 11, 255, 160, 86, 11, 255, 160, 86, 11, 255, 160, 86, 11, 255, 126, 61, 14, 255, 160, 86, 11, 255, 160, 86, 11, 255, 126, 61, 14, 255, 126, 61, 14, 255, 160, 86, 11, 255, 160, 86, 11, 255, 126, 61, 14, 255]",
		pumpkinTop: "[196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 196, 111, 20, 255, 196, 111, 20, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 166, 75, 255, 196, 111, 20, 255, 227, 166, 75, 255, 227, 166, 75, 255, 227, 138, 29, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 166, 75, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 196, 111, 20, 255, 171, 97, 18, 255, 227, 166, 75, 255, 227, 138, 29, 255, 171, 97, 18, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 160, 86, 11, 255, 196, 111, 20, 255, 196, 111, 20, 255, 160, 86, 11, 255, 196, 111, 20, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 196, 111, 20, 255, 227, 138, 29, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 166, 75, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 170, 0, 255, 183, 134, 0, 255, 96, 54, 7, 255, 160, 86, 11, 255, 160, 86, 11, 255, 196, 111, 20, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 227, 166, 75, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 166, 75, 255, 227, 138, 29, 255, 196, 111, 20, 255, 183, 134, 0, 255, 227, 170, 0, 255, 183, 134, 0, 255, 96, 54, 7, 255, 196, 111, 20, 255, 160, 86, 11, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 166, 75, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 171, 97, 18, 255, 160, 86, 11, 255, 160, 86, 11, 255, 96, 54, 7, 255, 183, 134, 0, 255, 227, 170, 0, 255, 227, 170, 0, 255, 160, 86, 11, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 171, 97, 18, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 96, 54, 7, 255, 183, 134, 0, 255, 183, 134, 0, 255, 96, 54, 7, 255, 160, 86, 11, 255, 160, 86, 11, 255, 160, 86, 11, 255, 171, 97, 18, 255, 227, 138, 29, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 166, 75, 255, 227, 138, 29, 255, 171, 97, 18, 255, 160, 86, 11, 255, 196, 111, 20, 255, 196, 111, 20, 255, 96, 54, 7, 255, 96, 54, 7, 255, 160, 86, 11, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 166, 75, 255, 171, 97, 18, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 160, 86, 11, 255, 196, 111, 20, 255, 160, 86, 11, 255, 196, 111, 20, 255, 160, 86, 11, 255, 227, 138, 29, 255, 171, 97, 18, 255, 171, 97, 18, 255, 227, 138, 29, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 160, 86, 11, 255, 227, 138, 29, 255, 196, 111, 20, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 171, 97, 18, 255, 227, 166, 75, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 171, 97, 18, 255, 227, 138, 29, 255, 171, 97, 18, 255, 196, 111, 20, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 196, 111, 20, 255, 227, 166, 75, 255, 227, 166, 75, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 138, 29, 255, 171, 97, 18, 255, 227, 166, 75, 255, 227, 166, 75, 255, 227, 138, 29, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 227, 166, 75, 255, 227, 166, 75, 255, 171, 97, 18, 255, 196, 111, 20, 255, 227, 138, 29, 255, 171, 97, 18, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 171, 97, 18, 255, 196, 111, 20, 255, 196, 111, 20, 255, 227, 138, 29, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 196, 111, 20, 255, 171, 97, 18, 255]",
		melonSide: "[111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 52, 121, 30, 255, 50, 105, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 50, 105, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 167, 172, 29, 255, 52, 121, 30, 255, 50, 105, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 167, 172, 29, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 52, 121, 30, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 167, 172, 29, 255, 52, 121, 30, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 50, 105, 28, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 167, 172, 29, 255, 50, 105, 28, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 50, 105, 28, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 167, 172, 29, 255, 50, 105, 28, 255, 50, 105, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 50, 105, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 50, 105, 28, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 50, 105, 28, 255, 52, 121, 30, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 50, 105, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255]",
		melonTop: "[111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 49, 115, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 49, 115, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 49, 115, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 49, 115, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 111, 147, 35, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 49, 115, 28, 255, 111, 147, 35, 255, 49, 115, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 82, 129, 28, 255, 49, 115, 28, 255, 82, 129, 28, 255, 49, 115, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 49, 115, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 49, 115, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 49, 115, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 82, 129, 28, 255, 49, 115, 28, 255, 82, 129, 28, 255, 49, 115, 28, 255, 44, 93, 25, 255, 82, 129, 28, 255, 49, 115, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 49, 115, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 44, 93, 25, 255, 82, 129, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 49, 115, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 44, 93, 25, 255, 167, 172, 29, 255, 82, 129, 28, 255, 44, 93, 25, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 49, 115, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 111, 147, 35, 255, 49, 115, 28, 255, 44, 93, 25, 255, 44, 93, 25, 255, 82, 129, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 111, 147, 35, 255, 49, 115, 28, 255, 49, 115, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 82, 129, 28, 255, 49, 115, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 49, 115, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 111, 147, 35, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 49, 115, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 49, 115, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 167, 172, 29, 255, 49, 115, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 49, 115, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 49, 115, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 111, 147, 35, 255, 167, 172, 29, 255, 111, 147, 35, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 82, 129, 28, 255, 111, 147, 35, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255, 111, 147, 35, 255, 167, 172, 29, 255, 82, 129, 28, 255, 82, 129, 28, 255, 167, 172, 29, 255, 111, 147, 35, 255]",
		amethystBlock: "[100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 122, 91, 181, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 200, 144, 240, 255, 254, 203, 230, 255, 254, 203, 230, 255, 166, 120, 241, 255, 141, 106, 204, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 93, 58, 154, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 141, 106, 204, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 93, 58, 154, 255, 93, 58, 154, 255, 122, 91, 181, 255, 141, 106, 204, 255, 141, 106, 204, 255, 100, 71, 158, 255, 100, 71, 158, 255, 141, 106, 204, 255, 122, 91, 181, 255, 100, 71, 158, 255, 100, 71, 158, 255, 141, 106, 204, 255, 166, 120, 241, 255, 122, 91, 181, 255, 100, 71, 158, 255, 166, 120, 241, 255, 93, 58, 154, 255, 100, 71, 158, 255, 166, 120, 241, 255, 122, 91, 181, 255, 122, 91, 181, 255, 100, 71, 158, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 100, 71, 158, 255, 93, 58, 154, 255, 93, 58, 154, 255, 122, 91, 181, 255, 100, 71, 158, 255, 100, 71, 158, 255, 122, 91, 181, 255, 100, 71, 158, 255, 166, 120, 241, 255, 200, 144, 240, 255, 141, 106, 204, 255, 122, 91, 181, 255, 122, 91, 181, 255, 122, 91, 181, 255, 141, 106, 204, 255, 200, 144, 240, 255, 122, 91, 181, 255, 93, 58, 154, 255, 100, 71, 158, 255, 100, 71, 158, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 100, 71, 158, 255, 93, 58, 154, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 254, 203, 230, 255, 141, 106, 204, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 122, 91, 181, 255, 166, 120, 241, 255, 200, 144, 240, 255, 141, 106, 204, 255, 122, 91, 181, 255, 122, 91, 181, 255, 93, 58, 154, 255, 100, 71, 158, 255, 100, 71, 158, 255, 200, 144, 240, 255, 254, 203, 230, 255, 254, 203, 230, 255, 166, 120, 241, 255, 166, 120, 241, 255, 122, 91, 181, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 100, 71, 158, 255, 122, 91, 181, 255, 100, 71, 158, 255, 100, 71, 158, 255, 100, 71, 158, 255, 141, 106, 204, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 100, 71, 158, 255, 100, 71, 158, 255, 122, 91, 181, 255, 166, 120, 241, 255, 122, 91, 181, 255, 141, 106, 204, 255, 122, 91, 181, 255, 122, 91, 181, 255, 141, 106, 204, 255, 122, 91, 181, 255, 100, 71, 158, 255, 141, 106, 204, 255, 100, 71, 158, 255, 100, 71, 158, 255, 122, 91, 181, 255, 166, 120, 241, 255, 100, 71, 158, 255, 141, 106, 204, 255, 166, 120, 241, 255, 200, 144, 240, 255, 141, 106, 204, 255, 122, 91, 181, 255, 100, 71, 158, 255, 100, 71, 158, 255, 122, 91, 181, 255, 100, 71, 158, 255, 141, 106, 204, 255, 166, 120, 241, 255, 100, 71, 158, 255, 122, 91, 181, 255, 122, 91, 181, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 122, 91, 181, 255, 141, 106, 204, 255, 100, 71, 158, 255, 93, 58, 154, 255, 93, 58, 154, 255, 122, 91, 181, 255, 141, 106, 204, 255, 122, 91, 181, 255, 166, 120, 241, 255, 200, 144, 240, 255, 141, 106, 204, 255, 122, 91, 181, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 200, 144, 240, 255, 141, 106, 204, 255, 122, 91, 181, 255, 93, 58, 154, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 141, 106, 204, 255, 122, 91, 181, 255, 141, 106, 204, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 166, 120, 241, 255, 200, 144, 240, 255, 166, 120, 241, 255, 141, 106, 204, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 200, 144, 240, 255, 166, 120, 241, 255, 141, 106, 204, 255, 122, 91, 181, 255, 100, 71, 158, 255, 100, 71, 158, 255, 166, 120, 241, 255, 200, 144, 240, 255, 254, 203, 230, 255, 254, 203, 230, 255, 166, 120, 241, 255, 166, 120, 241, 255, 122, 91, 181, 255, 100, 71, 158, 255, 100, 71, 158, 255, 122, 91, 181, 255, 166, 120, 241, 255, 93, 58, 154, 255, 100, 71, 158, 255, 166, 120, 241, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 141, 106, 204, 255, 200, 144, 240, 255, 93, 58, 154, 255, 100, 71, 158, 255, 100, 71, 158, 255, 93, 58, 154, 255, 122, 91, 181, 255, 122, 91, 181, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 200, 144, 240, 255, 141, 106, 204, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 166, 120, 241, 255, 100, 71, 158, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 200, 144, 240, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 200, 144, 240, 255, 254, 203, 230, 255, 166, 120, 241, 255, 93, 58, 154, 255, 100, 71, 158, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 122, 91, 181, 255, 122, 91, 181, 255, 122, 91, 181, 255, 200, 144, 240, 255, 254, 203, 230, 255, 141, 106, 204, 255, 122, 91, 181, 255, 93, 58, 154, 255, 122, 91, 181, 255, 200, 144, 240, 255, 93, 58, 154, 255]",
		beeNestTop: "[124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 200, 134, 68, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 200, 134, 68, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 124, 81, 43, 255, 124, 81, 43, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 124, 81, 43, 255, 247, 206, 70, 255, 251, 220, 117, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 124, 81, 43, 255, 247, 206, 70, 255, 251, 220, 117, 255, 160, 106, 52, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 247, 206, 70, 255, 200, 134, 68, 255, 124, 81, 43, 255, 160, 106, 52, 255, 247, 206, 70, 255, 251, 220, 117, 255, 160, 106, 52, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 124, 81, 43, 255, 251, 220, 117, 255, 247, 206, 70, 255, 124, 81, 43, 255, 160, 106, 52, 255, 200, 134, 68, 255, 247, 206, 70, 255, 160, 106, 52, 255, 251, 220, 117, 255, 251, 220, 117, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 251, 220, 117, 255, 251, 220, 117, 255, 124, 81, 43, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 124, 81, 43, 255, 247, 206, 70, 255, 251, 220, 117, 255, 124, 81, 43, 255, 251, 220, 117, 255, 251, 220, 117, 255, 160, 106, 52, 255, 251, 220, 117, 255, 251, 220, 117, 255, 160, 106, 52, 255, 251, 220, 117, 255, 251, 220, 117, 255, 124, 81, 43, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 124, 81, 43, 255, 247, 206, 70, 255, 251, 220, 117, 255, 124, 81, 43, 255, 251, 220, 117, 255, 251, 220, 117, 255, 160, 106, 52, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 247, 206, 70, 255, 200, 134, 68, 255, 124, 81, 43, 255, 160, 106, 52, 255, 247, 206, 70, 255, 251, 220, 117, 255, 124, 81, 43, 255, 251, 220, 117, 255, 251, 220, 117, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 251, 220, 117, 255, 247, 206, 70, 255, 124, 81, 43, 255, 160, 106, 52, 255, 200, 134, 68, 255, 247, 206, 70, 255, 160, 106, 52, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 160, 106, 52, 255, 247, 206, 70, 255, 251, 220, 117, 255, 160, 106, 52, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 247, 206, 70, 255, 160, 106, 52, 255, 251, 220, 117, 255, 247, 206, 70, 255, 160, 106, 52, 255, 124, 81, 43, 255, 247, 206, 70, 255, 251, 220, 117, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 247, 206, 70, 255, 200, 134, 68, 255, 124, 81, 43, 255, 124, 81, 43, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 124, 81, 43, 255, 124, 81, 43, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 200, 134, 68, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 200, 134, 68, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255]",
		beeNestSide: "[251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 251, 220, 117, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 217, 164, 83, 255, 217, 164, 83, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 217, 164, 83, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 200, 134, 68, 255, 217, 164, 83, 255, 217, 164, 83, 255, 247, 206, 70, 255, 217, 164, 83, 255, 200, 134, 68, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 160, 106, 52, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 217, 164, 83, 255, 217, 164, 83, 255, 228, 196, 116, 255, 228, 196, 116, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 228, 196, 116, 255, 228, 196, 116, 255, 228, 196, 116, 255, 228, 196, 116, 255, 228, 196, 116, 255, 228, 196, 116, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 217, 164, 83, 255, 217, 164, 83, 255, 228, 196, 116, 255, 228, 196, 116, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 124, 81, 43, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 134, 68, 255, 200, 134, 68, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 134, 68, 255, 200, 134, 68, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 188, 152, 109, 255, 162, 129, 102, 255, 162, 129, 102, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 162, 129, 102, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255]",
		beeNestFront: "[247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 200, 134, 68, 255, 200, 134, 68, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 247, 206, 70, 255, 251, 220, 117, 255, 200, 134, 68, 255, 251, 220, 117, 255, 251, 220, 117, 255, 200, 134, 68, 255, 251, 220, 117, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 111, 83, 58, 255, 111, 83, 58, 255, 98, 72, 49, 255, 98, 72, 49, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 98, 72, 49, 255, 112, 76, 46, 255, 112, 76, 46, 255, 137, 100, 69, 255, 98, 72, 49, 255, 251, 220, 117, 255, 247, 206, 70, 255, 251, 220, 117, 255, 251, 220, 117, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 251, 220, 117, 255, 112, 76, 46, 255, 80, 51, 27, 255, 80, 51, 27, 255, 80, 51, 27, 255, 137, 100, 69, 255, 251, 220, 117, 255, 217, 164, 83, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 217, 164, 83, 255, 217, 164, 83, 255, 162, 129, 102, 255, 98, 72, 49, 255, 98, 72, 49, 255, 98, 72, 49, 255, 162, 129, 102, 255, 217, 164, 83, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 162, 129, 102, 255, 98, 72, 49, 255, 111, 83, 58, 255, 111, 83, 58, 255, 200, 134, 68, 255, 200, 134, 68, 255, 111, 83, 58, 255, 98, 72, 49, 255, 111, 83, 58, 255, 111, 83, 58, 255, 98, 72, 49, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 137, 100, 69, 255, 200, 166, 113, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 166, 113, 255, 111, 83, 58, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 217, 164, 83, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 217, 164, 83, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 134, 68, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 217, 164, 83, 255, 217, 164, 83, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 247, 206, 70, 255, 217, 164, 83, 255, 217, 164, 83, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 98, 72, 49, 255, 111, 83, 58, 255, 98, 72, 49, 255, 112, 76, 46, 255, 112, 76, 46, 255, 124, 81, 43, 255, 98, 72, 49, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 200, 166, 113, 255, 112, 76, 46, 255, 80, 51, 27, 255, 80, 51, 27, 255, 80, 51, 27, 255, 137, 100, 69, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 166, 113, 255, 200, 134, 68, 255, 200, 166, 113, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 166, 113, 255, 162, 129, 102, 255, 98, 72, 49, 255, 98, 72, 49, 255, 98, 72, 49, 255, 162, 129, 102, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 162, 129, 102, 255, 98, 72, 49, 255, 111, 83, 58, 255, 111, 83, 58, 255, 200, 134, 68, 255, 162, 129, 102, 255, 162, 129, 102, 255, 162, 129, 102, 255, 162, 129, 102, 255, 162, 129, 102, 255, 162, 129, 102, 255, 188, 152, 109, 255, 188, 152, 109, 255, 162, 129, 102, 255, 162, 129, 102, 255, 111, 83, 58, 255, 137, 100, 69, 255, 200, 166, 113, 255, 200, 134, 68, 255, 200, 134, 68, 255, 200, 166, 113, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255]",
		beeNestBottom: "[111, 83, 58, 255, 111, 83, 58, 255, 122, 87, 55, 255, 111, 83, 58, 255, 111, 83, 58, 255, 122, 87, 55, 255, 122, 87, 55, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 122, 87, 55, 255, 122, 87, 55, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 162, 129, 102, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 162, 129, 102, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 111, 83, 58, 255, 111, 83, 58, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 111, 83, 58, 255, 188, 152, 109, 255, 200, 166, 113, 255, 111, 83, 58, 255, 122, 87, 55, 255, 122, 87, 55, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 122, 87, 55, 255, 122, 87, 55, 255, 122, 87, 55, 255, 111, 83, 58, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 111, 83, 58, 255, 188, 152, 109, 255, 200, 166, 113, 255, 122, 87, 55, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 188, 152, 109, 255, 162, 129, 102, 255, 111, 83, 58, 255, 122, 87, 55, 255, 188, 152, 109, 255, 200, 166, 113, 255, 122, 87, 55, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 111, 83, 58, 255, 200, 166, 113, 255, 188, 152, 109, 255, 111, 83, 58, 255, 122, 87, 55, 255, 162, 129, 102, 255, 188, 152, 109, 255, 122, 87, 55, 255, 200, 166, 113, 255, 200, 166, 113, 255, 111, 83, 58, 255, 122, 87, 55, 255, 122, 87, 55, 255, 111, 83, 58, 255, 200, 166, 113, 255, 200, 166, 113, 255, 111, 83, 58, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 111, 83, 58, 255, 188, 152, 109, 255, 200, 166, 113, 255, 111, 83, 58, 255, 200, 166, 113, 255, 200, 166, 113, 255, 122, 87, 55, 255, 200, 166, 113, 255, 200, 166, 113, 255, 122, 87, 55, 255, 200, 166, 113, 255, 200, 166, 113, 255, 111, 83, 58, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 111, 83, 58, 255, 188, 152, 109, 255, 200, 166, 113, 255, 111, 83, 58, 255, 200, 166, 113, 255, 200, 166, 113, 255, 122, 87, 55, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 188, 152, 109, 255, 162, 129, 102, 255, 111, 83, 58, 255, 122, 87, 55, 255, 188, 152, 109, 255, 200, 166, 113, 255, 111, 83, 58, 255, 200, 166, 113, 255, 200, 166, 113, 255, 111, 83, 58, 255, 122, 87, 55, 255, 122, 87, 55, 255, 111, 83, 58, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 200, 166, 113, 255, 188, 152, 109, 255, 111, 83, 58, 255, 122, 87, 55, 255, 162, 129, 102, 255, 188, 152, 109, 255, 122, 87, 55, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 122, 87, 55, 255, 188, 152, 109, 255, 200, 166, 113, 255, 122, 87, 55, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 188, 152, 109, 255, 122, 87, 55, 255, 200, 166, 113, 255, 188, 152, 109, 255, 122, 87, 55, 255, 111, 83, 58, 255, 188, 152, 109, 255, 200, 166, 113, 255, 111, 83, 58, 255, 122, 87, 55, 255, 122, 87, 55, 255, 122, 87, 55, 255, 122, 87, 55, 255, 122, 87, 55, 255, 122, 87, 55, 255, 122, 87, 55, 255, 122, 87, 55, 255, 111, 83, 58, 255, 188, 152, 109, 255, 162, 129, 102, 255, 111, 83, 58, 255, 111, 83, 58, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 200, 166, 113, 255, 200, 166, 113, 255, 200, 166, 113, 255, 188, 152, 109, 255, 111, 83, 58, 255, 111, 83, 58, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 162, 129, 102, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 162, 129, 102, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 188, 152, 109, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 122, 87, 55, 255, 122, 87, 55, 255, 111, 83, 58, 255, 111, 83, 58, 255, 111, 83, 58, 255, 122, 87, 55, 255, 122, 87, 55, 255, 111, 83, 58, 255, 111, 83, 58, 255, 122, 87, 55, 255, 111, 83, 58, 255, 111, 83, 58, 255, 122, 87, 55, 255]",
		smithingTableTop: "[73, 75, 95, 255, 73, 75, 95, 255, 64, 66, 83, 255, 64, 66, 83, 255, 64, 66, 83, 255, 73, 75, 95, 255, 73, 75, 95, 255, 83, 85, 108, 255, 83, 85, 108, 255, 73, 75, 95, 255, 73, 75, 95, 255, 73, 75, 95, 255, 73, 75, 95, 255, 73, 75, 95, 255, 83, 85, 108, 255, 83, 85, 108, 255, 73, 75, 95, 255, 64, 66, 83, 255, 64, 66, 83, 255, 64, 66, 83, 255, 56, 58, 71, 255, 56, 58, 71, 255, 56, 58, 71, 255, 56, 58, 71, 255, 64, 66, 83, 255, 64, 66, 83, 255, 64, 66, 83, 255, 56, 58, 71, 255, 56, 58, 71, 255, 64, 66, 83, 255, 64, 66, 83, 255, 83, 85, 108, 255, 73, 75, 95, 255, 56, 58, 71, 255, 56, 58, 71, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 56, 58, 71, 255, 56, 58, 71, 255, 56, 58, 71, 255, 38, 39, 45, 255, 38, 39, 45, 255, 54, 55, 63, 255, 54, 55, 63, 255, 56, 58, 71, 255, 64, 66, 83, 255, 64, 66, 83, 255, 73, 75, 95, 255, 64, 66, 83, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 38, 39, 45, 255, 83, 85, 108, 255, 54, 55, 63, 255, 54, 55, 63, 255, 56, 58, 71, 255, 56, 58, 71, 255, 73, 75, 95, 255, 56, 58, 71, 255, 64, 66, 83, 255, 54, 55, 63, 255, 47, 48, 55, 255, 54, 55, 63, 255, 54, 55, 63, 255, 47, 48, 55, 255, 54, 55, 63, 255, 47, 48, 55, 255, 64, 66, 83, 255, 56, 58, 71, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 64, 66, 83, 255, 83, 85, 108, 255, 73, 75, 95, 255, 64, 66, 83, 255, 54, 55, 63, 255, 47, 48, 55, 255, 56, 58, 71, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 54, 55, 63, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 54, 55, 63, 255, 56, 58, 71, 255, 73, 75, 95, 255, 73, 75, 95, 255, 56, 58, 71, 255, 54, 55, 63, 255, 64, 66, 83, 255, 38, 39, 45, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 56, 58, 71, 255, 73, 75, 95, 255, 73, 75, 95, 255, 56, 58, 71, 255, 54, 55, 63, 255, 54, 55, 63, 255, 64, 66, 83, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 47, 48, 55, 255, 54, 55, 63, 255, 64, 66, 83, 255, 64, 66, 83, 255, 64, 66, 83, 255, 73, 75, 95, 255, 64, 66, 83, 255, 56, 58, 71, 255, 54, 55, 63, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 38, 39, 45, 255, 64, 66, 83, 255, 64, 66, 83, 255, 56, 58, 71, 255, 64, 66, 83, 255, 54, 55, 63, 255, 54, 55, 63, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 56, 58, 71, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 64, 66, 83, 255, 56, 58, 71, 255, 64, 66, 83, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 38, 39, 45, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 54, 55, 63, 255, 64, 66, 83, 255, 73, 75, 95, 255, 38, 39, 45, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 64, 66, 83, 255, 83, 85, 108, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 47, 48, 55, 255, 54, 55, 63, 255, 64, 66, 83, 255, 73, 75, 95, 255, 64, 66, 83, 255, 54, 55, 63, 255, 54, 55, 63, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 54, 55, 63, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 64, 66, 83, 255, 73, 75, 95, 255, 73, 75, 95, 255, 56, 58, 71, 255, 56, 58, 71, 255, 56, 58, 71, 255, 38, 39, 45, 255, 47, 48, 55, 255, 47, 48, 55, 255, 54, 55, 63, 255, 47, 48, 55, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 54, 55, 63, 255, 56, 58, 71, 255, 56, 58, 71, 255, 73, 75, 95, 255, 83, 85, 108, 255, 64, 66, 83, 255, 56, 58, 71, 255, 56, 58, 71, 255, 64, 66, 83, 255, 38, 39, 45, 255, 56, 58, 71, 255, 56, 58, 71, 255, 54, 55, 63, 255, 54, 55, 63, 255, 56, 58, 71, 255, 56, 58, 71, 255, 56, 58, 71, 255, 56, 58, 71, 255, 56, 58, 71, 255, 73, 75, 95, 255, 83, 85, 108, 255, 83, 85, 108, 255, 73, 75, 95, 255, 73, 75, 95, 255, 83, 85, 108, 255, 73, 75, 95, 255, 73, 75, 95, 255, 64, 66, 83, 255, 64, 66, 83, 255, 73, 75, 95, 255, 64, 66, 83, 255, 38, 39, 45, 255, 64, 66, 83, 255, 64, 66, 83, 255, 73, 75, 95, 255, 73, 75, 95, 255]",
		smithingTableBottom: "[26, 27, 30, 255, 26, 27, 30, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 66, 28, 23, 255, 26, 27, 30, 255, 26, 27, 30, 255, 26, 27, 30, 255, 26, 27, 30, 255, 47, 20, 17, 255, 66, 28, 23, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 66, 28, 23, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 66, 28, 23, 255, 47, 20, 17, 255, 26, 27, 30, 255, 26, 27, 30, 255, 74, 31, 26, 255, 47, 20, 17, 255, 74, 31, 26, 255, 82, 34, 29, 255, 82, 34, 29, 255, 82, 34, 29, 255, 82, 34, 29, 255, 74, 31, 26, 255, 74, 31, 26, 255, 82, 34, 29, 255, 82, 34, 29, 255, 82, 34, 29, 255, 74, 31, 26, 255, 74, 31, 26, 255, 47, 20, 17, 255, 74, 31, 26, 255, 74, 31, 26, 255, 47, 20, 17, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 82, 34, 29, 255, 47, 20, 17, 255, 66, 28, 23, 255, 74, 31, 26, 255, 66, 28, 23, 255, 82, 34, 29, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 82, 34, 29, 255, 47, 20, 17, 255, 74, 31, 26, 255, 66, 28, 23, 255, 47, 20, 17, 255, 82, 34, 29, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 66, 28, 23, 255, 74, 31, 26, 255, 66, 28, 23, 255, 47, 20, 17, 255, 82, 34, 29, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 82, 34, 29, 255, 47, 20, 17, 255, 66, 28, 23, 255, 66, 28, 23, 255, 47, 20, 17, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 82, 34, 29, 255, 47, 20, 17, 255, 66, 28, 23, 255, 74, 31, 26, 255, 47, 20, 17, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 82, 34, 29, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 82, 34, 29, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 82, 34, 29, 255, 47, 20, 17, 255, 66, 28, 23, 255, 74, 31, 26, 255, 47, 20, 17, 255, 82, 34, 29, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 82, 34, 29, 255, 47, 20, 17, 255, 74, 31, 26, 255, 66, 28, 23, 255, 47, 20, 17, 255, 82, 34, 29, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 82, 34, 29, 255, 66, 28, 23, 255, 74, 31, 26, 255, 66, 28, 23, 255, 47, 20, 17, 255, 74, 31, 26, 255, 74, 31, 26, 255, 82, 34, 29, 255, 82, 34, 29, 255, 82, 34, 29, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 82, 34, 29, 255, 82, 34, 29, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 74, 31, 26, 255, 26, 27, 30, 255, 26, 27, 30, 255, 47, 20, 17, 255, 66, 28, 23, 255, 66, 28, 23, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 66, 28, 23, 255, 47, 20, 17, 255, 66, 28, 23, 255, 66, 28, 23, 255, 47, 20, 17, 255, 26, 27, 30, 255, 26, 27, 30, 255, 26, 27, 30, 255, 26, 27, 30, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 26, 27, 30, 255, 26, 27, 30, 255]",
		smithingTableSide: "[56, 58, 71, 255, 56, 58, 71, 255, 54, 55, 63, 255, 38, 39, 45, 255, 47, 48, 55, 255, 54, 55, 63, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 56, 58, 71, 255, 64, 66, 83, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 56, 58, 71, 255, 47, 48, 55, 255, 47, 48, 55, 255, 38, 39, 45, 255, 38, 39, 45, 255, 26, 27, 30, 255, 47, 48, 55, 255, 38, 39, 45, 255, 26, 27, 30, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 38, 39, 45, 255, 47, 48, 55, 255, 47, 48, 55, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 26, 27, 30, 255, 47, 48, 55, 255, 38, 39, 45, 255, 38, 39, 45, 255, 47, 48, 55, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 26, 27, 30, 255, 26, 27, 30, 255, 26, 27, 30, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 26, 27, 30, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 26, 27, 30, 255, 17, 18, 19, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 17, 18, 19, 255, 26, 27, 30, 255, 38, 39, 45, 255, 17, 18, 19, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 151, 94, 66, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 17, 18, 19, 255, 38, 39, 45, 255, 38, 39, 45, 255, 17, 18, 19, 255, 95, 39, 33, 255, 101, 103, 120, 255, 73, 75, 95, 255, 73, 75, 95, 255, 73, 75, 95, 255, 64, 66, 83, 255, 82, 34, 29, 255, 95, 39, 33, 255, 95, 39, 33, 255, 74, 31, 26, 255, 95, 39, 33, 255, 95, 39, 33, 255, 26, 27, 30, 255, 38, 39, 45, 255, 47, 48, 55, 255, 26, 27, 30, 255, 47, 20, 17, 255, 73, 75, 95, 255, 64, 66, 83, 255, 73, 75, 95, 255, 64, 66, 83, 255, 73, 75, 95, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 26, 27, 30, 255, 38, 39, 45, 255, 47, 48, 55, 255, 26, 27, 30, 255, 74, 31, 26, 255, 47, 48, 55, 255, 35, 37, 51, 255, 35, 37, 51, 255, 47, 48, 55, 255, 47, 48, 55, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 17, 18, 19, 255, 47, 48, 55, 255, 38, 39, 45, 255, 26, 27, 30, 255, 74, 31, 26, 255, 47, 20, 17, 255, 47, 20, 17, 255, 123, 75, 53, 255, 47, 20, 17, 255, 47, 20, 17, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 17, 18, 19, 255, 56, 58, 71, 255, 38, 39, 45, 255, 26, 27, 30, 255, 82, 34, 29, 255, 95, 39, 33, 255, 95, 39, 33, 255, 151, 94, 66, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 74, 31, 26, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 17, 18, 19, 255, 56, 58, 71, 255, 47, 48, 55, 255, 17, 18, 19, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 151, 94, 66, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 26, 27, 30, 255, 56, 58, 71, 255, 47, 48, 55, 255, 26, 27, 30, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 151, 94, 66, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 26, 27, 30, 255, 38, 39, 45, 255, 56, 58, 71, 255, 26, 27, 30, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 47, 20, 17, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 26, 27, 30, 255, 47, 48, 55, 255, 56, 58, 71, 255, 26, 27, 30, 255, 95, 39, 33, 255, 95, 39, 33, 255, 82, 34, 29, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 82, 34, 29, 255, 82, 34, 29, 255, 95, 39, 33, 255, 95, 39, 33, 255, 26, 27, 30, 255, 56, 58, 71, 255, 26, 27, 30, 255, 26, 27, 30, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 26, 27, 30, 255, 26, 27, 30, 255]",
		smithingTableFront: "[56, 58, 71, 255, 56, 58, 71, 255, 54, 55, 63, 255, 38, 39, 45, 255, 47, 48, 55, 255, 54, 55, 63, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 56, 58, 71, 255, 64, 66, 83, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 56, 58, 71, 255, 47, 48, 55, 255, 47, 48, 55, 255, 38, 39, 45, 255, 38, 39, 45, 255, 26, 27, 30, 255, 47, 48, 55, 255, 38, 39, 45, 255, 26, 27, 30, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 47, 48, 55, 255, 38, 39, 45, 255, 47, 48, 55, 255, 47, 48, 55, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 26, 27, 30, 255, 47, 48, 55, 255, 38, 39, 45, 255, 38, 39, 45, 255, 47, 48, 55, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 38, 39, 45, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 26, 27, 30, 255, 26, 27, 30, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 17, 18, 19, 255, 26, 27, 30, 255, 26, 27, 30, 255, 17, 18, 19, 255, 17, 18, 19, 255, 26, 27, 30, 255, 17, 18, 19, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 17, 18, 19, 255, 26, 27, 30, 255, 38, 39, 45, 255, 17, 18, 19, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 64, 66, 83, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 26, 27, 30, 255, 38, 39, 45, 255, 38, 39, 45, 255, 26, 27, 30, 255, 95, 39, 33, 255, 73, 75, 95, 255, 82, 34, 29, 255, 73, 75, 95, 255, 95, 39, 33, 255, 95, 39, 33, 255, 64, 66, 83, 255, 73, 75, 95, 255, 95, 39, 33, 255, 73, 75, 95, 255, 64, 66, 83, 255, 95, 39, 33, 255, 26, 27, 30, 255, 38, 39, 45, 255, 47, 48, 55, 255, 17, 18, 19, 255, 47, 20, 17, 255, 73, 75, 95, 255, 47, 20, 17, 255, 73, 75, 95, 255, 47, 20, 17, 255, 47, 20, 17, 255, 73, 75, 95, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 73, 75, 95, 255, 47, 20, 17, 255, 26, 27, 30, 255, 38, 39, 45, 255, 47, 48, 55, 255, 26, 27, 30, 255, 66, 28, 23, 255, 64, 66, 83, 255, 66, 28, 23, 255, 123, 75, 53, 255, 66, 28, 23, 255, 66, 28, 23, 255, 64, 66, 83, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 64, 66, 83, 255, 66, 28, 23, 255, 26, 27, 30, 255, 47, 48, 55, 255, 38, 39, 45, 255, 26, 27, 30, 255, 74, 31, 26, 255, 123, 75, 53, 255, 66, 28, 23, 255, 151, 94, 66, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 73, 75, 95, 255, 66, 28, 23, 255, 73, 75, 95, 255, 74, 31, 26, 255, 74, 31, 26, 255, 26, 27, 30, 255, 56, 58, 71, 255, 38, 39, 45, 255, 26, 27, 30, 255, 95, 39, 33, 255, 151, 94, 66, 255, 95, 39, 33, 255, 123, 75, 53, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 64, 66, 83, 255, 95, 39, 33, 255, 64, 66, 83, 255, 95, 39, 33, 255, 95, 39, 33, 255, 26, 27, 30, 255, 56, 58, 71, 255, 47, 48, 55, 255, 26, 27, 30, 255, 47, 20, 17, 255, 151, 94, 66, 255, 47, 20, 17, 255, 73, 75, 95, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 73, 75, 95, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 26, 27, 30, 255, 56, 58, 71, 255, 47, 48, 55, 255, 26, 27, 30, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 64, 66, 83, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 26, 27, 30, 255, 38, 39, 45, 255, 56, 58, 71, 255, 26, 27, 30, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 74, 31, 26, 255, 66, 28, 23, 255, 66, 28, 23, 255, 66, 28, 23, 255, 74, 31, 26, 255, 26, 27, 30, 255, 47, 48, 55, 255, 56, 58, 71, 255, 26, 27, 30, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 82, 34, 29, 255, 82, 34, 29, 255, 95, 39, 33, 255, 95, 39, 33, 255, 95, 39, 33, 255, 26, 27, 30, 255, 56, 58, 71, 255, 26, 27, 30, 255, 26, 27, 30, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 47, 20, 17, 255, 26, 27, 30, 255, 26, 27, 30, 255]",
		fletchingTableTop: "[200, 183, 122, 255, 200, 183, 122, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 215, 193, 133, 255, 228, 205, 142, 255, 228, 205, 142, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 174, 159, 118, 255, 215, 193, 133, 255, 184, 168, 117, 255, 174, 159, 118, 255, 184, 168, 117, 255, 184, 168, 117, 255, 174, 159, 118, 255, 174, 159, 118, 255, 184, 168, 117, 255, 184, 168, 117, 255, 184, 168, 117, 255, 174, 159, 118, 255, 184, 168, 117, 255, 174, 159, 118, 255, 174, 159, 118, 255, 184, 168, 117, 255, 184, 168, 117, 255, 215, 193, 133, 255, 184, 168, 117, 255, 228, 205, 142, 255, 255, 255, 255, 255, 228, 205, 142, 255, 228, 205, 142, 255, 215, 193, 133, 255, 228, 205, 142, 255, 215, 193, 133, 255, 200, 183, 122, 255, 215, 193, 133, 255, 200, 183, 122, 255, 215, 193, 133, 255, 200, 183, 122, 255, 174, 159, 118, 255, 174, 159, 118, 255, 174, 159, 118, 255, 174, 159, 118, 255, 184, 168, 117, 255, 255, 255, 255, 255, 211, 211, 211, 255, 184, 168, 117, 255, 184, 168, 117, 255, 174, 159, 118, 255, 184, 168, 117, 255, 184, 168, 117, 255, 174, 159, 118, 255, 174, 159, 118, 255, 174, 159, 118, 255, 200, 183, 122, 255, 184, 168, 117, 255, 158, 139, 97, 255, 215, 193, 133, 255, 174, 159, 118, 255, 255, 255, 255, 255, 190, 190, 190, 255, 255, 255, 255, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 215, 193, 133, 255, 228, 205, 142, 255, 228, 205, 142, 255, 215, 193, 133, 255, 174, 159, 118, 255, 215, 193, 133, 255, 184, 168, 117, 255, 200, 183, 122, 255, 215, 193, 133, 255, 184, 168, 117, 255, 255, 255, 255, 255, 150, 150, 150, 255, 211, 211, 211, 255, 174, 159, 118, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 184, 168, 117, 255, 200, 183, 122, 255, 174, 159, 118, 255, 215, 193, 133, 255, 215, 193, 133, 255, 184, 168, 117, 255, 211, 211, 211, 255, 190, 190, 190, 255, 255, 255, 255, 255, 174, 159, 118, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 184, 168, 117, 255, 215, 193, 133, 255, 184, 168, 117, 255, 215, 193, 133, 255, 158, 139, 97, 255, 184, 168, 117, 255, 255, 255, 255, 255, 150, 150, 150, 255, 211, 211, 211, 255, 174, 159, 118, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 184, 168, 117, 255, 215, 193, 133, 255, 184, 168, 117, 255, 165, 148, 103, 255, 200, 183, 122, 255, 184, 168, 117, 255, 255, 255, 255, 255, 150, 150, 150, 255, 255, 255, 255, 255, 174, 159, 118, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 228, 205, 142, 255, 184, 168, 117, 255, 255, 255, 255, 255, 255, 255, 255, 255, 174, 159, 118, 255, 215, 193, 133, 255, 174, 159, 118, 255, 211, 211, 211, 255, 150, 150, 150, 255, 190, 190, 190, 255, 174, 159, 118, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 228, 205, 142, 255, 255, 255, 255, 255, 216, 216, 216, 255, 174, 159, 118, 255, 174, 159, 118, 255, 228, 205, 142, 255, 174, 159, 118, 255, 174, 159, 118, 255, 150, 150, 150, 255, 174, 159, 118, 255, 184, 168, 117, 255, 215, 193, 133, 255, 228, 205, 142, 255, 215, 193, 133, 255, 228, 205, 142, 255, 228, 205, 142, 255, 255, 255, 255, 255, 216, 216, 216, 255, 184, 168, 117, 255, 184, 168, 117, 255, 184, 168, 117, 255, 158, 139, 97, 255, 184, 168, 117, 255, 200, 183, 122, 255, 174, 159, 118, 255, 150, 150, 150, 255, 184, 168, 117, 255, 184, 168, 117, 255, 184, 168, 117, 255, 174, 159, 118, 255, 184, 168, 117, 255, 73, 54, 21, 255, 216, 216, 216, 255, 184, 168, 117, 255, 215, 193, 133, 255, 184, 168, 117, 255, 158, 139, 97, 255, 215, 193, 133, 255, 184, 168, 117, 255, 200, 183, 122, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 215, 193, 133, 255, 228, 205, 142, 255, 184, 168, 117, 255, 73, 54, 21, 255, 104, 78, 30, 255, 184, 168, 117, 255, 215, 193, 133, 255, 228, 205, 142, 255, 184, 168, 117, 255, 215, 193, 133, 255, 200, 183, 122, 255, 184, 168, 117, 255, 184, 168, 117, 255, 184, 168, 117, 255, 184, 168, 117, 255, 174, 159, 118, 255, 184, 168, 117, 255, 184, 168, 117, 255, 184, 168, 117, 255, 104, 78, 30, 255, 174, 159, 118, 255, 174, 159, 118, 255, 174, 159, 118, 255, 184, 168, 117, 255, 184, 168, 117, 255, 200, 183, 122, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 184, 168, 117, 255, 228, 205, 142, 255, 184, 168, 117, 255, 184, 168, 117, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 158, 139, 97, 255, 158, 139, 97, 255, 158, 139, 97, 255, 158, 139, 97, 255, 165, 148, 103, 255, 165, 148, 103, 255, 174, 159, 118, 255, 174, 159, 118, 255, 174, 159, 118, 255, 165, 148, 103, 255, 165, 148, 103, 255, 165, 148, 103, 255, 158, 139, 97, 255, 165, 148, 103, 255, 158, 139, 97, 255, 158, 139, 97, 255]",
		fletchingTableFront: "[174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 158, 139, 97, 255, 215, 193, 133, 255, 200, 183, 122, 255, 184, 168, 117, 255, 158, 139, 97, 255, 215, 193, 133, 255, 215, 193, 133, 255, 184, 168, 117, 255, 158, 139, 97, 255, 215, 193, 133, 255, 215, 193, 133, 255, 200, 183, 122, 255, 165, 148, 103, 255, 215, 193, 133, 255, 215, 193, 133, 255, 200, 183, 122, 255, 158, 139, 97, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 73, 54, 21, 255, 73, 54, 21, 255, 215, 193, 133, 255, 184, 168, 117, 255, 165, 148, 103, 255, 200, 183, 122, 255, 198, 198, 198, 255, 184, 168, 117, 255, 198, 198, 198, 255, 215, 193, 133, 255, 200, 183, 122, 255, 215, 193, 133, 255, 165, 148, 103, 255, 174, 159, 118, 255, 174, 159, 118, 255, 73, 54, 21, 255, 109, 66, 24, 255, 73, 54, 21, 255, 165, 148, 103, 255, 174, 159, 118, 255, 174, 159, 118, 255, 165, 148, 103, 255, 198, 198, 198, 255, 216, 216, 216, 255, 255, 255, 255, 255, 158, 139, 97, 255, 158, 139, 97, 255, 165, 148, 103, 255, 165, 148, 103, 255, 200, 183, 122, 255, 73, 54, 21, 255, 144, 88, 31, 255, 158, 139, 97, 255, 68, 68, 68, 255, 200, 183, 122, 255, 200, 183, 122, 255, 165, 148, 103, 255, 200, 183, 122, 255, 216, 216, 216, 255, 255, 255, 255, 255, 216, 216, 216, 255, 184, 168, 117, 255, 200, 183, 122, 255, 200, 183, 122, 255, 165, 148, 103, 255, 215, 193, 133, 255, 144, 88, 31, 255, 73, 54, 21, 255, 165, 148, 103, 255, 109, 109, 109, 255, 200, 183, 122, 255, 215, 193, 133, 255, 165, 148, 103, 255, 215, 193, 133, 255, 184, 168, 117, 255, 255, 255, 255, 255, 165, 148, 103, 255, 184, 168, 117, 255, 200, 183, 122, 255, 215, 193, 133, 255, 174, 159, 118, 255, 228, 205, 142, 255, 144, 88, 31, 255, 184, 168, 117, 255, 158, 139, 97, 255, 150, 150, 150, 255, 200, 183, 122, 255, 228, 205, 142, 255, 165, 148, 103, 255, 228, 205, 142, 255, 184, 168, 117, 255, 40, 30, 11, 255, 158, 139, 97, 255, 184, 168, 117, 255, 200, 183, 122, 255, 228, 205, 142, 255, 27, 22, 13, 255, 75, 43, 24, 255, 75, 43, 24, 255, 56, 33, 22, 255, 75, 43, 24, 255, 75, 43, 24, 255, 56, 33, 22, 255, 56, 33, 22, 255, 56, 33, 22, 255, 56, 33, 22, 255, 75, 43, 24, 255, 75, 43, 24, 255, 56, 33, 22, 255, 56, 33, 22, 255, 56, 33, 22, 255, 27, 22, 13, 255, 174, 159, 118, 255, 228, 205, 142, 255, 150, 150, 150, 255, 184, 168, 117, 255, 165, 148, 103, 255, 150, 150, 150, 255, 184, 168, 117, 255, 215, 193, 133, 255, 174, 159, 118, 255, 215, 193, 133, 255, 184, 168, 117, 255, 40, 30, 11, 255, 165, 148, 103, 255, 184, 168, 117, 255, 215, 193, 133, 255, 215, 193, 133, 255, 165, 148, 103, 255, 228, 205, 142, 255, 107, 107, 107, 255, 184, 168, 117, 255, 174, 159, 118, 255, 109, 109, 109, 255, 200, 183, 122, 255, 215, 193, 133, 255, 174, 159, 118, 255, 228, 205, 142, 255, 200, 183, 122, 255, 137, 103, 39, 255, 165, 148, 103, 255, 184, 168, 117, 255, 215, 193, 133, 255, 228, 205, 142, 255, 165, 148, 103, 255, 215, 193, 133, 255, 144, 88, 31, 255, 184, 168, 117, 255, 174, 159, 118, 255, 109, 109, 109, 255, 200, 183, 122, 255, 215, 193, 133, 255, 174, 159, 118, 255, 215, 193, 133, 255, 184, 168, 117, 255, 137, 103, 39, 255, 158, 139, 97, 255, 184, 168, 117, 255, 200, 183, 122, 255, 228, 205, 142, 255, 165, 148, 103, 255, 215, 193, 133, 255, 109, 66, 24, 255, 73, 54, 21, 255, 174, 159, 118, 255, 109, 109, 109, 255, 184, 168, 117, 255, 215, 193, 133, 255, 165, 148, 103, 255, 200, 183, 122, 255, 150, 150, 150, 255, 40, 30, 11, 255, 216, 216, 216, 255, 184, 168, 117, 255, 200, 183, 122, 255, 215, 193, 133, 255, 158, 139, 97, 255, 174, 159, 118, 255, 165, 148, 103, 255, 109, 66, 24, 255, 158, 139, 97, 255, 68, 68, 68, 255, 165, 148, 103, 255, 158, 139, 97, 255, 158, 139, 97, 255, 165, 148, 103, 255, 216, 216, 216, 255, 255, 255, 255, 255, 216, 216, 216, 255, 165, 148, 103, 255, 158, 139, 97, 255, 158, 139, 97, 255, 165, 148, 103, 255, 228, 205, 142, 255, 228, 205, 142, 255, 73, 54, 21, 255, 109, 66, 24, 255, 73, 54, 21, 255, 215, 193, 133, 255, 228, 205, 142, 255, 174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 255, 255, 255, 255, 174, 159, 118, 255, 184, 168, 117, 255, 228, 205, 142, 255, 228, 205, 142, 255, 158, 139, 97, 255, 215, 193, 133, 255, 184, 168, 117, 255, 215, 193, 133, 255, 73, 54, 21, 255, 73, 54, 21, 255, 184, 168, 117, 255, 215, 193, 133, 255, 174, 159, 118, 255, 215, 193, 133, 255, 215, 193, 133, 255, 184, 168, 117, 255, 174, 159, 118, 255, 228, 205, 142, 255, 184, 168, 117, 255, 215, 193, 133, 255, 158, 139, 97, 255, 215, 193, 133, 255, 200, 183, 122, 255, 215, 193, 133, 255, 158, 139, 97, 255, 184, 168, 117, 255, 174, 159, 118, 255, 174, 159, 118, 255, 165, 148, 103, 255, 215, 193, 133, 255, 215, 193, 133, 255, 200, 183, 122, 255, 158, 139, 97, 255, 174, 159, 118, 255, 184, 168, 117, 255, 174, 159, 118, 255]",
		fletchingTableSide: "[174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 158, 139, 97, 255, 215, 193, 133, 255, 200, 183, 122, 255, 184, 168, 117, 255, 158, 139, 97, 255, 215, 193, 133, 255, 215, 193, 133, 255, 184, 168, 117, 255, 158, 139, 97, 255, 215, 193, 133, 255, 215, 193, 133, 255, 200, 183, 122, 255, 165, 148, 103, 255, 215, 193, 133, 255, 215, 193, 133, 255, 200, 183, 122, 255, 158, 139, 97, 255, 215, 193, 133, 255, 215, 193, 133, 255, 215, 193, 133, 255, 158, 139, 97, 255, 228, 205, 142, 255, 215, 193, 133, 255, 184, 168, 117, 255, 165, 148, 103, 255, 200, 183, 122, 255, 215, 193, 133, 255, 184, 168, 117, 255, 255, 255, 255, 255, 215, 193, 133, 255, 200, 183, 122, 255, 215, 193, 133, 255, 165, 148, 103, 255, 174, 159, 118, 255, 174, 159, 118, 255, 165, 148, 103, 255, 165, 148, 103, 255, 158, 139, 97, 255, 165, 148, 103, 255, 174, 159, 118, 255, 174, 159, 118, 255, 165, 148, 103, 255, 158, 139, 97, 255, 216, 216, 216, 255, 255, 255, 255, 255, 216, 216, 216, 255, 158, 139, 97, 255, 165, 148, 103, 255, 165, 148, 103, 255, 200, 183, 122, 255, 200, 183, 122, 255, 224, 228, 228, 255, 215, 220, 221, 255, 217, 222, 223, 255, 232, 235, 235, 255, 245, 247, 247, 255, 219, 224, 225, 255, 200, 183, 122, 255, 200, 183, 122, 255, 216, 216, 216, 255, 40, 30, 11, 255, 150, 150, 150, 255, 200, 183, 122, 255, 200, 183, 122, 255, 165, 148, 103, 255, 215, 193, 133, 255, 233, 236, 236, 255, 116, 35, 3, 255, 155, 34, 26, 255, 191, 37, 41, 255, 191, 37, 41, 255, 155, 34, 26, 255, 116, 35, 3, 255, 227, 230, 231, 255, 200, 183, 122, 255, 215, 193, 133, 255, 137, 103, 39, 255, 200, 183, 122, 255, 184, 168, 117, 255, 215, 193, 133, 255, 174, 159, 118, 255, 228, 205, 142, 255, 248, 249, 249, 255, 155, 34, 26, 255, 227, 230, 231, 255, 230, 233, 234, 255, 253, 253, 253, 255, 250, 250, 250, 255, 155, 34, 26, 255, 227, 230, 231, 255, 184, 168, 117, 255, 228, 205, 142, 255, 137, 103, 39, 255, 215, 193, 133, 255, 184, 168, 117, 255, 228, 205, 142, 255, 27, 22, 13, 255, 56, 33, 22, 255, 233, 236, 236, 255, 155, 34, 26, 255, 245, 246, 246, 255, 191, 37, 41, 255, 116, 35, 3, 255, 225, 228, 229, 255, 155, 34, 26, 255, 250, 250, 250, 255, 56, 33, 22, 255, 75, 43, 24, 255, 75, 43, 24, 255, 56, 33, 22, 255, 56, 33, 22, 255, 27, 22, 13, 255, 174, 159, 118, 255, 228, 205, 142, 255, 239, 241, 242, 255, 155, 34, 26, 255, 219, 224, 225, 255, 116, 35, 3, 255, 155, 34, 26, 255, 245, 246, 246, 255, 191, 37, 41, 255, 209, 215, 216, 255, 184, 168, 117, 255, 215, 193, 133, 255, 137, 103, 39, 255, 200, 183, 122, 255, 215, 193, 133, 255, 215, 193, 133, 255, 165, 148, 103, 255, 228, 205, 142, 255, 214, 219, 220, 255, 155, 34, 26, 255, 220, 225, 225, 255, 250, 250, 250, 255, 219, 224, 225, 255, 209, 215, 216, 255, 155, 34, 26, 255, 224, 228, 228, 255, 200, 183, 122, 255, 215, 193, 133, 255, 40, 30, 11, 255, 200, 183, 122, 255, 215, 193, 133, 255, 228, 205, 142, 255, 165, 148, 103, 255, 215, 193, 133, 255, 254, 254, 254, 255, 116, 35, 3, 255, 155, 34, 26, 255, 191, 37, 41, 255, 191, 37, 41, 255, 155, 34, 26, 255, 116, 35, 3, 255, 235, 238, 238, 255, 200, 183, 122, 255, 215, 193, 133, 255, 255, 255, 255, 255, 228, 205, 142, 255, 200, 183, 122, 255, 228, 205, 142, 255, 165, 148, 103, 255, 215, 193, 133, 255, 215, 193, 133, 255, 224, 228, 228, 255, 254, 254, 254, 255, 254, 254, 254, 255, 243, 244, 245, 255, 240, 242, 242, 255, 250, 250, 250, 255, 200, 183, 122, 255, 200, 183, 122, 255, 216, 216, 216, 255, 255, 255, 255, 255, 216, 216, 216, 255, 200, 183, 122, 255, 215, 193, 133, 255, 158, 139, 97, 255, 174, 159, 118, 255, 165, 148, 103, 255, 165, 148, 103, 255, 158, 139, 97, 255, 158, 139, 97, 255, 165, 148, 103, 255, 158, 139, 97, 255, 158, 139, 97, 255, 165, 148, 103, 255, 165, 148, 103, 255, 255, 255, 255, 255, 216, 216, 216, 255, 198, 198, 198, 255, 158, 139, 97, 255, 158, 139, 97, 255, 165, 148, 103, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 228, 205, 142, 255, 174, 159, 118, 255, 228, 205, 142, 255, 228, 205, 142, 255, 198, 198, 198, 255, 174, 159, 118, 255, 198, 198, 198, 255, 174, 159, 118, 255, 228, 205, 142, 255, 158, 139, 97, 255, 215, 193, 133, 255, 184, 168, 117, 255, 215, 193, 133, 255, 158, 139, 97, 255, 215, 193, 133, 255, 184, 168, 117, 255, 215, 193, 133, 255, 174, 159, 118, 255, 215, 193, 133, 255, 215, 193, 133, 255, 184, 168, 117, 255, 158, 139, 97, 255, 174, 159, 118, 255, 184, 168, 117, 255, 215, 193, 133, 255, 158, 139, 97, 255, 215, 193, 133, 255, 200, 183, 122, 255, 215, 193, 133, 255, 158, 139, 97, 255, 184, 168, 117, 255, 174, 159, 118, 255, 174, 159, 118, 255, 165, 148, 103, 255, 215, 193, 133, 255, 215, 193, 133, 255, 200, 183, 122, 255, 158, 139, 97, 255, 200, 183, 122, 255, 184, 168, 117, 255, 174, 159, 118, 255]",
		cartographerTableTop: "[70, 45, 21, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 79, 50, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 58, 36, 17, 255, 58, 36, 17, 255, 62, 41, 18, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 62, 41, 18, 255, 62, 41, 18, 255, 79, 50, 24, 255, 70, 45, 21, 255, 197, 197, 197, 255, 197, 197, 197, 255, 171, 172, 171, 255, 156, 156, 156, 255, 79, 50, 24, 255, 70, 45, 21, 255, 70, 45, 21, 255, 70, 45, 21, 255, 88, 54, 24, 255, 188, 161, 96, 255, 188, 161, 96, 255, 188, 161, 96, 255, 133, 110, 54, 255, 58, 36, 17, 255, 58, 36, 17, 255, 41, 26, 12, 255, 197, 197, 197, 255, 75, 43, 24, 255, 190, 38, 51, 255, 114, 121, 110, 255, 41, 26, 12, 255, 41, 26, 12, 255, 88, 54, 24, 255, 188, 161, 96, 255, 188, 161, 96, 255, 249, 232, 191, 255, 252, 252, 242, 255, 249, 232, 191, 255, 188, 161, 96, 255, 41, 26, 12, 255, 79, 50, 24, 255, 58, 36, 17, 255, 171, 172, 171, 255, 190, 38, 51, 255, 56, 33, 22, 255, 156, 156, 156, 255, 88, 54, 24, 255, 58, 36, 17, 255, 188, 161, 96, 255, 249, 232, 191, 255, 252, 252, 242, 255, 252, 252, 242, 255, 190, 38, 51, 255, 252, 252, 242, 255, 133, 110, 54, 255, 70, 45, 21, 255, 79, 50, 24, 255, 70, 45, 21, 255, 104, 104, 104, 255, 156, 156, 156, 255, 114, 121, 110, 255, 104, 104, 104, 255, 62, 41, 18, 255, 58, 36, 17, 255, 188, 161, 96, 255, 249, 232, 191, 255, 188, 161, 96, 255, 252, 252, 242, 255, 252, 252, 242, 255, 249, 232, 191, 255, 133, 110, 54, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 58, 36, 17, 255, 188, 161, 96, 255, 252, 252, 242, 255, 252, 252, 242, 255, 252, 252, 242, 255, 252, 252, 242, 255, 252, 252, 242, 255, 133, 110, 54, 255, 79, 50, 24, 255, 41, 26, 12, 255, 41, 26, 12, 255, 48, 30, 14, 255, 41, 26, 12, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 188, 161, 96, 255, 252, 252, 242, 255, 188, 161, 96, 255, 252, 252, 242, 255, 249, 232, 191, 255, 252, 252, 242, 255, 133, 110, 54, 255, 48, 30, 14, 255, 70, 45, 21, 255, 62, 41, 18, 255, 62, 41, 18, 255, 70, 45, 21, 255, 70, 45, 21, 255, 70, 45, 21, 255, 88, 54, 24, 255, 88, 54, 24, 255, 188, 161, 96, 255, 252, 252, 242, 255, 249, 232, 191, 255, 252, 252, 242, 255, 133, 110, 54, 255, 249, 232, 191, 255, 133, 110, 54, 255, 58, 36, 17, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 62, 41, 18, 255, 188, 161, 96, 255, 249, 232, 191, 255, 249, 232, 191, 255, 249, 232, 191, 255, 249, 232, 191, 255, 249, 232, 191, 255, 133, 110, 54, 255, 58, 36, 17, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 41, 26, 12, 255, 48, 30, 14, 255, 48, 30, 14, 255, 88, 54, 24, 255, 79, 50, 24, 255, 188, 161, 96, 255, 249, 232, 191, 255, 249, 232, 191, 255, 249, 232, 191, 255, 188, 161, 96, 255, 133, 110, 54, 255, 88, 54, 24, 255, 62, 41, 18, 255, 54, 54, 216, 255, 0, 104, 0, 255, 0, 85, 0, 255, 63, 63, 250, 255, 44, 44, 176, 255, 48, 30, 14, 255, 41, 26, 12, 255, 48, 30, 14, 255, 88, 54, 24, 255, 133, 110, 54, 255, 133, 110, 54, 255, 133, 110, 54, 255, 88, 54, 24, 255, 48, 30, 14, 255, 41, 26, 12, 255, 41, 26, 12, 255, 44, 44, 176, 255, 0, 104, 0, 255, 107, 150, 47, 255, 87, 123, 38, 255, 63, 63, 250, 255, 41, 26, 12, 255, 79, 50, 24, 255, 58, 36, 17, 255, 88, 54, 24, 255, 88, 54, 24, 255, 70, 45, 21, 255, 58, 36, 17, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 54, 54, 216, 255, 63, 63, 250, 255, 87, 123, 38, 255, 124, 175, 55, 255, 87, 123, 38, 255, 41, 26, 12, 255, 70, 45, 21, 255, 58, 36, 17, 255, 62, 41, 18, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 62, 41, 18, 255, 62, 41, 18, 255, 70, 45, 21, 255, 63, 63, 250, 255, 63, 63, 250, 255, 63, 63, 250, 255, 0, 104, 0, 255, 0, 85, 0, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 88, 54, 24, 255, 88, 54, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 0, 85, 0, 255, 0, 85, 0, 255, 63, 63, 250, 255, 63, 63, 250, 255, 0, 104, 0, 255, 48, 30, 14, 255, 58, 36, 17, 255, 58, 36, 17, 255, 58, 36, 17, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 41, 26, 12, 255, 48, 30, 14, 255, 41, 26, 12, 255, 41, 26, 12, 255]",
		cartographerTableSide: "[0, 85, 0, 255, 63, 63, 250, 255, 63, 63, 250, 255, 54, 54, 216, 255, 44, 44, 176, 255, 58, 36, 17, 255, 111, 69, 32, 255, 88, 54, 24, 255, 111, 69, 32, 255, 111, 69, 32, 255, 111, 69, 32, 255, 88, 54, 24, 255, 111, 69, 32, 255, 111, 69, 32, 255, 111, 69, 32, 255, 88, 54, 24, 255, 0, 122, 0, 255, 209, 197, 137, 255, 171, 161, 113, 255, 63, 63, 250, 255, 54, 54, 216, 255, 48, 30, 14, 255, 79, 50, 24, 255, 41, 26, 12, 255, 62, 41, 18, 255, 79, 50, 24, 255, 79, 50, 24, 255, 41, 26, 12, 255, 62, 41, 18, 255, 70, 45, 21, 255, 79, 50, 24, 255, 41, 26, 12, 255, 0, 104, 0, 255, 0, 122, 0, 255, 242, 228, 160, 255, 209, 197, 137, 255, 63, 63, 250, 255, 58, 36, 17, 255, 70, 45, 21, 255, 48, 30, 14, 255, 62, 41, 18, 255, 79, 50, 24, 255, 88, 54, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 41, 26, 12, 255, 63, 63, 250, 255, 0, 85, 0, 255, 209, 197, 137, 255, 171, 161, 113, 255, 63, 63, 250, 255, 58, 36, 17, 255, 79, 50, 24, 255, 41, 26, 12, 255, 70, 45, 21, 255, 79, 50, 24, 255, 88, 54, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 41, 26, 12, 255, 54, 54, 216, 255, 63, 63, 250, 255, 63, 63, 250, 255, 63, 63, 250, 255, 44, 44, 176, 255, 48, 30, 14, 255, 79, 50, 24, 255, 48, 30, 14, 255, 70, 45, 21, 255, 79, 50, 24, 255, 88, 54, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 48, 30, 14, 255, 41, 26, 12, 255, 117, 40, 2, 255, 253, 245, 95, 255, 220, 150, 19, 255, 41, 26, 12, 255, 48, 30, 14, 255, 79, 50, 24, 255, 48, 30, 14, 255, 70, 45, 21, 255, 79, 50, 24, 255, 88, 54, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 48, 30, 14, 255, 111, 69, 32, 255, 111, 69, 32, 255, 111, 69, 32, 255, 88, 54, 24, 255, 111, 69, 32, 255, 111, 69, 32, 255, 79, 50, 24, 255, 48, 30, 14, 255, 88, 54, 24, 255, 70, 45, 21, 255, 88, 54, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 58, 36, 17, 255, 88, 54, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 41, 26, 12, 255, 58, 36, 17, 255, 58, 36, 17, 255, 58, 36, 17, 255, 41, 26, 12, 255, 58, 36, 17, 255, 58, 36, 17, 255, 58, 36, 17, 255, 41, 26, 12, 255, 58, 36, 17, 255, 58, 36, 17, 255, 62, 41, 18, 255, 58, 36, 17, 255, 79, 50, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 58, 36, 17, 255, 62, 41, 18, 255, 62, 41, 18, 255, 62, 41, 18, 255, 62, 41, 18, 255, 62, 41, 18, 255, 62, 41, 18, 255, 62, 41, 18, 255, 58, 36, 17, 255, 88, 54, 24, 255, 62, 41, 18, 255, 88, 54, 24, 255, 58, 36, 17, 255, 88, 54, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 48, 30, 14, 255, 79, 50, 24, 255, 79, 50, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 58, 36, 17, 255, 48, 30, 14, 255, 88, 54, 24, 255, 79, 50, 24, 255, 88, 54, 24, 255, 48, 30, 14, 255, 88, 54, 24, 255, 70, 45, 21, 255, 88, 54, 24, 255, 41, 26, 12, 255, 111, 69, 32, 255, 111, 69, 32, 255, 79, 50, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 62, 41, 18, 255, 41, 26, 12, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 70, 45, 21, 255, 88, 54, 24, 255, 48, 30, 14, 255, 88, 54, 24, 255, 111, 69, 32, 255, 79, 50, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 79, 50, 24, 255, 58, 36, 17, 255, 48, 30, 14, 255, 58, 36, 17, 255, 79, 50, 24, 255, 79, 50, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 79, 50, 24, 255, 88, 54, 24, 255, 48, 30, 14, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 62, 41, 18, 255, 48, 30, 14, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 79, 50, 24, 255, 88, 54, 24, 255, 48, 30, 14, 255, 58, 36, 17, 255, 58, 36, 17, 255, 58, 36, 17, 255, 58, 36, 17, 255, 58, 36, 17, 255, 58, 36, 17, 255, 62, 41, 18, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 88, 54, 24, 255, 58, 36, 17, 255, 88, 54, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 88, 54, 24, 255, 79, 50, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 41, 26, 12, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 41, 26, 12, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 41, 26, 12, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 41, 26, 12, 255]",
		cartographerTableFront: "[88, 54, 24, 255, 111, 69, 32, 255, 111, 69, 32, 255, 111, 69, 32, 255, 88, 54, 24, 255, 111, 69, 32, 255, 111, 69, 32, 255, 111, 69, 32, 255, 88, 54, 24, 255, 111, 69, 32, 255, 111, 69, 32, 255, 111, 69, 32, 255, 88, 54, 24, 255, 111, 69, 32, 255, 111, 69, 32, 255, 111, 69, 32, 255, 41, 26, 12, 255, 79, 50, 24, 255, 70, 45, 21, 255, 62, 41, 18, 255, 41, 26, 12, 255, 79, 50, 24, 255, 79, 50, 24, 255, 62, 41, 18, 255, 41, 26, 12, 255, 79, 50, 24, 255, 79, 50, 24, 255, 88, 54, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 41, 26, 12, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 41, 26, 12, 255, 88, 54, 24, 255, 79, 50, 24, 255, 62, 41, 18, 255, 48, 30, 14, 255, 70, 45, 21, 255, 79, 50, 24, 255, 62, 41, 18, 255, 48, 30, 14, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 41, 26, 12, 255, 88, 54, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 41, 26, 12, 255, 79, 50, 24, 255, 70, 45, 21, 255, 88, 54, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 41, 26, 12, 255, 88, 54, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 88, 54, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 48, 30, 14, 255, 88, 54, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 48, 30, 14, 255, 79, 50, 24, 255, 70, 45, 21, 255, 88, 54, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 88, 54, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 41, 26, 12, 255, 88, 54, 24, 255, 70, 45, 21, 255, 88, 54, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 88, 54, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 70, 45, 21, 255, 88, 54, 24, 255, 58, 36, 17, 255, 62, 41, 18, 255, 58, 36, 17, 255, 58, 36, 17, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 88, 54, 24, 255, 48, 30, 14, 255, 58, 36, 17, 255, 58, 36, 17, 255, 58, 36, 17, 255, 41, 26, 12, 255, 70, 45, 21, 255, 79, 50, 24, 255, 88, 54, 24, 255, 58, 36, 17, 255, 88, 54, 24, 255, 62, 41, 18, 255, 88, 54, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 48, 30, 14, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 48, 30, 14, 255, 88, 54, 24, 255, 79, 50, 24, 255, 88, 54, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 48, 30, 14, 255, 70, 45, 21, 255, 79, 50, 24, 255, 88, 54, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 58, 36, 17, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 41, 26, 12, 255, 88, 54, 24, 255, 70, 45, 21, 255, 88, 54, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 79, 50, 24, 255, 58, 36, 17, 255, 58, 36, 17, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 48, 30, 14, 255, 70, 45, 21, 255, 79, 50, 24, 255, 79, 50, 24, 255, 48, 30, 14, 255, 88, 54, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 79, 50, 24, 255, 70, 45, 21, 255, 48, 30, 14, 255, 79, 50, 24, 255, 70, 45, 21, 255, 79, 50, 24, 255, 48, 30, 14, 255, 70, 45, 21, 255, 79, 50, 24, 255, 70, 45, 21, 255, 41, 26, 12, 255, 88, 54, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 48, 30, 14, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 58, 36, 17, 255, 62, 41, 18, 255, 79, 50, 24, 255, 70, 45, 21, 255, 41, 26, 12, 255, 88, 54, 24, 255, 79, 50, 24, 255, 79, 50, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 41, 26, 12, 255, 79, 50, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 58, 36, 17, 255, 79, 50, 24, 255, 79, 50, 24, 255, 62, 41, 18, 255, 41, 26, 12, 255, 88, 54, 24, 255, 62, 41, 18, 255, 79, 50, 24, 255, 41, 26, 12, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 41, 26, 12, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 41, 26, 12, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255, 41, 26, 12, 255, 48, 30, 14, 255, 48, 30, 14, 255, 48, 30, 14, 255]",
		hayBlockSide: "[138, 115, 32, 255, 191, 171, 49, 255, 148, 128, 30, 255, 191, 171, 49, 255, 138, 115, 32, 255, 203, 182, 48, 255, 148, 128, 30, 255, 191, 171, 49, 255, 148, 128, 30, 255, 191, 171, 49, 255, 171, 146, 37, 255, 191, 171, 49, 255, 148, 128, 30, 255, 191, 171, 49, 255, 171, 146, 37, 255, 203, 182, 48, 255, 148, 128, 30, 255, 191, 171, 49, 255, 148, 128, 30, 255, 191, 171, 49, 255, 148, 128, 30, 255, 203, 182, 48, 255, 148, 128, 30, 255, 191, 171, 49, 255, 148, 128, 30, 255, 171, 146, 37, 255, 148, 128, 30, 255, 191, 171, 49, 255, 171, 146, 37, 255, 191, 171, 49, 255, 138, 115, 32, 255, 171, 146, 37, 255, 138, 115, 32, 255, 148, 128, 30, 255, 171, 146, 37, 255, 191, 171, 49, 255, 138, 115, 32, 255, 191, 171, 49, 255, 148, 128, 30, 255, 171, 146, 37, 255, 138, 115, 32, 255, 148, 128, 30, 255, 138, 115, 32, 255, 171, 146, 37, 255, 138, 115, 32, 255, 171, 146, 37, 255, 171, 146, 37, 255, 171, 146, 37, 255, 165, 73, 44, 255, 164, 81, 43, 255, 146, 65, 35, 255, 164, 81, 43, 255, 164, 81, 43, 255, 164, 81, 43, 255, 146, 65, 35, 255, 146, 65, 35, 255, 146, 65, 35, 255, 135, 53, 28, 255, 146, 65, 35, 255, 164, 81, 43, 255, 164, 81, 43, 255, 164, 81, 43, 255, 146, 65, 35, 255, 164, 81, 43, 255, 148, 128, 30, 255, 171, 146, 37, 255, 148, 128, 30, 255, 171, 146, 37, 255, 138, 115, 32, 255, 171, 146, 37, 255, 148, 128, 30, 255, 171, 146, 37, 255, 148, 128, 30, 255, 171, 146, 37, 255, 148, 128, 30, 255, 171, 146, 37, 255, 138, 115, 32, 255, 171, 146, 37, 255, 138, 115, 32, 255, 148, 128, 30, 255, 148, 128, 30, 255, 191, 171, 49, 255, 171, 146, 37, 255, 191, 171, 49, 255, 148, 128, 30, 255, 191, 171, 49, 255, 138, 115, 32, 255, 203, 182, 48, 255, 138, 115, 32, 255, 171, 146, 37, 255, 148, 128, 30, 255, 171, 146, 37, 255, 148, 128, 30, 255, 171, 146, 37, 255, 138, 115, 32, 255, 171, 146, 37, 255, 171, 146, 37, 255, 191, 171, 49, 255, 171, 146, 37, 255, 203, 182, 48, 255, 148, 128, 30, 255, 191, 171, 49, 255, 148, 128, 30, 255, 203, 182, 48, 255, 171, 146, 37, 255, 191, 171, 49, 255, 171, 146, 37, 255, 203, 182, 48, 255, 148, 128, 30, 255, 171, 146, 37, 255, 148, 128, 30, 255, 191, 171, 49, 255, 171, 146, 37, 255, 191, 171, 49, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 148, 128, 30, 255, 191, 171, 49, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 191, 171, 49, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 148, 128, 30, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 191, 171, 49, 255, 171, 146, 37, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 148, 128, 30, 255, 191, 171, 49, 255, 138, 115, 32, 255, 203, 182, 48, 255, 148, 128, 30, 255, 191, 171, 49, 255, 148, 128, 30, 255, 171, 146, 37, 255, 148, 128, 30, 255, 171, 146, 37, 255, 171, 146, 37, 255, 148, 128, 30, 255, 148, 128, 30, 255, 191, 171, 49, 255, 138, 115, 32, 255, 191, 171, 49, 255, 171, 146, 37, 255, 191, 171, 49, 255, 146, 65, 35, 255, 146, 65, 35, 255, 164, 81, 43, 255, 164, 81, 43, 255, 165, 73, 44, 255, 146, 65, 35, 255, 165, 73, 44, 255, 164, 81, 43, 255, 165, 73, 44, 255, 146, 65, 35, 255, 146, 65, 35, 255, 164, 81, 43, 255, 164, 81, 43, 255, 164, 81, 43, 255, 146, 65, 35, 255, 164, 81, 43, 255, 138, 115, 32, 255, 148, 128, 30, 255, 148, 128, 30, 255, 138, 115, 32, 255, 138, 115, 32, 255, 138, 115, 32, 255, 138, 115, 32, 255, 148, 128, 30, 255, 138, 115, 32, 255, 148, 128, 30, 255, 148, 128, 30, 255, 171, 146, 37, 255, 138, 115, 32, 255, 148, 128, 30, 255, 138, 115, 32, 255, 148, 128, 30, 255, 138, 115, 32, 255, 171, 146, 37, 255, 138, 115, 32, 255, 138, 115, 32, 255, 148, 128, 30, 255, 171, 146, 37, 255, 138, 115, 32, 255, 171, 146, 37, 255, 138, 115, 32, 255, 171, 146, 37, 255, 148, 128, 30, 255, 148, 128, 30, 255, 138, 115, 32, 255, 148, 128, 30, 255, 138, 115, 32, 255, 171, 146, 37, 255, 148, 128, 30, 255, 171, 146, 37, 255, 138, 115, 32, 255, 171, 146, 37, 255, 148, 128, 30, 255, 191, 171, 49, 255, 138, 115, 32, 255, 191, 171, 49, 255, 148, 128, 30, 255, 191, 171, 49, 255, 148, 128, 30, 255, 171, 146, 37, 255, 138, 115, 32, 255, 171, 146, 37, 255, 138, 115, 32, 255, 203, 182, 48, 255, 138, 115, 32, 255, 171, 146, 37, 255, 148, 128, 30, 255, 191, 171, 49, 255, 138, 115, 32, 255, 203, 182, 48, 255, 148, 128, 30, 255, 191, 171, 49, 255, 138, 115, 32, 255, 203, 182, 48, 255, 171, 146, 37, 255, 203, 182, 48, 255, 148, 128, 30, 255, 203, 182, 48, 255, 148, 128, 30, 255, 203, 182, 48, 255]",
		hayBlockTop: "[189, 165, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 148, 125, 16, 255, 139, 113, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 148, 125, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 148, 125, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 189, 165, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 148, 125, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 205, 178, 8, 255, 172, 141, 8, 255, 189, 165, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 205, 178, 8, 255, 189, 165, 16, 255, 172, 141, 8, 255, 189, 165, 16, 255, 139, 113, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 139, 113, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 189, 165, 16, 255, 139, 113, 16, 255, 205, 178, 8, 255, 148, 125, 16, 255, 189, 165, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 205, 178, 8, 255, 172, 141, 8, 255, 139, 113, 16, 255, 148, 125, 16, 255, 148, 125, 16, 255, 139, 113, 16, 255, 148, 125, 16, 255, 148, 125, 16, 255, 189, 165, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 139, 113, 16, 255, 189, 165, 16, 255, 139, 113, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 205, 178, 8, 255, 189, 165, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 205, 178, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 189, 165, 16, 255, 205, 178, 8, 255, 148, 125, 16, 255, 189, 165, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 205, 178, 8, 255, 189, 165, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 189, 165, 16, 255, 148, 125, 16, 255, 139, 113, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 148, 125, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 205, 178, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 139, 113, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 205, 178, 8, 255, 172, 141, 8, 255, 189, 165, 16, 255, 189, 165, 16, 255, 205, 178, 8, 255, 189, 165, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 205, 178, 8, 255, 189, 165, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 148, 125, 16, 255, 139, 113, 16, 255, 139, 113, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 205, 178, 8, 255, 189, 165, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 205, 178, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 139, 113, 16, 255, 139, 113, 16, 255, 189, 165, 16, 255, 139, 113, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 205, 178, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 189, 165, 16, 255, 172, 141, 8, 255, 205, 178, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 205, 178, 8, 255, 189, 165, 16, 255, 139, 113, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 148, 125, 16, 255, 148, 125, 16, 255, 189, 165, 16, 255, 139, 113, 16, 255, 189, 165, 16, 255, 148, 125, 16, 255, 139, 113, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 205, 178, 8, 255, 148, 125, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 189, 165, 16, 255, 148, 125, 16, 255, 148, 125, 16, 255, 148, 125, 16, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 172, 141, 8, 255, 189, 165, 16, 255, 205, 178, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 172, 141, 8, 255, 189, 165, 16, 255, 148, 125, 16, 255, 189, 165, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 148, 125, 16, 255, 139, 113, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 139, 113, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 172, 141, 8, 255, 148, 125, 16, 255, 148, 125, 16, 255, 139, 113, 16, 255, 189, 165, 16, 255]",
		driedKelpBottom: "[24, 29, 20, 16, 20, 14, 24, 29, 20, 44, 56, 32, 44, 56, 32, 35, 47, 23, 24, 29, 20, 44, 56, 32, 153, 150, 126, 35, 47, 23, 24, 29, 20, 24, 29, 20, 24, 29, 20, 24, 29, 20, 35, 47, 23, 44, 56, 32, 35, 47, 23, 24, 29, 20, 24, 29, 20, 64, 74, 56, 44, 56, 32, 35, 47, 23, 24, 29, 20, 44, 56, 32, 153, 150, 126, 35, 47, 23, 24, 29, 20, 24, 29, 20, 35, 47, 23, 35, 47, 23, 35, 47, 23, 64, 74, 56, 44, 56, 32, 24, 29, 20, 24, 29, 20, 44, 56, 32, 64, 74, 56, 35, 47, 23, 24, 29, 20, 44, 56, 32, 144, 142, 118, 35, 47, 23, 24, 29, 20, 24, 29, 20, 35, 47, 23, 44, 56, 32, 35, 47, 23, 35, 47, 23, 44, 56, 32, 35, 47, 23, 24, 29, 20, 35, 47, 23, 64, 74, 56, 35, 47, 23, 35, 47, 23, 44, 56, 32, 144, 142, 118, 29, 39, 18, 24, 29, 20, 35, 47, 23, 35, 47, 23, 44, 56, 32, 35, 47, 23, 35, 47, 23, 35, 47, 23, 35, 47, 23, 24, 29, 20, 44, 56, 32, 64, 74, 56, 35, 47, 23, 24, 29, 20, 44, 56, 32, 137, 135, 113, 29, 39, 18, 24, 29, 20, 35, 47, 23, 44, 56, 32, 44, 56, 32, 35, 47, 23, 35, 47, 23, 44, 56, 32, 35, 47, 23, 35, 47, 23, 44, 56, 32, 44, 56, 32, 35, 47, 23, 24, 29, 20, 44, 56, 32, 137, 135, 113, 29, 39, 18, 24, 29, 20, 44, 56, 32, 44, 56, 32, 64, 74, 56, 35, 47, 23, 44, 56, 32, 64, 74, 56, 35, 47, 23, 35, 47, 23, 44, 56, 32, 35, 47, 23, 35, 47, 23, 21, 24, 17, 44, 56, 32, 137, 135, 113, 29, 39, 18, 21, 24, 17, 36, 45, 27, 36, 45, 27, 51, 61, 45, 29, 39, 18, 36, 45, 27, 51, 61, 45, 29, 39, 18, 29, 39, 18, 51, 61, 45, 29, 39, 18, 29, 39, 18, 24, 29, 20, 35, 47, 23, 153, 150, 126, 29, 39, 18, 24, 29, 20, 44, 56, 32, 64, 74, 56, 64, 74, 56, 24, 29, 20, 44, 56, 32, 153, 150, 126, 153, 150, 126, 153, 150, 126, 137, 135, 113, 137, 135, 113, 128, 126, 105, 128, 126, 105, 128, 126, 105, 144, 142, 118, 144, 142, 118, 137, 135, 113, 137, 135, 113, 144, 142, 118, 144, 142, 118, 144, 142, 118, 153, 150, 126, 64, 74, 56, 44, 56, 32, 35, 47, 23, 44, 56, 32, 44, 56, 32, 29, 39, 18, 21, 24, 17, 21, 24, 17, 153, 150, 126, 29, 39, 18, 24, 29, 20, 64, 74, 56, 64, 74, 56, 44, 56, 32, 24, 29, 20, 44, 56, 32, 44, 56, 32, 44, 56, 32, 35, 47, 23, 44, 56, 32, 44, 56, 32, 24, 29, 20, 24, 29, 20, 21, 24, 17, 144, 142, 118, 35, 47, 23, 24, 29, 20, 64, 74, 56, 64, 74, 56, 24, 29, 20, 24, 29, 20, 44, 56, 32, 24, 29, 20, 44, 56, 32, 44, 56, 32, 44, 56, 32, 44, 56, 32, 24, 29, 20, 24, 29, 20, 21, 24, 17, 144, 142, 118, 35, 47, 23, 35, 47, 23, 64, 74, 56, 44, 56, 32, 24, 29, 20, 35, 47, 23, 44, 56, 32, 24, 29, 20, 44, 56, 32, 44, 56, 32, 64, 74, 56, 44, 56, 32, 24, 29, 20, 24, 29, 20, 29, 39, 18, 144, 142, 118, 35, 47, 23, 24, 29, 20, 64, 74, 56, 44, 56, 32, 35, 47, 23, 35, 47, 23, 44, 56, 32, 24, 29, 20, 44, 56, 32, 44, 56, 32, 64, 74, 56, 44, 56, 32, 24, 29, 20, 24, 29, 20, 29, 39, 18, 153, 150, 126, 35, 47, 23, 24, 29, 20, 64, 74, 56, 44, 56, 32, 35, 47, 23, 44, 56, 32, 44, 56, 32, 35, 47, 23, 44, 56, 32, 35, 47, 23, 64, 74, 56, 44, 56, 32, 40, 42, 29, 35, 47, 23, 29, 39, 18, 144, 142, 118, 35, 47, 23, 24, 29, 20, 44, 56, 32, 44, 56, 32, 35, 47, 23, 44, 56, 32, 44, 56, 32, 35, 47, 23, 44, 56, 32, 35, 47, 23, 64, 74, 56, 44, 56, 32, 44, 56, 32, 35, 47, 23, 29, 39, 18, 153, 150, 126, 35, 47, 23, 24, 29, 20, 44, 56, 32, 44, 56, 32, 35, 47, 23, 44, 56, 32, 44, 56, 32]",
		driedKelpTop: "[35, 47, 23, 255, 44, 56, 32, 255, 35, 47, 23, 255, 64, 74, 56, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 29, 39, 18, 255, 153, 150, 126, 255, 35, 47, 23, 255, 24, 29, 20, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 44, 56, 32, 255, 35, 47, 23, 255, 64, 74, 56, 255, 44, 56, 32, 255, 40, 42, 29, 255, 35, 47, 23, 255, 29, 39, 18, 255, 144, 142, 118, 255, 35, 47, 23, 255, 24, 29, 20, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 24, 29, 20, 255, 44, 56, 32, 255, 44, 56, 32, 255, 64, 74, 56, 255, 44, 56, 32, 255, 24, 29, 20, 255, 24, 29, 20, 255, 29, 39, 18, 255, 153, 150, 126, 255, 35, 47, 23, 255, 24, 29, 20, 255, 64, 74, 56, 255, 44, 56, 32, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 24, 29, 20, 255, 44, 56, 32, 255, 44, 56, 32, 255, 64, 74, 56, 255, 44, 56, 32, 255, 24, 29, 20, 255, 24, 29, 20, 255, 29, 39, 18, 255, 144, 142, 118, 255, 35, 47, 23, 255, 24, 29, 20, 255, 64, 74, 56, 255, 44, 56, 32, 255, 35, 47, 23, 255, 35, 47, 23, 255, 44, 56, 32, 255, 24, 29, 20, 255, 44, 56, 32, 255, 44, 56, 32, 255, 44, 56, 32, 255, 44, 56, 32, 255, 24, 29, 20, 255, 24, 29, 20, 255, 21, 24, 17, 255, 144, 142, 118, 255, 35, 47, 23, 255, 35, 47, 23, 255, 64, 74, 56, 255, 44, 56, 32, 255, 24, 29, 20, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 24, 29, 20, 255, 24, 29, 20, 255, 21, 24, 17, 255, 144, 142, 118, 255, 35, 47, 23, 255, 24, 29, 20, 255, 64, 74, 56, 255, 64, 74, 56, 255, 24, 29, 20, 255, 24, 29, 20, 255, 44, 56, 32, 255, 64, 74, 56, 255, 44, 56, 32, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 29, 39, 18, 255, 21, 24, 17, 255, 21, 24, 17, 255, 153, 150, 126, 255, 29, 39, 18, 255, 24, 29, 20, 255, 64, 74, 56, 255, 64, 74, 56, 255, 44, 56, 32, 255, 24, 29, 20, 255, 44, 56, 32, 255, 153, 150, 126, 255, 153, 150, 126, 255, 153, 150, 126, 255, 137, 135, 113, 255, 137, 135, 113, 255, 128, 126, 105, 255, 128, 126, 105, 255, 128, 126, 105, 255, 144, 142, 118, 255, 144, 142, 118, 255, 137, 135, 113, 255, 137, 135, 113, 255, 144, 142, 118, 255, 144, 142, 118, 255, 144, 142, 118, 255, 153, 150, 126, 255, 51, 61, 45, 255, 29, 39, 18, 255, 29, 39, 18, 255, 51, 61, 45, 255, 29, 39, 18, 255, 29, 39, 18, 255, 24, 29, 20, 255, 35, 47, 23, 255, 153, 150, 126, 255, 29, 39, 18, 255, 24, 29, 20, 255, 44, 56, 32, 255, 64, 74, 56, 255, 64, 74, 56, 255, 24, 29, 20, 255, 44, 56, 32, 255, 64, 74, 56, 255, 35, 47, 23, 255, 35, 47, 23, 255, 44, 56, 32, 255, 35, 47, 23, 255, 35, 47, 23, 255, 21, 24, 17, 255, 44, 56, 32, 255, 137, 135, 113, 255, 29, 39, 18, 255, 21, 24, 17, 255, 36, 45, 27, 255, 36, 45, 27, 255, 51, 61, 45, 255, 29, 39, 18, 255, 36, 45, 27, 255, 44, 56, 32, 255, 35, 47, 23, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 24, 29, 20, 255, 44, 56, 32, 255, 137, 135, 113, 255, 29, 39, 18, 255, 24, 29, 20, 255, 44, 56, 32, 255, 44, 56, 32, 255, 64, 74, 56, 255, 35, 47, 23, 255, 44, 56, 32, 255, 35, 47, 23, 255, 35, 47, 23, 255, 24, 29, 20, 255, 44, 56, 32, 255, 64, 74, 56, 255, 35, 47, 23, 255, 24, 29, 20, 255, 44, 56, 32, 255, 137, 135, 113, 255, 29, 39, 18, 255, 24, 29, 20, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 35, 47, 23, 255, 44, 56, 32, 255, 35, 47, 23, 255, 24, 29, 20, 255, 35, 47, 23, 255, 64, 74, 56, 255, 35, 47, 23, 255, 35, 47, 23, 255, 44, 56, 32, 255, 144, 142, 118, 255, 29, 39, 18, 255, 24, 29, 20, 255, 35, 47, 23, 255, 35, 47, 23, 255, 44, 56, 32, 255, 35, 47, 23, 255, 35, 47, 23, 255, 44, 56, 32, 255, 24, 29, 20, 255, 24, 29, 20, 255, 44, 56, 32, 255, 64, 74, 56, 255, 35, 47, 23, 255, 24, 29, 20, 255, 44, 56, 32, 255, 144, 142, 118, 255, 35, 47, 23, 255, 24, 29, 20, 255, 24, 29, 20, 255, 35, 47, 23, 255, 44, 56, 32, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 24, 29, 20, 255, 24, 29, 20, 255, 64, 74, 56, 255, 44, 56, 32, 255, 35, 47, 23, 255, 24, 29, 20, 255, 44, 56, 32, 255, 153, 150, 126, 255, 35, 47, 23, 255, 24, 29, 20, 255, 24, 29, 20, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 64, 74, 56, 255, 24, 29, 20, 255, 16, 20, 14, 255, 24, 29, 20, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 24, 29, 20, 255, 44, 56, 32, 255, 153, 150, 126, 255, 35, 47, 23, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 35, 47, 23, 255, 44, 56, 32, 255]",
		driedKelpSide: "[35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 41, 53, 29, 255, 41, 53, 29, 255, 44, 56, 32, 255, 144, 150, 128, 255, 19, 33, 19, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 24, 29, 20, 255, 24, 29, 20, 255, 35, 47, 23, 255, 41, 53, 29, 255, 41, 53, 29, 255, 40, 42, 29, 255, 24, 29, 20, 255, 144, 150, 128, 255, 19, 33, 19, 255, 24, 29, 20, 255, 19, 33, 19, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 19, 33, 19, 255, 35, 47, 23, 255, 41, 53, 29, 255, 41, 53, 29, 255, 41, 53, 29, 255, 35, 47, 23, 255, 41, 53, 29, 255, 41, 53, 29, 255, 144, 150, 128, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 19, 33, 19, 255, 19, 33, 19, 255, 19, 33, 19, 255, 35, 47, 23, 255, 19, 33, 19, 255, 19, 33, 19, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 19, 33, 19, 255, 129, 134, 115, 255, 32, 42, 22, 255, 19, 33, 19, 255, 19, 33, 19, 255, 24, 29, 20, 255, 24, 29, 20, 255, 19, 33, 19, 255, 24, 29, 20, 255, 24, 29, 20, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 44, 56, 32, 255, 129, 134, 115, 255, 19, 33, 19, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 44, 56, 32, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 32, 42, 22, 255, 129, 134, 115, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 35, 47, 23, 255, 44, 56, 32, 255, 41, 53, 29, 255, 32, 42, 22, 255, 32, 42, 22, 255, 35, 47, 23, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 129, 134, 115, 255, 32, 42, 22, 255, 32, 42, 22, 255, 35, 47, 23, 255, 24, 29, 20, 255, 32, 42, 22, 255, 32, 42, 22, 255, 44, 56, 32, 255, 44, 56, 32, 255, 24, 29, 20, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 19, 33, 19, 255, 19, 33, 19, 255, 24, 29, 20, 255, 129, 134, 115, 255, 24, 29, 20, 255, 32, 42, 22, 255, 32, 42, 22, 255, 35, 47, 23, 255, 19, 33, 19, 255, 19, 33, 19, 255, 19, 33, 19, 255, 24, 29, 20, 255, 35, 47, 23, 255, 41, 53, 29, 255, 41, 53, 29, 255, 41, 53, 29, 255, 41, 53, 29, 255, 19, 33, 19, 255, 19, 33, 19, 255, 129, 134, 115, 255, 19, 33, 19, 255, 41, 53, 29, 255, 41, 53, 29, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 41, 53, 29, 255, 35, 47, 23, 255, 24, 29, 20, 255, 44, 56, 32, 255, 44, 56, 32, 255, 41, 53, 29, 255, 32, 42, 22, 255, 32, 42, 22, 255, 21, 26, 19, 255, 144, 150, 128, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 32, 42, 22, 255, 32, 42, 22, 255, 44, 56, 32, 255, 44, 56, 32, 255, 41, 53, 29, 255, 41, 53, 29, 255, 35, 47, 23, 255, 144, 150, 128, 255, 32, 42, 22, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 41, 53, 29, 255, 41, 53, 29, 255, 41, 53, 29, 255, 24, 29, 20, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 41, 53, 29, 255, 41, 53, 29, 255, 144, 150, 128, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 41, 53, 29, 255, 41, 53, 29, 255, 41, 53, 29, 255, 19, 33, 19, 255, 19, 33, 19, 255, 41, 53, 29, 255, 41, 53, 29, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 44, 56, 32, 255, 44, 56, 32, 255, 144, 150, 128, 255, 19, 33, 19, 255, 35, 47, 23, 255, 41, 53, 29, 255, 41, 53, 29, 255, 41, 53, 29, 255, 35, 47, 23, 255, 35, 47, 23, 255, 35, 47, 23, 255, 19, 33, 19, 255, 19, 33, 19, 255, 19, 33, 19, 255, 24, 29, 20, 255, 19, 33, 19, 255, 19, 33, 19, 255, 24, 29, 20, 255, 129, 134, 115, 255, 19, 33, 19, 255, 32, 42, 22, 255, 32, 42, 22, 255, 32, 42, 22, 255, 41, 53, 29, 255, 41, 53, 29, 255, 35, 47, 23, 255, 19, 33, 19, 255, 41, 53, 29, 255, 41, 53, 29, 255, 35, 47, 23, 255, 35, 47, 23, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 129, 134, 115, 255, 27, 34, 21, 255, 32, 42, 22, 255, 32, 42, 22, 255, 35, 47, 23, 255, 32, 42, 22, 255, 35, 47, 23, 255, 44, 56, 32, 255, 44, 56, 32, 255, 21, 26, 19, 255, 32, 42, 22, 255, 32, 42, 22, 255, 19, 33, 19, 255, 19, 33, 19, 255, 19, 33, 19, 255, 24, 29, 20, 255, 129, 134, 115, 255, 19, 33, 19, 255, 19, 33, 19, 255, 24, 29, 20, 255, 24, 29, 20, 255, 24, 29, 20, 255, 19, 33, 19, 255, 19, 33, 19, 255, 24, 29, 20, 255]",
		barrelTop: "[128, 94, 54, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 128, 94, 54, 255, 153, 113, 64, 255, 102, 77, 40, 255, 107, 83, 50, 255, 107, 83, 50, 255, 107, 83, 50, 255, 102, 77, 40, 255, 128, 94, 54, 255, 107, 83, 50, 255, 107, 83, 50, 255, 107, 83, 50, 255, 102, 77, 40, 255, 128, 94, 54, 255, 107, 83, 50, 255, 102, 77, 40, 255, 102, 77, 40, 255, 153, 113, 64, 255, 153, 113, 64, 255, 107, 83, 50, 255, 107, 83, 50, 255, 107, 83, 50, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 128, 94, 54, 255, 107, 83, 50, 255, 107, 83, 50, 255, 107, 83, 50, 255, 139, 103, 60, 255, 139, 103, 60, 255, 107, 83, 50, 255, 107, 83, 50, 255, 128, 94, 54, 255, 139, 103, 60, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 153, 113, 64, 255, 128, 94, 54, 255, 107, 83, 50, 255, 107, 83, 50, 255, 153, 113, 64, 255, 153, 113, 64, 255, 107, 83, 50, 255, 128, 94, 54, 255, 153, 113, 64, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 107, 83, 50, 255, 153, 113, 64, 255, 153, 113, 64, 255, 107, 83, 50, 255, 139, 103, 60, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 128, 94, 54, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 102, 77, 40, 255, 153, 113, 64, 255, 153, 113, 64, 255, 102, 77, 40, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 128, 94, 54, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 107, 83, 50, 255, 153, 113, 64, 255, 153, 113, 64, 255, 107, 83, 50, 255, 139, 103, 60, 255, 122, 122, 122, 255, 91, 91, 91, 255, 128, 94, 54, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 128, 94, 54, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 107, 83, 50, 255, 153, 113, 64, 255, 153, 113, 64, 255, 107, 83, 50, 255, 139, 103, 60, 255, 122, 122, 122, 255, 122, 122, 122, 255, 128, 94, 54, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 128, 94, 54, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 102, 77, 40, 255, 153, 113, 64, 255, 153, 113, 64, 255, 102, 77, 40, 255, 153, 113, 64, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 107, 83, 50, 255, 153, 113, 64, 255, 153, 113, 64, 255, 107, 83, 50, 255, 107, 83, 50, 255, 128, 94, 54, 255, 153, 113, 64, 255, 128, 94, 54, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 153, 113, 64, 255, 128, 94, 54, 255, 107, 83, 50, 255, 107, 83, 50, 255, 153, 113, 64, 255, 153, 113, 64, 255, 107, 83, 50, 255, 107, 83, 50, 255, 107, 83, 50, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 128, 94, 54, 255, 107, 83, 50, 255, 107, 83, 50, 255, 107, 83, 50, 255, 153, 113, 64, 255, 139, 103, 60, 255, 102, 77, 40, 255, 107, 83, 50, 255, 107, 83, 50, 255, 102, 77, 40, 255, 102, 77, 40, 255, 128, 94, 54, 255, 107, 83, 50, 255, 102, 77, 40, 255, 128, 94, 54, 255, 102, 77, 40, 255, 102, 77, 40, 255, 107, 83, 50, 255, 107, 83, 50, 255, 102, 77, 40, 255, 139, 103, 60, 255, 128, 94, 54, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 128, 94, 54, 255]",
		barrelSide: "[153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 153, 113, 64, 255, 139, 103, 60, 255, 102, 77, 40, 255, 153, 113, 64, 255, 139, 103, 60, 255, 139, 103, 60, 255, 102, 77, 40, 255, 153, 113, 64, 255, 139, 103, 60, 255, 139, 103, 60, 255, 102, 77, 40, 255, 153, 113, 64, 255, 139, 103, 60, 255, 139, 103, 60, 255, 102, 77, 40, 255, 153, 113, 64, 255, 139, 103, 60, 255, 139, 103, 60, 255, 85, 58, 31, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 85, 58, 31, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 102, 77, 40, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 85, 58, 31, 255, 153, 113, 64, 255, 128, 94, 54, 255, 69, 63, 59, 255, 48, 44, 41, 255, 69, 63, 59, 255, 69, 63, 59, 255, 69, 63, 59, 255, 69, 63, 59, 255, 69, 63, 59, 255, 69, 63, 59, 255, 48, 44, 41, 255, 48, 44, 41, 255, 48, 44, 41, 255, 69, 63, 59, 255, 48, 44, 41, 255, 69, 63, 59, 255, 69, 63, 59, 255, 48, 44, 41, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 48, 44, 41, 255, 48, 44, 41, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 128, 94, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 102, 77, 40, 255, 128, 94, 54, 255, 120, 88, 54, 255, 139, 103, 60, 255, 102, 77, 40, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 85, 58, 31, 255, 139, 103, 60, 255, 139, 103, 60, 255, 153, 113, 64, 255, 102, 77, 40, 255, 139, 103, 60, 255, 139, 103, 60, 255, 153, 113, 64, 255, 85, 58, 31, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 107, 83, 50, 255, 153, 113, 64, 255, 139, 103, 60, 255, 139, 103, 60, 255, 102, 77, 40, 255, 153, 113, 64, 255, 139, 103, 60, 255, 153, 113, 64, 255, 107, 83, 50, 255, 139, 103, 60, 255, 128, 94, 54, 255, 153, 113, 64, 255, 107, 83, 50, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 102, 77, 40, 255, 153, 113, 64, 255, 128, 94, 54, 255, 139, 103, 60, 255, 107, 83, 50, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 107, 83, 50, 255, 153, 113, 64, 255, 128, 94, 54, 255, 139, 103, 60, 255, 85, 58, 31, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 85, 58, 31, 255, 153, 113, 64, 255, 120, 88, 54, 255, 139, 103, 60, 255, 107, 83, 50, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 85, 58, 31, 255, 153, 113, 64, 255, 128, 94, 54, 255, 139, 103, 60, 255, 85, 58, 31, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 85, 58, 31, 255, 128, 94, 54, 255, 120, 88, 54, 255, 128, 94, 54, 255, 85, 58, 31, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 85, 58, 31, 255, 153, 113, 64, 255, 120, 88, 54, 255, 139, 103, 60, 255, 102, 77, 40, 255, 139, 103, 60, 255, 139, 103, 60, 255, 48, 44, 41, 255, 48, 44, 41, 255, 48, 44, 41, 255, 69, 63, 59, 255, 69, 63, 59, 255, 69, 63, 59, 255, 69, 63, 59, 255, 48, 44, 41, 255, 69, 63, 59, 255, 48, 44, 41, 255, 48, 44, 41, 255, 48, 44, 41, 255, 48, 44, 41, 255, 69, 63, 59, 255, 48, 44, 41, 255, 48, 44, 41, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 48, 44, 41, 255, 48, 44, 41, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 40, 34, 28, 255, 128, 94, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 120, 88, 54, 255, 128, 94, 54, 255, 102, 77, 40, 255, 139, 103, 60, 255, 128, 94, 54, 255, 139, 103, 60, 255, 102, 77, 40, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 102, 77, 40, 255, 139, 103, 60, 255, 128, 94, 54, 255, 139, 103, 60, 255, 102, 77, 40, 255, 153, 113, 64, 255, 139, 103, 60, 255, 128, 94, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 102, 77, 40, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 128, 94, 54, 255]",
		barrelBottom: "[128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 85, 58, 31, 255, 107, 83, 50, 255, 107, 83, 50, 255, 85, 58, 31, 255, 102, 77, 40, 255, 107, 83, 50, 255, 120, 88, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 107, 83, 50, 255, 107, 83, 50, 255, 120, 88, 54, 255, 120, 88, 54, 255, 85, 58, 31, 255, 139, 103, 60, 255, 139, 103, 60, 255, 107, 83, 50, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 107, 83, 50, 255, 128, 94, 54, 255, 139, 103, 60, 255, 85, 58, 31, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 85, 58, 31, 255, 85, 58, 31, 255, 102, 77, 40, 255, 102, 77, 40, 255, 85, 58, 31, 255, 102, 77, 40, 255, 85, 58, 31, 255, 85, 58, 31, 255, 85, 58, 31, 255, 139, 103, 60, 255, 139, 103, 60, 255, 107, 83, 50, 255, 120, 88, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 102, 77, 40, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 128, 94, 54, 255, 107, 83, 50, 255, 139, 103, 60, 255, 128, 94, 54, 255, 120, 88, 54, 255, 139, 103, 60, 255, 128, 94, 54, 255, 120, 88, 54, 255, 128, 94, 54, 255, 120, 88, 54, 255, 102, 77, 40, 255, 120, 88, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 120, 88, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 120, 88, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 102, 77, 40, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 128, 94, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 85, 58, 31, 255, 102, 77, 40, 255, 85, 58, 31, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 85, 58, 31, 255, 139, 103, 60, 255, 128, 94, 54, 255, 107, 83, 50, 255, 120, 88, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 120, 88, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 120, 88, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 120, 88, 54, 255, 128, 94, 54, 255, 120, 88, 54, 255, 107, 83, 50, 255, 128, 94, 54, 255, 139, 103, 60, 255, 120, 88, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 120, 88, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 85, 58, 31, 255, 85, 58, 31, 255, 85, 58, 31, 255, 85, 58, 31, 255, 102, 77, 40, 255, 85, 58, 31, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 102, 77, 40, 255, 85, 58, 31, 255, 128, 94, 54, 255, 128, 94, 54, 255, 107, 83, 50, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 102, 77, 40, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 102, 77, 40, 255, 128, 94, 54, 255, 139, 103, 60, 255, 120, 88, 54, 255, 139, 103, 60, 255, 128, 94, 54, 255, 107, 83, 50, 255, 139, 103, 60, 255, 139, 103, 60, 255, 120, 88, 54, 255, 120, 88, 54, 255, 128, 94, 54, 255, 102, 77, 40, 255, 120, 88, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 120, 88, 54, 255, 107, 83, 50, 255, 139, 103, 60, 255, 128, 94, 54, 255, 85, 58, 31, 255, 120, 88, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 107, 83, 50, 255, 85, 58, 31, 255, 107, 83, 50, 255, 107, 83, 50, 255, 120, 88, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 120, 88, 54, 255, 85, 58, 31, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 139, 103, 60, 255, 139, 103, 60, 255, 139, 103, 60, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255, 128, 94, 54, 255]",
		ancientDebrisTop: "[65, 30, 21, 255, 65, 30, 21, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 74, 44, 35, 255, 65, 30, 21, 255, 51, 24, 16, 255, 65, 30, 21, 255, 93, 52, 44, 255, 149, 134, 126, 255, 93, 52, 44, 255, 126, 96, 89, 255, 51, 24, 16, 255, 126, 96, 89, 255, 149, 134, 126, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 93, 52, 44, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 74, 44, 35, 255, 74, 44, 35, 255, 65, 30, 21, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 149, 134, 126, 255, 149, 134, 126, 255, 101, 71, 64, 255, 93, 52, 44, 255, 149, 134, 126, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 74, 44, 35, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 74, 44, 35, 255, 101, 71, 64, 255, 74, 44, 35, 255, 74, 44, 35, 255, 65, 30, 21, 255, 149, 134, 126, 255, 51, 24, 16, 255, 74, 44, 35, 255, 93, 52, 44, 255, 74, 44, 35, 255, 65, 30, 21, 255, 65, 30, 21, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 126, 96, 89, 255, 101, 71, 64, 255, 51, 24, 16, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 93, 52, 44, 255, 74, 44, 35, 255, 126, 96, 89, 255, 101, 71, 64, 255, 51, 24, 16, 255, 101, 71, 64, 255, 149, 134, 126, 255, 126, 96, 89, 255, 74, 44, 35, 255, 65, 30, 21, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 93, 52, 44, 255, 101, 71, 64, 255, 65, 30, 21, 255, 93, 52, 44, 255, 51, 24, 16, 255, 149, 134, 126, 255, 65, 30, 21, 255, 65, 30, 21, 255, 126, 96, 89, 255, 51, 24, 16, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 65, 30, 21, 255, 126, 96, 89, 255, 65, 30, 21, 255, 74, 44, 35, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 126, 96, 89, 255, 51, 24, 16, 255, 65, 30, 21, 255, 149, 134, 126, 255, 51, 24, 16, 255, 149, 134, 126, 255, 74, 44, 35, 255, 149, 134, 126, 255, 65, 30, 21, 255, 74, 44, 35, 255, 74, 44, 35, 255, 65, 30, 21, 255, 149, 134, 126, 255, 51, 24, 16, 255, 149, 134, 126, 255, 74, 44, 35, 255, 101, 71, 64, 255, 74, 44, 35, 255, 126, 96, 89, 255, 126, 96, 89, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 126, 96, 89, 255, 74, 44, 35, 255, 65, 30, 21, 255, 126, 96, 89, 255, 65, 30, 21, 255, 149, 134, 126, 255, 65, 30, 21, 255, 126, 96, 89, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 65, 30, 21, 255, 65, 30, 21, 255, 93, 52, 44, 255, 51, 24, 16, 255, 149, 134, 126, 255, 74, 44, 35, 255, 65, 30, 21, 255, 149, 134, 126, 255, 51, 24, 16, 255, 126, 96, 89, 255, 74, 44, 35, 255, 65, 30, 21, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 101, 71, 64, 255, 126, 96, 89, 255, 93, 52, 44, 255, 74, 44, 35, 255, 74, 44, 35, 255, 149, 134, 126, 255, 74, 44, 35, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 101, 71, 64, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 65, 30, 21, 255, 74, 44, 35, 255, 65, 30, 21, 255, 65, 30, 21, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 126, 96, 89, 255, 74, 44, 35, 255, 51, 24, 16, 255, 149, 134, 126, 255, 51, 24, 16, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 149, 134, 126, 255, 101, 71, 64, 255, 93, 52, 44, 255, 93, 52, 44, 255, 126, 96, 89, 255, 93, 52, 44, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 65, 30, 21, 255, 65, 30, 21, 255, 51, 24, 16, 255, 51, 24, 16, 255, 51, 24, 16, 255, 51, 24, 16, 255, 65, 30, 21, 255, 65, 30, 21, 255, 74, 44, 35, 255, 74, 44, 35, 255, 101, 71, 64, 255, 149, 134, 126, 255, 51, 24, 16, 255, 65, 30, 21, 255, 93, 52, 44, 255, 126, 96, 89, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 101, 71, 64, 255, 65, 30, 21, 255, 51, 24, 16, 255, 65, 30, 21, 255, 149, 134, 126, 255, 65, 30, 21, 255, 93, 52, 44, 255, 65, 30, 21, 255, 101, 71, 64, 255, 149, 134, 126, 255, 93, 52, 44, 255, 101, 71, 64, 255, 126, 96, 89, 255, 101, 71, 64, 255, 101, 71, 64, 255, 74, 44, 35, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 65, 30, 21, 255, 126, 96, 89, 255]",
		ancientDebrisSide: "[93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 74, 44, 35, 255, 65, 30, 21, 255, 74, 44, 35, 255, 74, 44, 35, 255, 51, 24, 16, 255, 74, 44, 35, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 101, 71, 64, 255, 65, 30, 21, 255, 93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 65, 30, 21, 255, 74, 44, 35, 255, 93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 74, 44, 35, 255, 101, 71, 64, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 101, 71, 64, 255, 126, 96, 89, 255, 101, 71, 64, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 74, 44, 35, 255, 93, 52, 44, 255, 93, 52, 44, 255, 74, 44, 35, 255, 93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 65, 30, 21, 255, 93, 52, 44, 255, 101, 71, 64, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 101, 71, 64, 255, 74, 44, 35, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 74, 44, 35, 255, 74, 44, 35, 255, 93, 52, 44, 255, 65, 30, 21, 255, 51, 24, 16, 255, 65, 30, 21, 255, 126, 96, 89, 255, 126, 96, 89, 255, 101, 71, 64, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 65, 30, 21, 255, 93, 52, 44, 255, 51, 24, 16, 255, 74, 44, 35, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 65, 30, 21, 255, 51, 24, 16, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 74, 44, 35, 255, 93, 52, 44, 255, 74, 44, 35, 255, 65, 30, 21, 255, 51, 24, 16, 255, 126, 96, 89, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 74, 44, 35, 255, 74, 44, 35, 255, 93, 52, 44, 255, 74, 44, 35, 255, 93, 52, 44, 255, 74, 44, 35, 255, 74, 44, 35, 255, 65, 30, 21, 255, 51, 24, 16, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 51, 24, 16, 255, 74, 44, 35, 255, 74, 44, 35, 255, 74, 44, 35, 255, 74, 44, 35, 255, 74, 44, 35, 255, 74, 44, 35, 255, 65, 30, 21, 255, 65, 30, 21, 255, 101, 71, 64, 255, 93, 52, 44, 255, 101, 71, 64, 255, 93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 126, 96, 89, 255, 126, 96, 89, 255, 51, 24, 16, 255, 65, 30, 21, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 126, 96, 89, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 65, 30, 21, 255, 51, 24, 16, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 74, 44, 35, 255, 93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 65, 30, 21, 255, 51, 24, 16, 255, 74, 44, 35, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 101, 71, 64, 255, 74, 44, 35, 255, 74, 44, 35, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 65, 30, 21, 255, 65, 30, 21, 255, 65, 30, 21, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 101, 71, 64, 255, 126, 96, 89, 255, 65, 30, 21, 255, 74, 44, 35, 255, 93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 93, 52, 44, 255, 149, 134, 126, 255, 149, 134, 126, 255, 126, 96, 89, 255, 74, 44, 35, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 51, 24, 16, 255, 74, 44, 35, 255, 93, 52, 44, 255, 93, 52, 44, 255, 101, 71, 64, 255, 93, 52, 44, 255, 126, 96, 89, 255, 149, 134, 126, 255, 101, 71, 64, 255, 126, 96, 89, 255, 149, 134, 126, 255, 126, 96, 89, 255, 74, 44, 35, 255, 93, 52, 44, 255, 93, 52, 44, 255, 74, 44, 35, 255, 51, 24, 16, 255, 74, 44, 35, 255, 74, 44, 35, 255, 93, 52, 44, 255, 93, 52, 44, 255, 93, 52, 44, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 101, 71, 64, 255, 93, 52, 44, 255, 74, 44, 35, 255, 74, 44, 35, 255, 93, 52, 44, 255, 51, 24, 16, 255, 74, 44, 35, 255, 126, 96, 89, 255, 149, 134, 126, 255, 149, 134, 126, 255, 149, 134, 126, 255, 74, 44, 35, 255, 101, 71, 64, 255, 101, 71, 64, 255]",
		lightGrassBlockTop: function (n) {
			for (var x = 0; x < 16; x++) {
				for (var y = 0; y < 16; y++) {
					var d = Math.random() * 0.25 + 0.65;
					var r = 0x5e * d;
					var g = 0xb3 * d;
					var b = 0x50 * d;
					setPixel(n, x, y, r, g, b);
				}
			}
		},
		lightGrassBlockSide: function (n) {
			var pix = getPixels("0g0g70ordrzz0u30g730wa4vzz0xnyl8f11lrk7315qj7jz1fh47pb6553365533033636350335403653650063306333633300635163503655353653535605335031350330553500033033366333433663663535336655335055335553353530355333033503300333336635353663650660554353355635155305303053556333333366353323553060365553063030663533555365534355335530");
			for (var i = 0; i < pix.length; i += 4) {
				setPixel(n, i >> 2 & 15, i >> 6, pix[i], pix[i + 1], pix[i + 2], pix[i + 3]);
			}
			for (var x = 0; x < 16; x++) {
				var m = random() * 4 + 1;
				for (var y = 0; y < m; y++) {
					var d = random() * 0.25 + 0.65;
					var r = 0x5e * d;
					var g = 0xb3 * d;
					var b = 0x50 * d;
					setPixel(n, x, y, r, g, b);
				}
			}
		},
		snow: "[247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 240, 253, 253, 255, 240, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 240, 253, 253, 255, 240, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 247, 254, 254, 255, 240, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 240, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 240, 253, 253, 255, 255, 255, 255, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 254, 254, 255, 247, 254, 254, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 255, 255, 255, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 247, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 240, 253, 253, 255, 240, 253, 253, 255, 247, 254, 254, 255, 247, 254, 254, 255]",
		fern: "[255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 84, 160, 72, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 74, 140, 67, 255, 74, 140, 62, 255, 74, 140, 67, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 74, 140, 67, 255, 74, 145, 62, 255, 74, 140, 67, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 74, 140, 62, 255, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 74, 150, 62, 255, 74, 150, 62, 255, 74, 140, 67, 255, 94, 170, 82, 255, 74, 140, 67, 255, 84, 160, 72, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 84, 160, 72, 255, 84, 160, 72, 255, 74, 140, 62, 255, 84, 160, 72, 255, 74, 140, 67, 255, 74, 150, 62, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 74, 140, 67, 255, 0, 0, 0, 0, 84, 160, 72, 255, 255, 255, 255, 0, 0, 0, 0, 0, 74, 150, 62, 255, 94, 170, 82, 255, 74, 150, 62, 255, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 74, 140, 67, 255, 84, 160, 72, 255, 74, 145, 62, 255, 74, 140, 62, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 74, 140, 62, 255, 0, 0, 0, 0, 84, 160, 72, 255, 255, 255, 255, 0, 74, 140, 67, 255, 0, 0, 0, 0, 74, 140, 67, 255, 255, 255, 255, 0, 0, 0, 0, 0, 74, 140, 67, 255, 74, 145, 62, 255, 84, 160, 72, 255, 74, 150, 62, 255, 74, 140, 62, 255, 74, 145, 62, 255, 74, 145, 62, 255, 94, 170, 82, 255, 74, 145, 62, 255, 74, 145, 62, 255, 84, 160, 72, 255, 74, 140, 62, 255, 74, 145, 62, 255, 74, 140, 67, 255, 84, 160, 72, 255, 0, 0, 0, 0, 74, 140, 67, 255, 0, 0, 0, 0, 74, 140, 67, 255, 255, 255, 255, 0, 84, 160, 72, 255, 94, 170, 82, 255, 74, 150, 62, 255, 74, 140, 62, 255, 74, 150, 62, 255, 84, 160, 72, 255, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 74, 145, 62, 255, 74, 140, 67, 255, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 74, 150, 62, 255, 74, 140, 62, 255, 74, 145, 62, 255, 94, 170, 82, 255, 74, 145, 62, 255, 74, 140, 62, 255, 84, 160, 72, 255, 74, 150, 62, 255, 0, 0, 0, 0, 74, 140, 67, 255, 74, 140, 67, 255, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 84, 160, 72, 255, 74, 140, 62, 255, 74, 140, 62, 255, 74, 150, 62, 255, 74, 140, 62, 255, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 74, 150, 62, 255, 74, 150, 62, 255, 94, 170, 82, 255, 74, 140, 62, 255, 74, 150, 62, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 74, 150, 62, 255, 74, 140, 62, 255, 74, 150, 62, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 84, 160, 72, 255, 74, 140, 62, 255, 84, 160, 72, 255, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0]",
		grass: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 84, 160, 72, 255, 94, 170, 82, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 0, 0, 0, 0, 94, 170, 82, 255, 84, 160, 72, 255, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 84, 160, 72, 255, 94, 170, 82, 255, 0, 0, 0, 0, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 0, 0, 0, 0, 94, 170, 82, 255, 74, 150, 62, 255, 0, 0, 0, 0, 74, 150, 62, 255, 84, 160, 72, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 160, 72, 255, 84, 160, 72, 255, 0, 0, 0, 0, 74, 150, 62, 255, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 74, 150, 62, 255, 84, 160, 72, 255, 84, 160, 72, 255, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 94, 170, 82, 255, 74, 150, 62, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 84, 160, 72, 255, 94, 170, 82, 255, 0, 0, 0, 0, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 0, 0, 0, 0, 84, 160, 72, 255, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 74, 150, 62, 255, 94, 170, 82, 255, 0, 0, 0, 0, 94, 170, 82, 255, 84, 160, 72, 255, 0, 0, 0, 0, 94, 170, 82, 255, 84, 160, 72, 255, 74, 150, 62, 255, 0, 0, 0, 0, 94, 170, 82, 255, 0, 0, 0, 0, 84, 160, 72, 255, 94, 170, 82, 255, 94, 170, 82, 255, 84, 160, 72, 255, 0, 0, 0, 0, 94, 170, 82, 255, 94, 170, 82, 255, 74, 150, 62, 255, 84, 160, 72, 255, 0, 0, 0, 0, 74, 150, 62, 255, 84, 160, 72, 255, 94, 170, 82, 255, 0, 0, 0, 0, 74, 150, 62, 255, 94, 170, 82, 255, 0, 0, 0, 0, 74, 150, 62, 255, 74, 150, 62, 255, 0, 0, 0, 0, 84, 160, 72, 255, 74, 150, 62, 255, 84, 160, 72, 255, 74, 150, 62, 255, 84, 160, 72, 255, 74, 150, 62, 255, 84, 160, 72, 255, 84, 160, 72, 255, 94, 170, 82, 255, 74, 150, 62, 255, 84, 160, 72, 255, 74, 150, 62, 255, 74, 150, 62, 255, 84, 160, 72, 255, 74, 150, 62, 255, 74, 150, 62, 255, 84, 160, 72, 255, 84, 160, 72, 255, 84, 160, 72, 255, 74, 150, 62, 255, 84, 160, 72, 255, 74, 150, 62, 255, 84, 160, 72, 255, 84, 160, 72, 255, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 84, 160, 72, 255, 74, 150, 62, 255, 0, 0, 0, 0, 0, 0, 0, 0, 84, 160, 72, 255, 84, 160, 72, 255, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 84, 160, 72, 255, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 74, 150, 62, 255, 84, 160, 72, 255, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 84, 160, 72, 255, 74, 150, 62, 255, 84, 160, 72, 255, 84, 160, 72, 255, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 84, 160, 72, 255, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 84, 160, 72, 255, 84, 160, 72, 255, 94, 170, 82, 255, 84, 160, 72, 255, 84, 160, 72, 255, 74, 150, 62, 255]",
		deadBush: "0g0g500000000m9fzzz0ru00lb1568lj31cypdz30000000000010000000030000021000000003000202000000000230031100000000002302101000000000243100000000011102323000110000122034202310000000123413200000000001233100000000000013300000000001200321000000000012222000000000000212202200000000001212100000000000111000000",
		sugarCane: "[0, 0, 0, 0, 229, 239, 218, 255, 150, 193, 102, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 130, 168, 89, 255, 105, 135, 71, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 229, 239, 218, 255, 150, 193, 102, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 145, 239, 50, 255, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 117, 193, 40, 255, 0, 0, 0, 0, 130, 168, 89, 255, 105, 135, 71, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 117, 193, 40, 255, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 145, 239, 50, 255, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 229, 239, 218, 255, 150, 193, 102, 255, 117, 193, 40, 255, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 130, 168, 89, 255, 105, 135, 71, 255, 0, 0, 0, 0, 0, 0, 0, 0, 229, 239, 218, 255, 150, 193, 102, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 130, 168, 89, 255, 105, 135, 71, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 145, 239, 50, 255, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 117, 193, 40, 255, 145, 239, 50, 255, 229, 239, 218, 255, 150, 193, 102, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 117, 193, 40, 255, 130, 168, 89, 255, 105, 135, 71, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 229, 239, 218, 255, 150, 193, 102, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 117, 193, 40, 255, 229, 239, 218, 255, 150, 193, 102, 255, 0, 0, 0, 0, 145, 239, 50, 255, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 130, 168, 89, 255, 105, 135, 71, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 130, 168, 89, 255, 105, 135, 71, 255, 0, 0, 0, 0, 117, 193, 40, 255, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 229, 239, 218, 255, 150, 193, 102, 255, 0, 0, 0, 0, 117, 193, 40, 255, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 130, 168, 89, 255, 105, 135, 71, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0, 0, 0, 0, 0, 170, 219, 116, 255, 130, 168, 89, 255, 0, 0, 0, 0]",
		redMushroomBlock: "[195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 206, 45, 43, 255, 206, 45, 43, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 206, 45, 43, 255, 255, 191, 191, 255, 255, 152, 152, 255, 206, 45, 43, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 206, 45, 43, 255, 255, 152, 152, 255, 255, 191, 191, 255, 206, 45, 43, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 206, 45, 43, 255, 206, 45, 43, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 195, 40, 38, 255, 201, 43, 41, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 190, 35, 33, 255, 195, 40, 38, 255, 206, 45, 43, 255, 206, 45, 43, 255, 195, 40, 38, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 190, 35, 33, 255, 195, 40, 38, 255, 206, 45, 43, 255, 255, 191, 191, 255, 255, 152, 152, 255, 206, 45, 43, 255, 190, 35, 33, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 206, 45, 43, 255, 255, 152, 152, 255, 255, 191, 191, 255, 206, 45, 43, 255, 195, 40, 38, 255, 190, 35, 33, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 206, 45, 43, 255, 206, 45, 43, 255, 195, 40, 38, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 206, 45, 43, 255, 206, 45, 43, 255, 195, 40, 38, 255, 195, 40, 38, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 195, 40, 38, 255, 206, 45, 43, 255, 255, 191, 191, 255, 255, 152, 152, 255, 206, 45, 43, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 206, 45, 43, 255, 255, 152, 152, 255, 255, 191, 191, 255, 206, 45, 43, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 190, 35, 33, 255, 195, 40, 38, 255, 206, 45, 43, 255, 206, 45, 43, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 195, 40, 38, 255, 195, 40, 38, 255, 190, 35, 33, 255, 190, 35, 33, 255, 195, 40, 38, 255, 195, 40, 38, 255, 195, 40, 38, 255, 195, 40, 38, 255, 195, 40, 38, 255, 201, 43, 41, 255, 201, 43, 41, 255, 195, 40, 38, 255]",
		brownMushroom
		redMushroom: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 204, 208, 255, 254, 42, 42, 255, 254, 42, 42, 255, 254, 42, 42, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 18, 18, 255, 254, 42, 42, 255, 254, 42, 42, 255, 254, 42, 42, 255, 226, 18, 18, 255, 226, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 226, 18, 18, 255, 226, 18, 18, 255, 254, 42, 42, 255, 254, 42, 42, 255, 226, 18, 18, 255, 226, 18, 18, 255, 150, 173, 175, 255, 226, 18, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 150, 173, 175, 255, 196, 29, 38, 255, 226, 18, 18, 255, 226, 18, 18, 255, 196, 29, 38, 255, 196, 29, 38, 255, 169, 18, 26, 255, 169, 18, 26, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 196, 127, 255, 169, 160, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237, 232, 202, 255, 207, 196, 127, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 237, 232, 202, 255, 214, 208, 172, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		poppy: "0g0gd000000004jkcu704k17nj04k6txb05oxatb0fjd9mn0iv8e7z0qmx1q712uf5rz13ydk3j1f22ygv1lpt7nj1vpem7z0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aa000000000000a78ab0000000000bb56990000000000ccb99000000000000b310000000000000004000000000000000400000000000000040000000000003404044000000000030230000000000000313000000",
		dandelion: "0g0g70000000017p88v03h660v143zt331e5azun1ktyynz1uuywvz0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000560646000000000005563000000000006643350000000000002200000000000000212100000000001221100000000000012100000000000000210000000",
		blueOrchid: "0g0gj000000004l4jjz05oxatb05p2x3306s98u706svocf06tdo8v06tdp1b07w7mdb07w7n5r07xc2kf0a6ccn30baaq670baaqyn0bax81r0djgfen0gsmpz30gssbgf0gssc8v0000000000000000000000000000007000000000000009f00000ec0ce000hac00000760cc00gc00000000ii900g7fd000007c4009020c000000eb00008ec00000000000003760000000000000i000000000000000190000000000000005000000000000000g00000000000000020000000000000099000000000000000000000",
		pinkTulip: "0g0gc00000000dfzitb0ek94vz0hwfl6n0j0p81r0l92txb0mcq1a70nhavwf0nhgi671p83v9b1skr5kv1utlnun00000000000000000000000000000000000000b0b0000000000000aba00000000000009a9000000000000009000000000004800104000000000073080840000000003708082000000000250626200000000024248200000000000684620000000000023820000000000000262000000000000002000000000000000000000000",
		orangeTulip: "0g0gg00000000cc14hr0ekeqdb0hwl6nz0j0p81r0l8rmyn0l92txb0mdchkv0nhm4fz1kpag3j1lt385b1mxo3jz1p61r0f1q9uj271qa5rlr1rdstfj00000000000000000000000000000000000000f0e0000000000000bcb00000000000009d900000000000000a000000000000800104000000000048050540000000002702082000000000264225200000000023248420000000000534520000000000083820000000000008352000000000000002000000000000000000000000",
		redTulip: "0g0gd00000000gssem70k4yuwv0md19tr0ol9b0f0olkhz30ppojcv0qty5fj1hb8m4f1ifclxb1lrj0n31mv641r1mvn18f00000000000000000000000000000000000000b0c00000000000009a900000000000008c8000000000000009000000000000030407000000000034010730000000001714061000000000171415100000000003731200000000000143240000000000001727000000000000142700000000000001000000000000000000000000",
		whiteTulip: "0g0gd00000000b7x3wf0cc6pz30fod69r0hwl6nz0k4nmdb0k4ysjj0l98gzj0mdcgsf1lxsv0f1pa4wsf1smgykf1uuozr300000000000000000000000000000000000000c0c0000000000000bcb0000000000000aba000000000000009000000000000040100080000000048050074000000002802073200000000252506200000000024842320000000000254350000000000002838000000000000253000000000000002000000000000000000000000",
		azureBluet: "0g0g700000000gruprz0j0e0an0ngu1331o66ku71riimm71uuoj5r0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000006564000000000000432056000000006504553400000000530146200000000001320305600000000056230340000000005433300000000000003200000000000000300000000",
		cornFlower: "0g0gb00000000b6jldr0cbkf7j0gs0hkv0ht0npb0izbr3z0ngiyv30ol3u9r0qry3gf0v88hz312ynx1b000000000000000000000000000000000000000000000000000000000000000000000909580000000000599585500000000008114510000000000002a000000000000006600000000000000020000000000060006000000000000600700000000000036070000000000000367000000000000002700000000000000020000000",
		oxeyeDaisy: "0g0gb00000000dfzitb0ek94vz0j0p81r0mcq1a70nhgi671lxgm4f1pa4wsf1smb0fz1tqkz5r1vyt0cf000000000000000000000000000000000000000a0000000000000a7a7a00000000000986870000000000aa666aa00000000007868900000000000a7a7a0000000000000a400000000000000510000000000000040000000000000143000000000000001301000000000000051000000000000004100000000000000200000000",
		allium: "0g0gg00000000ppdce70rxldkv0t1pbsv0u5terj0ym3u2n11ya8sf1e1fw1r1f5v4e71ga4qgv1gafz0f1iiz75r1jn8t8f1n079q71p8qhvj1qd03y700000000000000000000000000000000000000a8a000000000000c89e80000000000aeae87b00000000077de8b70000000000fa8ea00000000000072ae00000000000006000000000000000400000000000000020000000000000004000000000000000500000000000000060000000000000003000000000000000100000000",
		caveVinesLit: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 114, 51, 255, 72, 97, 36, 255, 80, 114, 51, 255, 80, 114, 51, 255, 79, 50, 20, 255, 112, 146, 45, 255, 112, 146, 45, 255, 0, 0, 0, 0, 66, 85, 45, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 64, 18, 255, 80, 114, 51, 255, 80, 114, 51, 255, 80, 114, 51, 255, 79, 50, 20, 255, 80, 114, 51, 255, 72, 97, 36, 255, 112, 146, 45, 255, 112, 146, 45, 255, 72, 97, 36, 255, 64, 84, 30, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 164, 100, 34, 255, 247, 226, 107, 255, 235, 137, 49, 255, 164, 100, 34, 255, 91, 64, 18, 255, 80, 114, 51, 255, 80, 114, 51, 255, 72, 97, 36, 255, 112, 146, 45, 255, 112, 146, 45, 255, 72, 97, 36, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 80, 114, 51, 255, 164, 100, 34, 255, 235, 137, 49, 255, 235, 137, 49, 255, 164, 100, 34, 255, 91, 64, 18, 255, 0, 0, 0, 0, 108, 128, 49, 255, 108, 128, 49, 255, 80, 114, 51, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 108, 128, 49, 255, 0, 0, 0, 0, 164, 100, 34, 255, 164, 100, 34, 255, 72, 97, 36, 255, 112, 82, 29, 255, 0, 0, 0, 0, 0, 0, 0, 0, 108, 128, 49, 255, 108, 128, 49, 255, 108, 128, 49, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 112, 146, 45, 255, 112, 82, 29, 255, 0, 0, 0, 0, 112, 82, 29, 255, 66, 85, 45, 255, 72, 97, 36, 255, 0, 0, 0, 0, 79, 50, 20, 255, 72, 97, 36, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 112, 146, 45, 255, 72, 97, 36, 255, 108, 128, 49, 255, 0, 0, 0, 0, 112, 82, 29, 255, 72, 97, 36, 255, 64, 84, 30, 255, 72, 97, 36, 255, 79, 50, 20, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 112, 146, 45, 255, 72, 97, 36, 255, 108, 128, 49, 255, 108, 128, 49, 255, 0, 0, 0, 0, 91, 64, 18, 255, 0, 0, 0, 0, 164, 100, 34, 255, 164, 100, 34, 255, 80, 114, 51, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 80, 114, 51, 255, 112, 146, 45, 255, 108, 128, 49, 255, 79, 50, 20, 255, 80, 114, 51, 255, 66, 85, 45, 255, 164, 100, 34, 255, 247, 226, 107, 255, 235, 137, 49, 255, 108, 128, 49, 255, 80, 114, 51, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 112, 146, 45, 255, 108, 128, 49, 255, 91, 64, 18, 255, 0, 0, 0, 0, 80, 114, 51, 255, 66, 85, 45, 255, 164, 100, 34, 255, 235, 137, 49, 255, 235, 137, 49, 255, 164, 100, 34, 255, 108, 128, 49, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 64, 18, 255, 0, 0, 0, 0, 108, 128, 49, 255, 80, 114, 51, 255, 112, 146, 45, 255, 164, 100, 34, 255, 164, 100, 34, 255, 64, 84, 30, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 128, 49, 255, 66, 85, 45, 255, 80, 114, 51, 255, 0, 0, 0, 0, 112, 146, 45, 255, 66, 85, 45, 255, 0, 0, 0, 0, 91, 64, 18, 255, 72, 97, 36, 255, 64, 84, 30, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 66, 85, 45, 255, 108, 128, 49, 255, 0, 0, 0, 0, 66, 85, 45, 255, 66, 85, 45, 255, 80, 114, 51, 255, 66, 85, 45, 255, 108, 128, 49, 255, 72, 97, 36, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 108, 128, 49, 255, 112, 146, 45, 255, 0, 0, 0, 0, 72, 97, 36, 255, 66, 85, 45, 255, 108, 128, 49, 255, 66, 85, 45, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 97, 36, 255, 112, 146, 45, 255, 108, 128, 49, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		caveVinesBodyLit: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 114, 51, 255, 72, 97, 36, 255, 80, 114, 51, 255, 80, 114, 51, 255, 79, 50, 20, 255, 112, 146, 45, 255, 112, 146, 45, 255, 0, 0, 0, 0, 91, 64, 18, 255, 72, 97, 36, 255, 64, 84, 30, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 114, 51, 255, 80, 114, 51, 255, 80, 114, 51, 255, 79, 50, 20, 255, 80, 114, 51, 255, 72, 97, 36, 255, 112, 146, 45, 255, 112, 146, 45, 255, 91, 64, 18, 255, 0, 0, 0, 0, 72, 97, 36, 255, 72, 97, 36, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 64, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 82, 29, 255, 80, 114, 51, 255, 80, 114, 51, 255, 72, 97, 36, 255, 112, 146, 45, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 97, 36, 255, 66, 85, 45, 255, 164, 100, 34, 255, 164, 100, 34, 255, 0, 0, 0, 0, 91, 64, 18, 255, 112, 82, 29, 255, 0, 0, 0, 0, 108, 128, 49, 255, 108, 128, 49, 255, 80, 114, 51, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 97, 36, 255, 64, 84, 30, 255, 164, 100, 34, 255, 247, 226, 107, 255, 235, 137, 49, 255, 112, 146, 45, 255, 112, 146, 45, 255, 91, 64, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 108, 128, 49, 255, 108, 128, 49, 255, 108, 128, 49, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 97, 36, 255, 72, 97, 36, 255, 164, 100, 34, 255, 235, 137, 49, 255, 112, 146, 45, 255, 112, 146, 45, 255, 72, 97, 36, 255, 80, 114, 51, 255, 91, 64, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 50, 20, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 112, 146, 45, 255, 72, 97, 36, 255, 80, 114, 51, 255, 80, 114, 51, 255, 79, 50, 20, 255, 0, 0, 0, 0, 0, 0, 0, 0, 72, 97, 36, 255, 66, 85, 45, 255, 79, 50, 20, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 146, 45, 255, 80, 114, 51, 255, 108, 128, 49, 255, 80, 114, 51, 255, 0, 0, 0, 0, 0, 0, 0, 0, 57, 51, 51, 255, 72, 97, 36, 255, 64, 84, 30, 255, 72, 97, 36, 255, 164, 100, 34, 255, 164, 100, 34, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 108, 128, 49, 255, 108, 128, 49, 255, 108, 128, 49, 255, 0, 0, 0, 0, 80, 114, 51, 255, 80, 114, 51, 255, 91, 64, 18, 255, 72, 97, 36, 255, 72, 97, 36, 255, 164, 100, 34, 255, 247, 226, 107, 255, 235, 137, 49, 255, 164, 100, 34, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 50, 20, 255, 0, 0, 0, 0, 80, 114, 51, 255, 72, 97, 36, 255, 72, 97, 36, 255, 112, 82, 29, 255, 112, 82, 29, 255, 91, 64, 18, 255, 164, 100, 34, 255, 235, 137, 49, 255, 235, 137, 49, 255, 164, 100, 34, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 50, 20, 255, 80, 114, 51, 255, 72, 97, 36, 255, 80, 114, 51, 255, 80, 114, 51, 255, 91, 64, 18, 255, 112, 146, 45, 255, 112, 146, 45, 255, 91, 64, 18, 255, 164, 100, 34, 255, 164, 100, 34, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 114, 51, 255, 80, 114, 51, 255, 80, 114, 51, 255, 0, 0, 0, 0, 80, 114, 51, 255, 72, 97, 36, 255, 112, 146, 45, 255, 112, 146, 45, 255, 91, 64, 18, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 50, 20, 255, 0, 0, 0, 0, 164, 100, 34, 255, 164, 100, 34, 255, 80, 114, 51, 255, 80, 114, 51, 255, 72, 97, 36, 255, 112, 146, 45, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 97, 36, 255, 66, 85, 45, 255, 91, 64, 18, 255, 164, 100, 34, 255, 247, 226, 107, 255, 235, 137, 49, 255, 164, 100, 34, 255, 80, 114, 51, 255, 108, 128, 49, 255, 80, 114, 51, 255, 112, 146, 45, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 97, 36, 255, 64, 84, 30, 255, 72, 97, 36, 255, 0, 0, 0, 0, 80, 114, 51, 255, 80, 114, 51, 255, 235, 137, 49, 255, 164, 100, 34, 255, 0, 0, 0, 0, 108, 128, 49, 255, 108, 128, 49, 255, 108, 128, 49, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 97, 36, 255, 72, 97, 36, 255, 91, 64, 18, 255, 80, 114, 51, 255, 72, 97, 36, 255, 72, 97, 36, 255, 164, 100, 34, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 64, 18, 255, 66, 85, 45, 255, 72, 97, 36, 255, 0, 0, 0, 0]",
		dripstoneDown1: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 131, 99, 86, 255, 131, 99, 86, 255, 131, 99, 86, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 131, 99, 86, 255, 115, 84, 80, 255, 115, 84, 80, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 160, 141, 113, 255, 160, 141, 113, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 160, 141, 113, 255, 160, 141, 113, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 141, 113, 255, 160, 141, 113, 255, 160, 141, 113, 255, 146, 121, 101, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 160, 141, 113, 255, 131, 99, 86, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 146, 121, 101, 255, 146, 121, 101, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 160, 141, 113, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 84, 80, 255, 160, 141, 113, 255, 160, 141, 113, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 141, 113, 255, 160, 141, 113, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		dripstoneDown2: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 146, 121, 101, 255, 131, 99, 86, 255, 131, 99, 86, 255, 131, 99, 86, 255, 131, 99, 86, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 131, 99, 86, 255, 115, 84, 80, 255, 115, 84, 80, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 141, 113, 255, 160, 141, 113, 255, 160, 141, 113, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 141, 113, 255, 160, 141, 113, 255, 160, 141, 113, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 141, 113, 255, 160, 141, 113, 255, 146, 121, 101, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 146, 121, 101, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		dripstoneUp1: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 141, 113, 255, 160, 141, 113, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 84, 80, 255, 160, 141, 113, 255, 160, 141, 113, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 160, 141, 113, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 146, 121, 101, 255, 146, 121, 101, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 160, 141, 113, 255, 131, 99, 86, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 141, 113, 255, 160, 141, 113, 255, 160, 141, 113, 255, 146, 121, 101, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 160, 141, 113, 255, 160, 141, 113, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 131, 99, 86, 255, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 160, 141, 113, 255, 160, 141, 113, 255, 146, 121, 101, 255, 131, 99, 86, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 160, 141, 113, 255, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 131, 99, 86, 255, 115, 84, 80, 255, 115, 84, 80, 255, 131, 99, 86, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 121, 101, 255, 146, 121, 101, 255, 131, 99, 86, 255, 131, 99, 86, 255, 131, 99, 86, 255, 131, 99, 86, 255, 115, 84, 80, 255, 115, 84, 80, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		dripstoneUp
		hangingRoots: "[121, 85, 58, 255, 0, 0, 0, 0, 121, 85, 58, 255, 0, 0, 0, 0, 121, 85, 58, 255, 0, 0, 0, 0, 185, 133, 92, 255, 150, 108, 74, 255, 121, 85, 58, 255, 0, 0, 0, 0, 121, 85, 58, 255, 0, 0, 0, 0, 150, 108, 74, 255, 185, 133, 92, 255, 0, 0, 0, 0, 121, 85, 58, 255, 0, 0, 0, 0, 121, 85, 58, 255, 144, 87, 64, 255, 185, 133, 92, 255, 0, 0, 0, 0, 0, 0, 0, 0, 150, 108, 74, 255, 144, 87, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 121, 85, 58, 255, 150, 108, 74, 255, 0, 0, 0, 0, 173, 125, 101, 255, 0, 0, 0, 0, 144, 87, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 187, 151, 137, 255, 0, 0, 0, 0, 144, 87, 64, 255, 144, 87, 64, 255, 150, 108, 74, 255, 0, 0, 0, 0, 121, 85, 58, 255, 0, 0, 0, 0, 185, 133, 92, 255, 0, 0, 0, 0, 173, 125, 101, 255, 144, 87, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 144, 87, 64, 255, 173, 125, 101, 255, 187, 151, 137, 255, 187, 151, 137, 255, 144, 87, 64, 255, 0, 0, 0, 0, 187, 151, 137, 255, 150, 108, 74, 255, 144, 87, 64, 255, 0, 0, 0, 0, 187, 151, 137, 255, 173, 125, 101, 255, 0, 0, 0, 0, 187, 151, 137, 255, 0, 0, 0, 0, 0, 0, 0, 0, 144, 87, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 187, 151, 137, 255, 0, 0, 0, 0, 0, 0, 0, 0, 187, 151, 137, 255, 187, 151, 137, 255, 0, 0, 0, 0, 144, 87, 64, 255, 187, 151, 137, 255, 0, 0, 0, 0, 0, 0, 0, 0, 187, 151, 137, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 87, 64, 255, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 144, 87, 64, 255, 187, 151, 137, 255, 173, 125, 101, 255, 0, 0, 0, 0, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 125, 101, 255, 173, 125, 101, 255, 0, 0, 0, 0, 173, 125, 101, 255, 173, 125, 101, 255, 144, 87, 64, 255, 0, 0, 0, 0, 187, 151, 137, 255, 0, 0, 0, 0, 144, 87, 64, 255, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 187, 151, 137, 255, 187, 151, 137, 255, 0, 0, 0, 0, 0, 0, 0, 0, 173, 125, 101, 255, 144, 87, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 87, 64, 255, 0, 0, 0, 0, 187, 151, 137, 255, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 173, 125, 101, 255, 0, 0, 0, 0, 144, 87, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 87, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 125, 101, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		amethystCluster: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 160, 243, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 160, 243, 255, 254, 203, 230, 255, 179, 142, 243, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 160, 243, 255, 207, 160, 243, 255, 254, 203, 230, 255, 141, 106, 204, 255, 207, 160, 243, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 160, 243, 255, 207, 160, 243, 255, 207, 160, 243, 255, 254, 203, 230, 255, 141, 106, 204, 255, 141, 106, 204, 255, 207, 160, 243, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 160, 243, 255, 254, 203, 230, 255, 255, 253, 213, 255, 255, 253, 213, 255, 179, 142, 243, 255, 141, 106, 204, 255, 207, 160, 243, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 91, 181, 255, 179, 142, 243, 255, 179, 142, 243, 255, 207, 160, 243, 255, 122, 91, 181, 255, 141, 106, 204, 255, 122, 91, 181, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 91, 181, 255, 141, 106, 204, 255, 179, 142, 243, 255, 207, 160, 243, 255, 122, 91, 181, 255, 141, 106, 204, 255, 100, 71, 158, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 203, 230, 255, 254, 203, 230, 255, 207, 160, 243, 255, 0, 0, 0, 0, 0, 0, 0, 0, 122, 91, 181, 255, 141, 106, 204, 255, 207, 160, 243, 255, 122, 91, 181, 255, 122, 91, 181, 255, 100, 71, 158, 255, 0, 0, 0, 0, 0, 0, 0, 0, 207, 160, 243, 255, 254, 203, 230, 255, 254, 203, 230, 255, 207, 160, 243, 255, 254, 203, 230, 255, 254, 203, 230, 255, 207, 160, 243, 255, 0, 0, 0, 0, 122, 91, 181, 255, 122, 91, 181, 255, 179, 142, 243, 255, 122, 91, 181, 255, 122, 91, 181, 255, 100, 71, 158, 255, 0, 0, 0, 0, 207, 160, 243, 255, 254, 203, 230, 255, 254, 203, 230, 255, 207, 160, 243, 255, 207, 160, 243, 255, 141, 106, 204, 255, 255, 253, 213, 255, 207, 160, 243, 255, 207, 160, 243, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 179, 142, 243, 255, 122, 91, 181, 255, 0, 0, 0, 0, 207, 160, 243, 255, 207, 160, 243, 255, 255, 253, 213, 255, 141, 106, 204, 255, 207, 160, 243, 255, 207, 160, 243, 255, 141, 106, 204, 255, 141, 106, 204, 255, 254, 203, 230, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 122, 91, 181, 255, 179, 142, 243, 255, 100, 71, 158, 255, 141, 106, 204, 255, 141, 106, 204, 255, 207, 160, 243, 255, 141, 106, 204, 255, 141, 106, 204, 255, 207, 160, 243, 255, 0, 0, 0, 0, 207, 160, 243, 255, 141, 106, 204, 255, 122, 91, 181, 255, 207, 160, 243, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 100, 71, 158, 255, 122, 91, 181, 255, 207, 160, 243, 255, 122, 91, 181, 255, 141, 106, 204, 255, 207, 160, 243, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 207, 160, 243, 255, 122, 91, 181, 255, 122, 91, 181, 255, 122, 91, 181, 255, 122, 91, 181, 255, 100, 71, 158, 255, 141, 106, 204, 255, 100, 71, 158, 255, 141, 106, 204, 255, 122, 91, 181, 255, 122, 91, 181, 255, 141, 106, 204, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 106, 204, 255, 122, 91, 181, 255, 100, 71, 158, 255, 122, 91, 181, 255, 100, 71, 158, 255, 207, 160, 243, 255, 141, 106, 204, 255, 100, 71, 158, 255, 122, 91, 181, 255, 141, 106, 204, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 122, 91, 181, 255, 100, 71, 158, 255, 100, 71, 158, 255, 100, 71, 158, 255, 141, 106, 204, 255, 207, 160, 243, 255, 100, 71, 158, 255, 100, 71, 158, 255, 100, 71, 158, 255, 122, 91, 181, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		sweetBerryBush: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 110, 66, 255, 72, 127, 79, 255, 0, 0, 0, 0, 40, 98, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 82, 48, 255, 41, 82, 48, 255, 0, 0, 0, 0, 60, 110, 66, 255, 72, 127, 79, 255, 40, 98, 64, 255, 40, 98, 64, 255, 60, 110, 66, 255, 41, 82, 48, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 7, 0, 255, 105, 31, 33, 255, 60, 110, 66, 255, 0, 0, 0, 0, 60, 110, 66, 255, 41, 82, 48, 255, 0, 0, 0, 0, 41, 82, 48, 255, 41, 82, 48, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 98, 64, 255, 40, 98, 64, 255, 105, 31, 33, 255, 105, 31, 33, 255, 60, 110, 66, 255, 60, 110, 66, 255, 40, 98, 64, 255, 41, 82, 48, 255, 72, 127, 79, 255, 60, 110, 66, 255, 0, 0, 0, 0, 165, 7, 0, 255, 105, 31, 33, 255, 41, 82, 48, 255, 0, 0, 0, 0, 0, 0, 0, 0, 60, 110, 66, 255, 72, 127, 79, 255, 40, 98, 64, 255, 41, 82, 48, 255, 41, 82, 48, 255, 41, 82, 48, 255, 223, 70, 126, 255, 165, 7, 0, 255, 72, 127, 79, 255, 72, 127, 79, 255, 29, 56, 34, 255, 105, 31, 33, 255, 105, 31, 33, 255, 41, 82, 48, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 82, 48, 255, 60, 110, 66, 255, 60, 110, 66, 255, 41, 82, 48, 255, 165, 7, 0, 255, 165, 7, 0, 255, 29, 56, 34, 255, 60, 110, 66, 255, 41, 82, 48, 255, 72, 127, 79, 255, 72, 127, 79, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 223, 70, 126, 255, 165, 7, 0, 255, 72, 127, 79, 255, 72, 127, 79, 255, 60, 110, 66, 255, 40, 98, 64, 255, 40, 98, 64, 255, 29, 56, 34, 255, 29, 56, 34, 255, 40, 98, 64, 255, 40, 98, 64, 255, 60, 110, 66, 255, 41, 82, 48, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 165, 7, 0, 255, 165, 7, 0, 255, 40, 98, 64, 255, 41, 82, 48, 255, 223, 70, 126, 255, 165, 7, 0, 255, 40, 98, 64, 255, 72, 127, 79, 255, 60, 110, 66, 255, 40, 98, 64, 255, 41, 82, 48, 255, 0, 0, 0, 0, 40, 98, 64, 255, 40, 98, 64, 255, 40, 98, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 20, 21, 255, 69, 20, 21, 255, 165, 7, 0, 255, 165, 7, 0, 255, 41, 82, 48, 255, 72, 127, 79, 255, 72, 127, 79, 255, 60, 110, 66, 255, 41, 82, 48, 255, 40, 98, 64, 255, 165, 7, 0, 255, 105, 31, 33, 255, 40, 98, 64, 255, 0, 0, 0, 0, 60, 110, 66, 255, 72, 127, 79, 255, 69, 20, 21, 255, 105, 31, 33, 255, 29, 56, 34, 255, 60, 110, 66, 255, 60, 110, 66, 255, 40, 98, 64, 255, 105, 31, 33, 255, 105, 31, 33, 255, 40, 98, 64, 255, 40, 98, 64, 255, 105, 31, 33, 255, 105, 31, 33, 255, 0, 0, 0, 0, 60, 110, 66, 255, 72, 127, 79, 255, 60, 110, 66, 255, 0, 0, 0, 0, 29, 56, 34, 255, 29, 56, 34, 255, 60, 110, 66, 255, 72, 127, 79, 255, 60, 110, 66, 255, 165, 7, 0, 255, 105, 31, 33, 255, 223, 70, 126, 255, 165, 7, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 82, 48, 255, 41, 82, 48, 255, 69, 20, 21, 255, 29, 56, 34, 255, 29, 56, 34, 255, 0, 0, 0, 0, 29, 56, 34, 255, 0, 0, 0, 0, 165, 7, 0, 255, 165, 7, 0, 255, 0, 0, 0, 0, 41, 75, 56, 255, 41, 75, 56, 255, 0, 0, 0, 0, 0, 0, 0, 0, 41, 82, 48, 255, 41, 82, 48, 255, 41, 82, 48, 255, 0, 0, 0, 0, 41, 82, 48, 255, 40, 98, 64, 255, 41, 82, 48, 255, 41, 82, 48, 255, 41, 82, 48, 255, 29, 56, 34, 255, 29, 56, 34, 255, 29, 56, 34, 255, 41, 75, 56, 255, 41, 75, 56, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 110, 66, 255, 60, 110, 66, 255, 29, 56, 34, 255, 41, 82, 48, 255, 40, 98, 64, 255, 41, 82, 48, 255, 0, 0, 0, 0, 41, 82, 48, 255, 29, 56, 34, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 110, 66, 255, 60, 110, 66, 255, 40, 98, 64, 255, 0, 0, 0, 0, 40, 98, 64, 255, 29, 56, 34, 255, 0, 0, 0, 0, 41, 82, 48, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 82, 48, 255, 0, 0, 0, 0, 40, 98, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 40, 98, 64, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		witherRose: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 53, 46, 255, 66, 53, 46, 255, 42, 31, 25, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 53, 46, 255, 23, 18, 16, 255, 66, 53, 46, 255, 23, 18, 16, 255, 42, 31, 25, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 19, 16, 255, 33, 26, 22, 255, 42, 31, 25, 255, 33, 26, 22, 255, 26, 19, 16, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 19, 16, 255, 33, 26, 22, 255, 26, 19, 16, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 33, 8, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 135, 0, 0, 37, 46, 18, 255, 56, 69, 26, 255, 44, 53, 23, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 53, 23, 255, 56, 69, 26, 255, 44, 53, 23, 255, 37, 46, 18, 255, 56, 69, 26, 255, 56, 69, 26, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 69, 26, 255, 56, 69, 26, 255, 19, 40, 11, 255, 44, 53, 23, 255, 16, 99, 0, 0, 0, 0, 0, 0, 56, 69, 26, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 69, 26, 255, 0, 0, 0, 0, 0, 0, 0, 0, 37, 46, 18, 255, 16, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 69, 54, 0, 19, 40, 11, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 53, 23, 255, 19, 40, 11, 255, 44, 53, 23, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		gNuke: "[84, 219, 18, 255, 87, 193, 33, 255, 83, 155, 43, 255, 56, 107, 30, 255, 84, 220, 13, 255, 87, 193, 33, 255, 81, 157, 43, 255, 56, 107, 30, 255, 84, 219, 18, 255, 85, 194, 33, 255, 80, 157, 41, 255, 55, 107, 33, 255, 84, 219, 18, 255, 83, 195, 31, 255, 80, 157, 41, 255, 56, 107, 30, 255, 84, 219, 18, 255, 87, 193, 33, 255, 83, 155, 43, 255, 56, 107, 30, 255, 84, 220, 13, 255, 87, 193, 33, 255, 81, 157, 43, 255, 56, 107, 30, 255, 84, 219, 18, 255, 85, 194, 33, 255, 80, 157, 41, 255, 55, 107, 33, 255, 84, 219, 18, 255, 83, 195, 31, 255, 80, 157, 41, 255, 56, 107, 30, 255, 84, 219, 18, 255, 87, 193, 33, 255, 83, 155, 43, 255, 56, 107, 30, 255, 84, 220, 13, 255, 87, 193, 33, 255, 81, 157, 43, 255, 56, 107, 30, 255, 84, 219, 18, 255, 85, 194, 33, 255, 80, 157, 41, 255, 55, 107, 33, 255, 84, 219, 18, 255, 83, 195, 31, 255, 80, 157, 41, 255, 56, 107, 30, 255, 84, 219, 18, 255, 87, 193, 33, 255, 83, 155, 43, 255, 56, 107, 30, 255, 84, 220, 13, 255, 87, 193, 33, 255, 81, 157, 43, 255, 56, 107, 30, 255, 84, 219, 18, 255, 85, 194, 33, 255, 80, 157, 41, 255, 55, 107, 33, 255, 84, 219, 18, 255, 83, 195, 31, 255, 80, 157, 41, 255, 56, 107, 30, 255, 90, 216, 23, 255, 82, 195, 34, 255, 80, 157, 44, 255, 53, 109, 29, 255, 83, 220, 18, 255, 82, 195, 34, 255, 80, 158, 39, 255, 53, 109, 29, 255, 90, 216, 23, 255, 82, 195, 33, 255, 80, 158, 39, 255, 54, 107, 34, 255, 90, 216, 23, 255, 80, 196, 32, 255, 80, 158, 39, 255, 53, 109, 29, 255, 219, 219, 219, 255, 219, 219, 219, 255, 219, 219, 219, 255, 206, 206, 206, 255, 219, 219, 219, 255, 219, 219, 219, 255, 219, 219, 219, 255, 219, 219, 219, 255, 206, 206, 206, 255, 219, 219, 219, 255, 219, 219, 219, 255, 206, 206, 206, 255, 206, 206, 206, 255, 219, 219, 219, 255, 0, 0, 0, 255, 0, 0, 0, 255, 206, 206, 206, 255, 0, 0, 0, 255, 219, 219, 219, 255, 219, 219, 219, 255, 0, 0, 0, 255, 206, 206, 206, 255, 0, 0, 0, 255, 206, 206, 206, 255, 0, 0, 0, 255, 219, 219, 219, 255, 0, 0, 0, 255, 219, 219, 219, 255, 0, 0, 0, 255, 219, 219, 219, 255, 0, 0, 0, 255, 206, 206, 206, 255, 206, 206, 206, 255, 0, 0, 0, 255, 0, 0, 0, 255, 219, 219, 219, 255, 0, 0, 0, 255, 206, 206, 206, 255, 0, 0, 0, 255, 219, 219, 219, 255, 0, 0, 0, 255, 219, 219, 219, 255, 0, 0, 0, 255, 0, 0, 0, 255, 219, 219, 219, 255, 206, 206, 206, 255, 0, 0, 0, 255, 0, 0, 0, 255, 206, 206, 206, 255, 0, 0, 0, 255, 206, 206, 206, 255, 0, 0, 0, 255, 0, 0, 0, 255, 206, 206, 206, 255, 0, 0, 0, 255, 206, 206, 206, 255, 0, 0, 0, 255, 219, 219, 219, 255, 0, 0, 0, 255, 0, 0, 0, 255, 219, 219, 219, 255, 206, 206, 206, 255, 0, 0, 0, 255, 206, 206, 206, 255, 206, 206, 206, 255, 0, 0, 0, 255, 175, 175, 175, 255, 219, 219, 219, 255, 0, 0, 0, 255, 175, 175, 175, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 219, 219, 219, 255, 0, 0, 0, 255, 206, 206, 206, 255, 0, 0, 0, 255, 175, 175, 175, 255, 0, 0, 0, 255, 0, 0, 0, 255, 175, 175, 175, 255, 175, 175, 175, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 175, 175, 175, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 206, 206, 206, 255, 175, 175, 175, 255, 175, 175, 175, 255, 175, 175, 175, 255, 90, 216, 23, 255, 82, 195, 34, 255, 80, 157, 44, 255, 53, 109, 29, 255, 83, 220, 18, 255, 82, 195, 34, 255, 80, 158, 39, 255, 53, 109, 29, 255, 90, 216, 23, 255, 82, 195, 33, 255, 80, 158, 39, 255, 54, 107, 34, 255, 90, 216, 23, 255, 80, 196, 32, 255, 80, 158, 39, 255, 53, 109, 29, 255, 84, 219, 18, 255, 87, 193, 33, 255, 83, 155, 43, 255, 56, 107, 30, 255, 84, 220, 13, 255, 87, 193, 33, 255, 81, 157, 43, 255, 56, 107, 30, 255, 84, 219, 18, 255, 85, 194, 33, 255, 80, 157, 41, 255, 55, 107, 33, 255, 84, 219, 18, 255, 83, 195, 31, 255, 80, 157, 41, 255, 56, 107, 30, 255, 84, 219, 18, 255, 87, 193, 33, 255, 83, 155, 43, 255, 56, 107, 30, 255, 84, 220, 13, 255, 87, 193, 33, 255, 81, 157, 43, 255, 56, 107, 30, 255, 84, 219, 18, 255, 85, 194, 33, 255, 80, 157, 41, 255, 55, 107, 33, 255, 84, 219, 18, 255, 83, 195, 31, 255, 80, 157, 41, 255, 56, 107, 30, 255, 84, 219, 18, 255, 87, 193, 33, 255, 83, 155, 43, 255, 56, 107, 30, 255, 84, 220, 13, 255, 87, 193, 33, 255, 81, 157, 43, 255, 56, 107, 30, 255, 84, 219, 18, 255, 85, 194, 33, 255, 80, 157, 41, 255, 55, 107, 33, 255, 84, 219, 18, 255, 83, 195, 31, 255, 80, 157, 41, 255, 56, 107, 30, 255, 84, 219, 18, 255, 87, 193, 33, 255, 83, 155, 43, 255, 56, 107, 30, 255, 84, 220, 13, 255, 87, 193, 33, 255, 81, 157, 43, 255, 56, 107, 30, 255, 84, 219, 18, 255, 85, 194, 33, 255, 80, 157, 41, 255, 55, 107, 33, 255, 84, 219, 18, 255, 83, 195, 31, 255, 80, 157, 41, 255, 56, 107, 30, 255]",
		gNukeTop: "[80, 141, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 80, 141, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 80, 141, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 80, 141, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 161, 0, 255, 0, 109, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 161, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 161, 0, 255, 0, 255, 0, 255, 0, 109, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 255, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 109, 0, 255, 0, 161, 0, 255, 78, 101, 0, 255, 0, 43, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 80, 141, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 0, 43, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 43, 0, 255, 78, 101, 0, 255, 0, 161, 0, 255, 0, 255, 0, 255, 0, 161, 0, 255, 78, 101, 0, 255, 0, 43, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 161, 0, 255, 0, 161, 0, 255, 0, 161, 0, 255, 0, 255, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 255, 0, 255, 0, 109, 0, 255, 0, 161, 0, 255, 0, 43, 0, 255, 0, 255, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 0, 161, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 161, 0, 255, 0, 161, 0, 255, 0, 161, 0, 255, 78, 101, 0, 255, 0, 43, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 80, 141, 0, 255, 0, 161, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 80, 141, 0, 255, 0, 43, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 161, 0, 255, 0, 161, 0, 255, 0, 43, 0, 255, 0, 255, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 161, 0, 255, 0, 161, 0, 255, 78, 101, 0, 255, 0, 43, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 161, 0, 255, 0, 109, 0, 255, 45, 166, 0, 255, 0, 43, 0, 255, 0, 255, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 0, 161, 0, 255, 0, 255, 0, 255, 0, 43, 0, 255, 0, 161, 0, 255, 0, 161, 0, 255, 0, 255, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255, 0, 161, 0, 255, 0, 43, 0, 255, 0, 109, 0, 255, 0, 161, 0, 255, 0, 161, 0, 255, 78, 101, 0, 255, 0, 43, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 0, 161, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 0, 43, 0, 255, 80, 141, 0, 255, 0, 43, 0, 255, 0, 43, 0, 255, 45, 166, 0, 255, 0, 161, 0, 255, 0, 161, 0, 255, 45, 166, 0, 255, 45, 166, 0, 255, 80, 141, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 161, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 161, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 161, 0, 255, 0, 255, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 161, 0, 255, 0, 255, 0, 255, 78, 101, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 109, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 109, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 109, 0, 255, 45, 166, 0, 255, 0, 255, 0, 255, 0, 255, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255, 78, 101, 0, 255, 78, 101, 0, 255, 0, 109, 0, 255, 0, 109, 0, 255]",
		warpedFungus
		crimsonFungus
		crimsonRoots: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 16, 28, 255, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 6, 42, 255, 173, 16, 28, 255, 173, 16, 28, 255, 146, 6, 54, 255, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 173, 16, 28, 255, 146, 6, 54, 255, 173, 16, 28, 255, 0, 0, 0, 0, 146, 6, 54, 255, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 146, 6, 54, 255, 102, 6, 39, 255, 173, 16, 28, 255, 80, 6, 42, 255, 146, 6, 54, 255, 0, 0, 0, 0, 146, 6, 54, 255, 0, 0, 0, 0, 0, 0, 0, 0, 146, 6, 54, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 6, 54, 255, 102, 6, 39, 255, 173, 16, 28, 255, 173, 16, 28, 255, 146, 6, 54, 255, 102, 6, 39, 255, 0, 0, 0, 0, 102, 6, 39, 255, 146, 6, 54, 255, 102, 6, 39, 255, 173, 16, 28, 255, 0, 0, 0, 0, 0, 0, 0, 0, 146, 6, 54, 255, 102, 6, 39, 255, 0, 0, 0, 0, 173, 16, 28, 255, 80, 6, 42, 255, 173, 16, 28, 255, 102, 6, 39, 255, 0, 0, 0, 0, 146, 6, 54, 255, 102, 6, 39, 255, 173, 16, 28, 255, 80, 6, 42, 255, 0, 0, 0, 0, 173, 16, 28, 255, 102, 6, 39, 255, 0, 0, 0, 0, 102, 6, 39, 255, 0, 0, 0, 0, 0, 0, 0, 0, 173, 16, 28, 255, 0, 0, 0, 0, 146, 6, 54, 255, 80, 6, 42, 255, 0, 0, 0, 0, 173, 16, 28, 255, 0, 0, 0, 0, 173, 16, 28, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 173, 16, 28, 255, 0, 0, 0, 0, 146, 6, 54, 255, 0, 0, 0, 0, 0, 0, 0, 0, 146, 6, 54, 255, 0, 0, 0, 0, 0, 0, 0, 0, 146, 6, 54, 255, 0, 0, 0, 0, 173, 16, 28, 255, 0, 0, 0, 0, 146, 6, 54, 255, 0, 0, 0, 0, 0, 0, 0, 0, 80, 6, 42, 255, 146, 6, 54, 255, 0, 0, 0, 0, 0, 0, 0, 0, 146, 6, 54, 255, 0, 0, 0, 0, 146, 6, 54, 255, 80, 6, 42, 255, 0, 0, 0, 0, 102, 6, 39, 255, 102, 6, 39, 255, 146, 6, 54, 255, 0, 0, 0, 0, 102, 6, 39, 255, 146, 6, 54, 255, 80, 6, 42, 255, 146, 6, 54, 255, 80, 6, 42, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 146, 6, 54, 255, 0, 0, 0, 0, 146, 6, 54, 255, 80, 6, 42, 255, 102, 6, 39, 255, 80, 6, 42, 255, 0, 0, 0, 0, 102, 6, 39, 255, 80, 6, 42, 255, 146, 6, 54, 255, 173, 16, 28, 255, 80, 6, 42, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 6, 42, 255, 0, 0, 0, 0, 146, 6, 54, 255, 80, 6, 42, 255, 0, 0, 0, 0, 80, 6, 42, 255, 0, 0, 0, 0, 80, 6, 42, 255, 0, 0, 0, 0, 80, 6, 42, 255, 146, 6, 54, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		crimsonStemTop: "[75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 86, 44, 62, 255, 75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 86, 44, 62, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 126, 58, 86, 255, 134, 62, 90, 255, 126, 58, 86, 255, 146, 65, 96, 255, 126, 58, 86, 255, 126, 58, 86, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 68, 33, 49, 255, 75, 39, 55, 255, 134, 62, 90, 255, 75, 39, 55, 255, 75, 39, 55, 255, 92, 48, 66, 255, 92, 48, 66, 255, 106, 52, 75, 255, 92, 48, 66, 255, 106, 52, 75, 255, 106, 52, 75, 255, 106, 52, 75, 255, 106, 52, 75, 255, 92, 48, 66, 255, 92, 48, 66, 255, 146, 65, 96, 255, 75, 39, 55, 255, 75, 39, 55, 255, 134, 62, 90, 255, 75, 39, 55, 255, 146, 65, 96, 255, 146, 65, 96, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 126, 58, 86, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 92, 48, 66, 255, 134, 62, 90, 255, 75, 39, 55, 255, 75, 39, 55, 255, 126, 58, 86, 255, 92, 48, 66, 255, 134, 62, 90, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 134, 62, 90, 255, 106, 52, 75, 255, 126, 58, 86, 255, 75, 39, 55, 255, 68, 33, 49, 255, 134, 62, 90, 255, 106, 52, 75, 255, 134, 62, 90, 255, 126, 58, 86, 255, 92, 48, 66, 255, 92, 48, 66, 255, 106, 52, 75, 255, 106, 52, 75, 255, 92, 48, 66, 255, 92, 48, 66, 255, 126, 58, 86, 255, 134, 62, 90, 255, 92, 48, 66, 255, 126, 58, 86, 255, 68, 33, 49, 255, 75, 39, 55, 255, 126, 58, 86, 255, 92, 48, 66, 255, 126, 58, 86, 255, 126, 58, 86, 255, 75, 39, 55, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 92, 48, 66, 255, 126, 58, 86, 255, 126, 58, 86, 255, 92, 48, 66, 255, 134, 62, 90, 255, 75, 39, 55, 255, 75, 39, 55, 255, 126, 58, 86, 255, 106, 52, 75, 255, 134, 62, 90, 255, 126, 58, 86, 255, 92, 48, 66, 255, 126, 58, 86, 255, 106, 52, 75, 255, 106, 52, 75, 255, 126, 58, 86, 255, 106, 52, 75, 255, 126, 58, 86, 255, 134, 62, 90, 255, 106, 52, 75, 255, 126, 58, 86, 255, 75, 39, 55, 255, 75, 39, 55, 255, 126, 58, 86, 255, 106, 52, 75, 255, 134, 62, 90, 255, 126, 58, 86, 255, 92, 48, 66, 255, 126, 58, 86, 255, 106, 52, 75, 255, 92, 48, 66, 255, 126, 58, 86, 255, 92, 48, 66, 255, 126, 58, 86, 255, 134, 62, 90, 255, 92, 48, 66, 255, 126, 58, 86, 255, 75, 39, 55, 255, 68, 33, 49, 255, 126, 58, 86, 255, 106, 52, 75, 255, 134, 62, 90, 255, 126, 58, 86, 255, 92, 48, 66, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 106, 52, 75, 255, 126, 58, 86, 255, 126, 58, 86, 255, 92, 48, 66, 255, 126, 58, 86, 255, 68, 33, 49, 255, 75, 39, 55, 255, 126, 58, 86, 255, 92, 48, 66, 255, 134, 62, 90, 255, 126, 58, 86, 255, 92, 48, 66, 255, 92, 48, 66, 255, 75, 39, 55, 255, 92, 48, 66, 255, 106, 52, 75, 255, 106, 52, 75, 255, 126, 58, 86, 255, 134, 62, 90, 255, 106, 52, 75, 255, 126, 58, 86, 255, 75, 39, 55, 255, 75, 39, 55, 255, 126, 58, 86, 255, 106, 52, 75, 255, 134, 62, 90, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 126, 58, 86, 255, 134, 62, 90, 255, 92, 48, 66, 255, 126, 58, 86, 255, 75, 39, 55, 255, 68, 33, 49, 255, 134, 62, 90, 255, 106, 52, 75, 255, 134, 62, 90, 255, 134, 62, 90, 255, 126, 58, 86, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 146, 65, 96, 255, 134, 62, 90, 255, 92, 48, 66, 255, 126, 58, 86, 255, 68, 33, 49, 255, 75, 39, 55, 255, 134, 62, 90, 255, 106, 52, 75, 255, 92, 48, 66, 255, 106, 52, 75, 255, 92, 48, 66, 255, 92, 48, 66, 255, 92, 48, 66, 255, 92, 48, 66, 255, 92, 48, 66, 255, 92, 48, 66, 255, 92, 48, 66, 255, 92, 48, 66, 255, 92, 48, 66, 255, 134, 62, 90, 255, 75, 39, 55, 255, 75, 39, 55, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 126, 58, 86, 255, 126, 58, 86, 255, 134, 62, 90, 255, 126, 58, 86, 255, 126, 58, 86, 255, 146, 65, 96, 255, 126, 58, 86, 255, 126, 58, 86, 255, 134, 62, 90, 255, 134, 62, 90, 255, 134, 62, 90, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 86, 44, 62, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 86, 44, 62, 255, 75, 39, 55, 255, 75, 39, 55, 255]",
		crimsonStemSide: "[68, 33, 49, 255, 68, 33, 49, 255, 82, 24, 16, 255, 177, 39, 39, 255, 75, 39, 55, 255, 75, 39, 55, 255, 123, 0, 0, 255, 82, 24, 16, 255, 150, 21, 21, 255, 82, 24, 16, 255, 68, 33, 49, 255, 75, 39, 55, 255, 68, 33, 49, 255, 137, 15, 15, 255, 82, 24, 16, 255, 68, 33, 49, 255, 68, 33, 49, 255, 68, 33, 49, 255, 82, 24, 16, 255, 150, 21, 21, 255, 68, 33, 49, 255, 75, 39, 55, 255, 123, 0, 0, 255, 82, 24, 16, 255, 150, 21, 21, 255, 82, 24, 16, 255, 75, 39, 55, 255, 75, 39, 55, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 68, 33, 49, 255, 82, 24, 16, 255, 137, 15, 15, 255, 123, 0, 0, 255, 82, 24, 16, 255, 82, 24, 16, 255, 75, 39, 55, 255, 82, 24, 16, 255, 137, 15, 15, 255, 137, 15, 15, 255, 68, 33, 49, 255, 86, 44, 62, 255, 68, 33, 49, 255, 82, 24, 16, 255, 82, 24, 16, 255, 137, 15, 15, 255, 82, 24, 16, 255, 177, 39, 39, 255, 68, 33, 49, 255, 75, 39, 55, 255, 123, 0, 0, 255, 82, 24, 16, 255, 68, 33, 49, 255, 68, 33, 49, 255, 82, 24, 16, 255, 137, 15, 15, 255, 82, 24, 16, 255, 86, 44, 62, 255, 75, 39, 55, 255, 123, 0, 0, 255, 82, 24, 16, 255, 150, 21, 21, 255, 150, 21, 21, 255, 82, 24, 16, 255, 75, 39, 55, 255, 86, 44, 62, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 75, 39, 55, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 75, 39, 55, 255, 86, 44, 62, 255, 82, 24, 16, 255, 137, 15, 15, 255, 150, 21, 21, 255, 82, 24, 16, 255, 68, 33, 49, 255, 86, 44, 62, 255, 86, 44, 62, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 86, 44, 62, 255, 75, 39, 55, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 75, 39, 55, 255, 68, 33, 49, 255, 82, 24, 16, 255, 137, 15, 15, 255, 82, 24, 16, 255, 82, 24, 16, 255, 123, 0, 0, 255, 86, 44, 62, 255, 86, 44, 62, 255, 82, 24, 16, 255, 123, 0, 0, 255, 75, 39, 55, 255, 86, 44, 62, 255, 86, 44, 62, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 82, 24, 16, 255, 137, 15, 15, 255, 82, 24, 16, 255, 75, 39, 55, 255, 137, 15, 15, 255, 75, 39, 55, 255, 86, 44, 62, 255, 75, 39, 55, 255, 82, 24, 16, 255, 123, 0, 0, 255, 68, 33, 49, 255, 75, 39, 55, 255, 86, 44, 62, 255, 86, 44, 62, 255, 82, 24, 16, 255, 123, 0, 0, 255, 123, 0, 0, 255, 82, 24, 16, 255, 75, 39, 55, 255, 75, 39, 55, 255, 137, 15, 15, 255, 68, 33, 49, 255, 68, 33, 49, 255, 82, 24, 16, 255, 68, 33, 49, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 82, 24, 16, 255, 123, 0, 0, 255, 68, 33, 49, 255, 86, 44, 62, 255, 86, 44, 62, 255, 82, 24, 16, 255, 150, 21, 21, 255, 68, 33, 49, 255, 137, 15, 15, 255, 75, 39, 55, 255, 75, 39, 55, 255, 82, 24, 16, 255, 123, 0, 0, 255, 123, 0, 0, 255, 82, 24, 16, 255, 68, 33, 49, 255, 123, 0, 0, 255, 123, 0, 0, 255, 82, 24, 16, 255, 86, 44, 62, 255, 75, 39, 55, 255, 82, 24, 16, 255, 177, 39, 39, 255, 150, 21, 21, 255, 82, 24, 16, 255, 68, 33, 49, 255, 86, 44, 62, 255, 86, 44, 62, 255, 68, 33, 49, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 150, 21, 21, 255, 82, 24, 16, 255, 75, 39, 55, 255, 68, 33, 49, 255, 82, 24, 16, 255, 75, 39, 55, 255, 86, 44, 62, 255, 86, 44, 62, 255, 68, 33, 49, 255, 123, 0, 0, 255, 123, 0, 0, 255, 82, 24, 16, 255, 137, 15, 15, 255, 68, 33, 49, 255, 68, 33, 49, 255, 82, 24, 16, 255, 137, 15, 15, 255, 75, 39, 55, 255, 75, 39, 55, 255, 123, 0, 0, 255, 82, 24, 16, 255, 68, 33, 49, 255, 75, 39, 55, 255, 86, 44, 62, 255, 82, 24, 16, 255, 123, 0, 0, 255, 82, 24, 16, 255, 68, 33, 49, 255, 150, 21, 21, 255, 82, 24, 16, 255, 68, 33, 49, 255, 82, 24, 16, 255, 82, 24, 16, 255, 75, 39, 55, 255, 82, 24, 16, 255, 137, 15, 15, 255, 82, 24, 16, 255, 123, 0, 0, 255, 68, 33, 49, 255, 75, 39, 55, 255, 137, 15, 15, 255, 82, 24, 16, 255, 68, 33, 49, 255, 75, 39, 55, 255, 82, 24, 16, 255, 177, 39, 39, 255, 82, 24, 16, 255, 137, 15, 15, 255, 68, 33, 49, 255, 82, 24, 16, 255, 137, 15, 15, 255, 82, 24, 16, 255, 68, 33, 49, 255, 123, 0, 0, 255, 82, 24, 16, 255, 68, 33, 49, 255, 82, 24, 16, 255, 150, 21, 21, 255, 82, 24, 16, 255, 75, 39, 55, 255, 75, 39, 55, 255, 82, 24, 16, 255, 150, 21, 21, 255, 82, 24, 16, 255, 68, 33, 49, 255, 68, 33, 49, 255, 150, 21, 21, 255, 82, 24, 16, 255, 75, 39, 55, 255, 68, 33, 49, 255, 123, 0, 0, 255, 68, 33, 49, 255, 82, 24, 16, 255, 177, 39, 39, 255, 150, 21, 21, 255, 82, 24, 16, 255, 68, 33, 49, 255, 137, 15, 15, 255, 82, 24, 16, 255, 68, 33, 49, 255]",
		crimsonVines: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 4, 0, 255, 123, 0, 0, 255, 106, 4, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 255, 106, 4, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 255, 123, 0, 0, 255, 90, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 255, 106, 4, 0, 255, 197, 52, 57, 255, 255, 101, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 197, 52, 57, 255, 164, 36, 41, 255, 90, 0, 0, 255, 123, 0, 0, 255, 123, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 255, 148, 24, 24, 255, 164, 36, 41, 255, 164, 36, 41, 255, 197, 52, 57, 255, 0, 0, 0, 0, 197, 52, 57, 255, 255, 101, 0, 255, 164, 36, 41, 255, 90, 0, 0, 255, 123, 0, 0, 255, 90, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 255, 90, 0, 0, 255, 90, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 255, 90, 0, 0, 255, 123, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 4, 0, 255, 106, 4, 0, 255, 106, 4, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 4, 0, 255, 123, 0, 0, 255, 123, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 4, 0, 255, 106, 4, 0, 255, 123, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 4, 0, 255, 123, 0, 0, 255, 90, 0, 0, 255, 164, 36, 41, 255, 197, 52, 57, 255, 197, 52, 57, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 255, 123, 0, 0, 255, 164, 36, 41, 255, 197, 52, 57, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 255, 90, 0, 0, 255, 164, 36, 41, 255, 255, 101, 0, 255, 164, 36, 41, 255, 197, 52, 57, 255, 0, 0, 0, 0, 0, 0, 0, 0, 106, 4, 0, 255, 106, 4, 0, 255, 90, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 255, 90, 0, 0, 255, 90, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 255, 106, 4, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 255, 123, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 255, 106, 4, 0, 255, 123, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 255, 123, 0, 0, 255, 106, 4, 0, 255, 0, 0, 0, 0, 255, 101, 0, 255, 197, 52, 57, 255, 123, 0, 0, 255, 106, 4, 0, 255, 106, 4, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 4, 0, 255, 106, 4, 0, 255, 106, 4, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 255, 106, 4, 0, 255, 106, 4, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 197, 52, 57, 255, 197, 52, 57, 255, 164, 36, 41, 255, 90, 0, 0, 255, 0, 0, 0, 0, 123, 0, 0, 255, 106, 4, 0, 255, 106, 4, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 197, 52, 57, 255, 197, 52, 57, 255, 164, 36, 41, 255, 148, 24, 24, 255, 148, 24, 24, 255, 0, 0, 0, 0, 123, 0, 0, 255, 123, 0, 0, 255, 164, 36, 41, 255, 197, 52, 57, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 0, 0, 255, 90, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 123, 0, 0, 255, 123, 0, 0, 255, 148, 24, 24, 255, 255, 101, 0, 255, 197, 52, 57, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 106, 4, 0, 255, 106, 4, 0, 255, 123, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 106, 4, 0, 255, 123, 0, 0, 255, 90, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		warpedRoots: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 180, 133, 255, 20, 180, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 180, 133, 255, 20, 180, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 155, 133, 255, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 20, 180, 133, 255, 20, 180, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 180, 133, 255, 20, 180, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 20, 180, 133, 255, 20, 180, 133, 255, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 180, 133, 255, 20, 180, 133, 255, 22, 126, 134, 255, 0, 0, 0, 0, 20, 180, 133, 255, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 17, 155, 133, 255, 20, 180, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 17, 155, 133, 255, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 17, 155, 133, 255, 22, 126, 134, 255, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 17, 155, 133, 255, 0, 0, 0, 0, 17, 155, 133, 255, 20, 180, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 180, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 22, 126, 134, 255, 22, 126, 134, 255, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 17, 155, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 17, 155, 133, 255, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 20, 180, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 180, 133, 255, 22, 126, 134, 255, 0, 0, 0, 0, 22, 126, 134, 255, 17, 155, 133, 255, 0, 0, 0, 0, 17, 155, 133, 255, 20, 180, 133, 255, 22, 97, 91, 255, 0, 0, 0, 0, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 22, 126, 134, 255, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 22, 97, 91, 255, 22, 97, 91, 255, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 22, 97, 91, 255, 22, 97, 91, 255, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
		warpedWartBlock: "[22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 24, 111, 105, 255, 17, 155, 133, 255, 20, 180, 133, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 24, 111, 105, 255, 24, 111, 105, 255, 25, 99, 103, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 24, 111, 105, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 17, 155, 133, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 25, 99, 103, 255, 25, 99, 103, 255, 17, 155, 133, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 20, 180, 133, 255, 22, 126, 134, 255, 25, 99, 103, 255, 20, 180, 133, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 25, 99, 103, 255, 22, 126, 134, 255, 24, 111, 105, 255, 22, 126, 134, 255, 24, 111, 105, 255, 24, 111, 105, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 25, 99, 103, 255, 17, 155, 133, 255, 22, 126, 134, 255, 22, 126, 134, 255, 20, 180, 133, 255, 17, 155, 133, 255, 25, 99, 103, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 20, 180, 133, 255, 22, 126, 134, 255, 25, 99, 103, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 25, 99, 103, 255, 22, 126, 134, 255, 24, 111, 105, 255, 25, 99, 103, 255, 22, 126, 134, 255, 24, 111, 105, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 17, 155, 133, 255, 24, 111, 105, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 25, 99, 103, 255, 25, 99, 103, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 24, 111, 105, 255, 17, 155, 133, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 25, 99, 103, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 24, 111, 105, 255, 25, 99, 103, 255, 20, 180, 133, 255, 24, 111, 105, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 24, 111, 105, 255, 24, 111, 105, 255, 24, 111, 105, 255, 24, 111, 105, 255, 22, 126, 134, 255, 24, 111, 105, 255, 25, 99, 103, 255, 20, 180, 133, 255, 22, 126, 134, 255, 22, 126, 134, 255, 17, 155, 133, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 22, 126, 134, 255, 25, 99, 103, 255, 24, 111, 105, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 24, 111, 105, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 17, 155, 133, 255, 20, 180, 133, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 20, 180, 133, 255, 22, 126, 134, 255, 24, 111, 105, 255, 25, 99, 103, 255, 17, 155, 133, 255, 22, 126, 134, 255, 22, 126, 134, 255, 25, 99, 103, 255, 22, 126, 134, 255, 22, 126, 134, 255, 17, 155, 133, 255, 25, 99, 103, 255, 22, 126, 134, 255]",
		warpedStemTop: "[75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 86, 44, 62, 255, 75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 86, 44, 62, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 57, 131, 130, 255, 58, 142, 140, 255, 57, 131, 130, 255, 54, 157, 145, 255, 57, 131, 130, 255, 57, 131, 130, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 68, 33, 49, 255, 75, 39, 55, 255, 58, 142, 140, 255, 31, 87, 82, 255, 31, 87, 82, 255, 46, 95, 81, 255, 46, 95, 81, 255, 40, 112, 103, 255, 46, 95, 81, 255, 40, 112, 103, 255, 40, 112, 103, 255, 40, 112, 103, 255, 40, 112, 103, 255, 46, 95, 81, 255, 46, 95, 81, 255, 54, 157, 145, 255, 75, 39, 55, 255, 75, 39, 55, 255, 58, 142, 140, 255, 31, 87, 82, 255, 54, 157, 145, 255, 54, 157, 145, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 57, 131, 130, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 46, 95, 81, 255, 58, 142, 140, 255, 75, 39, 55, 255, 75, 39, 55, 255, 57, 131, 130, 255, 46, 95, 81, 255, 58, 142, 140, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 58, 142, 140, 255, 40, 112, 103, 255, 57, 131, 130, 255, 75, 39, 55, 255, 68, 33, 49, 255, 58, 142, 140, 255, 40, 112, 103, 255, 58, 142, 140, 255, 57, 131, 130, 255, 46, 95, 81, 255, 46, 95, 81, 255, 40, 112, 103, 255, 40, 112, 103, 255, 46, 95, 81, 255, 46, 95, 81, 255, 57, 131, 130, 255, 58, 142, 140, 255, 46, 95, 81, 255, 57, 131, 130, 255, 68, 33, 49, 255, 75, 39, 55, 255, 57, 131, 130, 255, 46, 95, 81, 255, 57, 131, 130, 255, 57, 131, 130, 255, 31, 87, 82, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 46, 95, 81, 255, 57, 131, 130, 255, 57, 131, 130, 255, 46, 95, 81, 255, 58, 142, 140, 255, 75, 39, 55, 255, 75, 39, 55, 255, 57, 131, 130, 255, 40, 112, 103, 255, 58, 142, 140, 255, 57, 131, 130, 255, 46, 95, 81, 255, 57, 131, 130, 255, 40, 112, 103, 255, 40, 112, 103, 255, 57, 131, 130, 255, 40, 112, 103, 255, 57, 131, 130, 255, 58, 142, 140, 255, 40, 112, 103, 255, 57, 131, 130, 255, 75, 39, 55, 255, 75, 39, 55, 255, 57, 131, 130, 255, 40, 112, 103, 255, 58, 142, 140, 255, 57, 131, 130, 255, 46, 95, 81, 255, 57, 131, 130, 255, 40, 112, 103, 255, 46, 95, 81, 255, 57, 131, 130, 255, 46, 95, 81, 255, 57, 131, 130, 255, 58, 142, 140, 255, 46, 95, 81, 255, 57, 131, 130, 255, 75, 39, 55, 255, 68, 33, 49, 255, 57, 131, 130, 255, 40, 112, 103, 255, 58, 142, 140, 255, 57, 131, 130, 255, 46, 95, 81, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 40, 112, 103, 255, 57, 131, 130, 255, 57, 131, 130, 255, 46, 95, 81, 255, 57, 131, 130, 255, 68, 33, 49, 255, 75, 39, 55, 255, 57, 131, 130, 255, 46, 95, 81, 255, 58, 142, 140, 255, 57, 131, 130, 255, 46, 95, 81, 255, 46, 95, 81, 255, 31, 87, 82, 255, 46, 95, 81, 255, 40, 112, 103, 255, 40, 112, 103, 255, 57, 131, 130, 255, 58, 142, 140, 255, 40, 112, 103, 255, 57, 131, 130, 255, 75, 39, 55, 255, 75, 39, 55, 255, 57, 131, 130, 255, 40, 112, 103, 255, 58, 142, 140, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 57, 131, 130, 255, 58, 142, 140, 255, 46, 95, 81, 255, 57, 131, 130, 255, 75, 39, 55, 255, 68, 33, 49, 255, 58, 142, 140, 255, 40, 112, 103, 255, 58, 142, 140, 255, 58, 142, 140, 255, 57, 131, 130, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 54, 157, 145, 255, 58, 142, 140, 255, 46, 95, 81, 255, 57, 131, 130, 255, 68, 33, 49, 255, 75, 39, 55, 255, 58, 142, 140, 255, 40, 112, 103, 255, 46, 95, 81, 255, 40, 112, 103, 255, 46, 95, 81, 255, 46, 95, 81, 255, 46, 95, 81, 255, 46, 95, 81, 255, 46, 95, 81, 255, 46, 95, 81, 255, 46, 95, 81, 255, 46, 95, 81, 255, 46, 95, 81, 255, 58, 142, 140, 255, 75, 39, 55, 255, 75, 39, 55, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 57, 131, 130, 255, 57, 131, 130, 255, 58, 142, 140, 255, 57, 131, 130, 255, 57, 131, 130, 255, 54, 157, 145, 255, 57, 131, 130, 255, 57, 131, 130, 255, 58, 142, 140, 255, 58, 142, 140, 255, 58, 142, 140, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 86, 44, 62, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 86, 44, 62, 255, 75, 39, 55, 255, 75, 39, 55, 255]",
		warpedStemSide: "[68, 33, 49, 255, 68, 33, 49, 255, 69, 45, 92, 255, 20, 149, 111, 255, 75, 39, 55, 255, 75, 39, 55, 255, 22, 97, 91, 255, 69, 45, 92, 255, 17, 128, 102, 255, 69, 45, 92, 255, 68, 33, 49, 255, 75, 39, 55, 255, 68, 33, 49, 255, 19, 108, 104, 255, 69, 45, 92, 255, 68, 33, 49, 255, 68, 33, 49, 255, 68, 33, 49, 255, 69, 45, 92, 255, 17, 128, 102, 255, 68, 33, 49, 255, 75, 39, 55, 255, 22, 97, 91, 255, 69, 45, 92, 255, 17, 128, 102, 255, 69, 45, 92, 255, 75, 39, 55, 255, 75, 39, 55, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 68, 33, 49, 255, 69, 45, 92, 255, 19, 108, 104, 255, 22, 97, 91, 255, 69, 45, 92, 255, 69, 45, 92, 255, 75, 39, 55, 255, 69, 45, 92, 255, 19, 108, 104, 255, 19, 108, 104, 255, 68, 33, 49, 255, 86, 44, 62, 255, 68, 33, 49, 255, 69, 45, 92, 255, 69, 45, 92, 255, 19, 108, 104, 255, 69, 45, 92, 255, 20, 149, 111, 255, 68, 33, 49, 255, 75, 39, 55, 255, 22, 97, 91, 255, 69, 45, 92, 255, 68, 33, 49, 255, 68, 33, 49, 255, 69, 45, 92, 255, 19, 108, 104, 255, 69, 45, 92, 255, 86, 44, 62, 255, 75, 39, 55, 255, 22, 97, 91, 255, 69, 45, 92, 255, 17, 128, 102, 255, 17, 128, 102, 255, 69, 45, 92, 255, 75, 39, 55, 255, 86, 44, 62, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 75, 39, 55, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 75, 39, 55, 255, 86, 44, 62, 255, 69, 45, 92, 255, 19, 108, 104, 255, 17, 128, 102, 255, 69, 45, 92, 255, 68, 33, 49, 255, 86, 44, 62, 255, 86, 44, 62, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 86, 44, 62, 255, 75, 39, 55, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 75, 39, 55, 255, 68, 33, 49, 255, 69, 45, 92, 255, 19, 108, 104, 255, 69, 45, 92, 255, 69, 45, 92, 255, 22, 97, 91, 255, 86, 44, 62, 255, 86, 44, 62, 255, 69, 45, 92, 255, 22, 97, 91, 255, 75, 39, 55, 255, 86, 44, 62, 255, 86, 44, 62, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 69, 45, 92, 255, 19, 108, 104, 255, 69, 45, 92, 255, 75, 39, 55, 255, 19, 108, 104, 255, 75, 39, 55, 255, 86, 44, 62, 255, 75, 39, 55, 255, 69, 45, 92, 255, 22, 97, 91, 255, 68, 33, 49, 255, 75, 39, 55, 255, 86, 44, 62, 255, 86, 44, 62, 255, 69, 45, 92, 255, 22, 97, 91, 255, 22, 97, 91, 255, 69, 45, 92, 255, 75, 39, 55, 255, 75, 39, 55, 255, 19, 108, 104, 255, 68, 33, 49, 255, 68, 33, 49, 255, 69, 45, 92, 255, 68, 33, 49, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 68, 33, 49, 255, 75, 39, 55, 255, 75, 39, 55, 255, 69, 45, 92, 255, 22, 97, 91, 255, 68, 33, 49, 255, 86, 44, 62, 255, 86, 44, 62, 255, 69, 45, 92, 255, 17, 128, 102, 255, 68, 33, 49, 255, 19, 108, 104, 255, 75, 39, 55, 255, 75, 39, 55, 255, 69, 45, 92, 255, 22, 97, 91, 255, 22, 97, 91, 255, 69, 45, 92, 255, 68, 33, 49, 255, 22, 97, 91, 255, 22, 97, 91, 255, 69, 45, 92, 255, 86, 44, 62, 255, 75, 39, 55, 255, 69, 45, 92, 255, 20, 149, 111, 255, 17, 128, 102, 255, 69, 45, 92, 255, 68, 33, 49, 255, 86, 44, 62, 255, 86, 44, 62, 255, 68, 33, 49, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 75, 39, 55, 255, 75, 39, 55, 255, 68, 33, 49, 255, 17, 128, 102, 255, 69, 45, 92, 255, 75, 39, 55, 255, 68, 33, 49, 255, 69, 45, 92, 255, 75, 39, 55, 255, 86, 44, 62, 255, 86, 44, 62, 255, 68, 33, 49, 255, 22, 97, 91, 255, 22, 97, 91, 255, 69, 45, 92, 255, 19, 108, 104, 255, 68, 33, 49, 255, 68, 33, 49, 255, 69, 45, 92, 255, 19, 108, 104, 255, 75, 39, 55, 255, 75, 39, 55, 255, 22, 97, 91, 255, 69, 45, 92, 255, 68, 33, 49, 255, 75, 39, 55, 255, 86, 44, 62, 255, 69, 45, 92, 255, 22, 97, 91, 255, 69, 45, 92, 255, 68, 33, 49, 255, 17, 128, 102, 255, 69, 45, 92, 255, 68, 33, 49, 255, 69, 45, 92, 255, 69, 45, 92, 255, 75, 39, 55, 255, 69, 45, 92, 255, 19, 108, 104, 255, 69, 45, 92, 255, 22, 97, 91, 255, 68, 33, 49, 255, 75, 39, 55, 255, 19, 108, 104, 255, 69, 45, 92, 255, 68, 33, 49, 255, 75, 39, 55, 255, 69, 45, 92, 255, 20, 149, 111, 255, 69, 45, 92, 255, 19, 108, 104, 255, 68, 33, 49, 255, 69, 45, 92, 255, 19, 108, 104, 255, 69, 45, 92, 255, 68, 33, 49, 255, 22, 97, 91, 255, 69, 45, 92, 255, 68, 33, 49, 255, 69, 45, 92, 255, 17, 128, 102, 255, 69, 45, 92, 255, 75, 39, 55, 255, 75, 39, 55, 255, 69, 45, 92, 255, 17, 128, 102, 255, 69, 45, 92, 255, 68, 33, 49, 255, 68, 33, 49, 255, 17, 128, 102, 255, 69, 45, 92, 255, 75, 39, 55, 255, 68, 33, 49, 255, 22, 97, 91, 255, 68, 33, 49, 255, 69, 45, 92, 255, 20, 149, 111, 255, 17, 128, 102, 255, 69, 45, 92, 255, 68, 33, 49, 255, 19, 108, 104, 255, 69, 45, 92, 255, 68, 33, 49, 255]",
		warpedVines: "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 17, 155, 133, 255, 17, 155, 133, 255, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 17, 155, 133, 255, 17, 155, 133, 255, 22, 97, 91, 255, 0, 0, 0, 0, 17, 155, 133, 255, 20, 180, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 22, 126, 134, 255, 17, 155, 133, 255, 20, 180, 133, 255, 17, 155, 133, 255, 22, 126, 134, 255, 17, 155, 133, 255, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 17, 155, 133, 255, 20, 180, 133, 255, 20, 180, 133, 255, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 17, 155, 133, 255, 17, 155, 133, 255, 20, 180, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 22, 126, 134, 255, 17, 155, 133, 255, 17, 155, 133, 255, 17, 155, 133, 255, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 22, 126, 134, 255, 17, 155, 133, 255, 17, 155, 133, 255, 22, 126, 134, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 17, 155, 133, 255, 17, 155, 133, 255, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 180, 133, 255, 17, 155, 133, 255, 22, 126, 134, 255, 22, 97, 91, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 20, 180, 133, 255, 20, 180, 133, 255, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 180, 133, 255, 17, 155, 133, 255, 0, 0, 0, 0, 20, 180, 133, 255, 20, 180, 133, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 17, 155, 133, 255, 22, 126, 134, 255, 20, 180, 133, 255, 20, 180, 133, 255, 20, 180, 133, 255, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 155, 133, 255, 20, 180, 133, 255, 22, 126, 134, 255, 22, 97, 91, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 126, 134, 255, 17, 155, 133, 255, 17, 155, 133, 255, 22, 126, 134, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 155, 133, 255, 17, 155, 133, 255, 22, 126, 134, 255, 22, 97, 91, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 97, 91, 255, 22, 126, 134, 255, 22, 126, 134, 255, 22, 97, 91, 255, 22, 97, 91, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]",
	};

	var blockData = [{
			name: "air",
			id: 0,
			textures: [],
			transparent: true,
			shadow: false,
			explodable: false
		},
		{
			name: "dirt",
			blastResistance: 0.2
		},
		{
			name: "stone"
		},
		{
			name: "craftingTable",
			textures: ["oakPlanks", "craftingTableTop", "craftingTableSide", "craftingTableFront"],
		},
		{
			name: "glass",
			transparent: true,
			shadow: false,
			blastResistance: 0.1,
		},
		{
			name: "cobblestone"
		},
		{
			name: "mossyCobble"
		},
		{
			name: "stoneBricks"
		},
		{
			name: "mossyStoneBricks"
		},
		{
			name: "chiseledStoneBricks"
		},
		{
			name: "smoothStone"
		},
		{
			name: "granite"
		},
		{
			name: "polishedGranite"
		},
		{
			name: "diorite"
		},
		{
			name: "polishedDiorite"
		},
		{
			name: "andesite"
		},
		{
			name: "polishedAndesite"
		},
		{
			name: "bricks"
		},
		{
			name: "smoothBasalt",
			blastResistance: 0.3,
		},
		{
			name: "tuff",
			blastResistance: 0.3,
		},
		{
			name: "calcite"
		},
		{
			name: "amethystBlock"
		},
		{
			name: "coalOre"
		},
		{
			name: "deepslateCoalOre",
			blastResistance: 0.3,
		},
		{
			name: "copperOre"
		},
		{
			name: "deepslateCopperOre",
			blastResistance: 0.3,
		},
		{
			name: "ironOre"
		},
		{
			name: "deepslateIronOre",
			blastResistance: 0.3,
		},
		{
			name: "goldOre"
		},
		{
			name: "deepslateGoldOre",
			blastResistance: 0.3,
		},
		{
			name: "redstoneOre"
		},
		{
			name: "deepslateRedstoneOre",
			blastResistance: 0.3,
		},
		{
			name: "lapisOre"
		},
		{
			name: "deepslateLapisOre",
			blastResistance: 0.3,
		},
		{
			name: "emeraldOre"
		},
		{
			name: "deepslateEmeraldOre",
			blastResistance: 0.3,
		},
		{
			name: "diamondOre"
		},
		{
			name: "deepslateDiamondOre",
			blastResistance: 0.3,
		},
		{
			name: "ancientDebris",
			textures: ["ancientDebrisTop", "ancientDebrisSide"],
			explodable: false
		},
		{
			name: "gildedDebris",
			textures: ["gildedDebrisTop", "gildedDebrisSide"],
			explodable: false
		},
		{
			name: "coalBlock",
			blastResistance: 0.32,
		},
		{
			name: "copperBlock",
			onload: function (x, y, z) {
				if (((blockData[world.getBlock(x + 1, y - 2, z)].dtexture[0] == "copperBlock" && blockData[world.getBlock(x - 1, y - 2, z)].dtexture[0] == "copperBlock") || (blockData[world.getBlock(x, y - 2, z - 1)].dtexture[0] == "copperBlock" && blockData[world.getBlock(x, y - 2, z + 1)].dtexture[0] == "copperBlock")) && blockData[world.getBlock(x, y - 2, z)].dtexture[0] == "copperBlock" && blockData[world.getBlock(x, y - 1, z)].dtexture[0] == "copperBlock") {
					var s = new Sound(sounds.tnt);
					s.play();
					setTimeout(function () {
						s.stop();
					}, 3000);
					explode(x, y - 1, z, 15, 0.16);
					world.setBlock(x, y, z, blockIds.netheriteBlock);
					world.setBlock(x, y - 1, z, blockIds.netheriteBlock);
					world.setBlock(x, y - 2, z, blockIds.netheriteBlock);
					world.setBlock(x + 1, y - 2, z, blockIds.netheriteBlock);
					world.setBlock(x - 1, y - 2, z, blockIds.netheriteBlock);
				}
			},
			blastResistance: 0.32,
		},
		{
			name: "ironBlock",
			blastResistance: 0.32,
		},
		{
			name: "goldBlock",
			blastResistance: 0.32,
		},
		{
			name: "redstoneBlock",
			blastResistance: 0.32,
			onload: function (xx, yy, zz) {
				for (var t of ["nuke", "tnt", "megaTnt"]) {
					for (var x = -1; x <= 1; x++) {
						for (var z = -1; z <= 1; z++) {
							for (var y = -1; y <= 1; y++) {
								if (Math.abs(x) == Math.abs(z) && Math.abs(x) == 1 || Math.abs(x) == Math.abs(y) && Math.abs(x) == 1 || Math.abs(z) == Math.abs(y) && Math.abs(y) == 1) {
									continue;
								}
								if (blockData[world.getBlock(xx + x, yy + y, zz + z)].name == t) {

									blockData[world.getBlock(xx + x, yy + y, zz + z)].explode(xx + x, yy + y, zz + z);
								}
							}
						}
					}
				}
			}
		},
		{
			name: "lapisBlock",
			blastResistance: 0.32,
		},
		{
			name: "emeraldBlock",
			blastResistance: 0.32,
		},
		{
			name: "diamondBlock",
			blastResistance: 0.36,
		},
		{
			name: "netheriteBlock",
			explodable: false
		},
		{
			name: "deepslate",
			blastResistance: 0.3,
		},
		{
			name: "cobbledDeepslate",
			blastResistance: 0.3,
		},
		{
			name: "deepslateTiles",
			blastResistance: 0.3,
		},
		{
			name: "deepslateBricks",
			blastResistance: 0.3,
		},
		{
			name: "oakPlanks",
			blastResistance: 0.21,
		},
		{
			name: "oakLog",
			textures: ["logTop", "logSide"],
			blastResistance: 0.22,
		},
		{
			name: "acaciaPlanks",
			blastResistance: 0.21,
		},
		{
			name: "acaciaLog",
			textures: ["acaciaLogTop", "acaciaLogSide"],
			blastResistance: 0.22,
		},
		{
			name: "birchPlanks",
			blastResistance: 0.21,
		},
		{
			name: "birchLog",
			textures: ["birchLogTop", "birchLogSide"],
			blastResistance: 0.22,
		},
		{
			name: "darkOakPlanks",
			blastResistance: 0.21,
		},
		{
			name: "darkOakLog",
			textures: ["darkOakLogTop", "darkOakLogSide"],
			blastResistance: 0.22,
		},
		{
			name: "junglePlanks",
			blastResistance: 0.21,
		},
		{
			name: "jungleLog",
			textures: ["jungleLogTop", "jungleLogSide"],
			blastResistance: 0.22,
		},
		{
			name: "sprucePlanks",
			blastResistance: 0.21,
		},
		{
			name: "spruceLog",
			textures: ["spruceLogTop", "spruceLogSide"],
			blastResistance: 0.22,
		},
		{
			name: "grassBlock",
			textures: ["dirt", "grassTop", "grassSide"],
			blastResistance: 0.19
		},
		{
			name: "darkGrassBlock",
			textures: ["dirt", "darkGrassTop", "darkGrassSide"],
			blastResistance: 0.19
		},
		{
			name: "lightGrassBlock",
			textures: ["dirt", "lightGrassBlockTop", "lightGrassBlockSide"],
			blastResistance: 0.19
		},
		{
			name: "leaves",
			transparent: true,
			blastResistance: 0.1
		},
		{
			name: "spruceLeaves",
			transparent: true,
			blastResistance: 0.1
		},
		{
			name: "blueBerryLeaves",
			transparent: true,
			blastResistance: 0.1
		},
		{
			name: "redBerryLeaves",
			transparent: true,
			blastResistance: 0.1
		},
		{
			name: "pinkLeaves",
			transparent: true,
			blastResistance: 0.1
		},
		{
			name: "autumnLeaves",
			transparent: true,
			blastResistance: 0.1
		},
		{
			name: "cactus",
			textures: ["cactusBottom", "cactusTop", "cactusSide"],
			transparent: true,
			cactus: true,
			blastResistance: 0.16,
			onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "sand" && blockData[world.getBlock(x, y - 1, z)].name != "cactus") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "sand",
			blastResistance: 0.2,
			onload: function (x, y, z) {
				setTimeout(function () {
					if ((!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape) && blockData[world.getBlock(x, y, z)].name == "sand") {
						explode(x, y, z, 0);
						world.setBlock(x, y - 1, z, blockIds.sand)
					}
				}, 100)
			}
		},
		{
			name: "sandstone",
			textures: ["sandstoneBottom", "sandstoneTop", "sandstone"],
			blastResistance: 0.24
		},
		{
			name: "chiseledSandstone",
			textures: ["sandstoneBottom", "sandstoneTop", "chiseledSandstone"],
			blastResistance: 0.24
		},
		{
			name: "cutSandstone",
			textures: ["sandstoneBottom", "sandstoneTop", "cutSandstone"],
			blastResistance: 0.24
		},
		{
			name: "smoothSandstone",
			textures: "sandstoneTop",
			blastResistance: 0.24
		},
		{
			name: "gravel",
			blastResistance: 0.2,
			onload: function (x, y, z) {
				setTimeout(function () {
					if ((!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape) && blockData[world.getBlock(x, y, z)].name == "gravel") {
						explode(x, y, z, 0);
						world.setBlock(x, y - 1, z, blockIds.gravel)
					}
				}, 100)
			}
		},
		{
			name: "obsidian",
			blastResistance: 1.5
		},
		{
			name: "cryingObsidian",
			shadow: false,
			blastResistance: 1.3
		},
		{
			name: "netherrack",
			blastResistance: 0.2
		},
		{
			name: "crimsonNylium",
			textures: ["netherrack", "crimsonNyliumTop", "crimsonNyliumSide"],
			blastResistance: 0.2
		},
		{
			name: "warpedNylium",
			textures: ["netherrack", "warpedNyliumTop", "warpedNyliumSide"],
			blastResistance: 0.2
		},
		{
			name: "netherQuartzOre",
			blastResistance: 0.2
		},
		{
			name: "netherGoldOre",
			blastResistance: 0.2
		},
		{
			name: "glowstone",
			blastResistance: 0.1
		},
		{
			name: "shroomlight"
		},
		{
			name: "netherBricks"
		},
		{
			name: "redNetherBricks"
		},
		{
			name: "netherWartBlock"
		},
		{
			name: "warpedWartBlock"
		},
		{
			name: "soulSand",
			slide: 0.04,
			blastResistance: 0.2
		},
		{
			name: "soulSoil",
			blastResistance: 0.2
		},
		{
			name: "magma",
			blastResistance: 0.2
		},
		{
			name: "blackstone",
			textures: ["blackstoneTop", "blackstone"],
		},
		{
			name: "gildedBlackstone"
		},
		{
			name: "polishedBlackstoneBricks"
		},
		{
			name: "chiseledPolishedBlackstone"
		},
		{
			name: "basalt",
			textures: ["basaltTop", "basaltSide"],
		},
		{
			name: "polishedBasalt",
			textures: ["polishedBasaltTop", "polishedBasaltSide"],
		},
		{
			name: "whiteWool"
		},
		{
			name: "orangeWool"
		},
		{
			name: "magentaWool"
		},
		{
			name: "lightBlueWool"
		},
		{
			name: "yellowWool"
		},
		{
			name: "limeWool"
		},
		{
			name: "pinkWool"
		},
		{
			name: "grayWool"
		},
		{
			name: "lightGrayWool"
		},
		{
			name: "cyanWool"
		},
		{
			name: "purpleWool"
		},
		{
			name: "blueWool"
		},
		{
			name: "brownWool"
		},
		{
			name: "greenWool"
		},
		{
			name: "redWool"
		},
		{
			name: "blackWool"
		},
		{
			name: "boneBlock"
		},
		{
			name: "orangeConcrete"
		},
		{
			name: "magentaConcrete"
		},
		{
			name: "lightBlueConcrete"
		},
		{
			name: "yellowConcrete"
		},
		{
			name: "limeConcrete"
		},
		{
			name: "pinkConcrete"
		},
		{
			name: "grayConcrete"
		},
		{
			name: "lightGrayConcrete"
		},
		{
			name: "cyanConcrete"
		},
		{
			name: "purpleConcrete"
		},
		{
			name: "blueConcrete"
		},
		{
			name: "brownConcrete"
		},
		{
			name: "greenConcrete"
		},
		{
			name: "redConcrete"
		},
		{
			name: "blackConcrete"
		},
		{
			name: "tnt",
			textures: ["tntBottom", "tntTop", "tntSides"],
			explodable: false,
			transparent: true,
			bomb: true,
			explode: function (x, y, z) {
				var s = new Sound(sounds.tnt);
				s.play();
				setTimeout(function () {
					s.stop();
				}, 3000);
				setTimeout(function () {
					if (blockData[world.getBlock(x, y, z)].name == "tnt") {
						explode(x, y, z, 12, 0.07);
					} else {
						s.stop()
					}
				}, 800);
			}
		},
		{
			name: "megaTnt",
			textures: ["tntBottom", "tntTop", "nukeSide"],
			explodable: false,
			transparent: true,
			bomb: true,
			explode: function (x, y, z) {
				var s = new Sound(sounds.tnt);
				s.play();
				setTimeout(function () {
					s.stop();
				}, 3000);
				setTimeout(function () {
					if (blockData[world.getBlock(x, y, z)].name == "megaTnt") {
						explode(x, y, z, 18, 0.06);
					} else {
						s.stop();
					}
				}, 800);
			}
		},
		{
			name: "nuke",
			textures: ["limeConcrete", "gNukeTop", "gNuke"],
			explodable: false,
			transparent: true,
			bomb: true,
			explode: function (x, y, z) {
				var s = new Sound(sounds.tnt);
				s.play();
				setTimeout(function () {
					s.stop();
				}, 3000);
				setTimeout(function () {
					if (blockData[world.getBlock(x, y, z)].name == "nuke") {
						explode(x, y, z, (blockData[world.getBlock(x + 1, y, z)].name == "witherRose" && blockData[world.getBlock(x - 1, y, z)].name == "witherRose" && blockData[world.getBlock(x, y, z + 1)].name == "witherRose" && blockData[world.getBlock(x, y, z - 1)].name == "witherRose" ? (blockData[world.getBlock(x, y - 1, z)].name == "redstoneBlock" ? 99 : 69) : (blockData[world.getBlock(x, y - 1, z)].name == "lapisBlock" ? parseInt(prompt("Enter radius (be cautious, may kill your computer if it's larger than 100)")) || 32 : 32)), 0.05);
					} else {
						s.stop()
					}
				}, 800);
			}
		},
		{
			name: "effectBlock",
			textures: ["luckyBlock", "luckyBlock"],
			explodable: false,
			onload: function (x, y, z) {
				explode(x, y, z, 0);
				var res = prompt("(1) Speed, (2) Jump boost, (3) Clear");
				if (res == "1") {
					var lvl = prompt("1, 2, or 3");
					if (lvl == "1") {
						p.speed = 0.1;
						alert("Speed 1 applied");
					} else if (lvl == "2") {
						p.speed = 0.14;
						alert("Speed 2 applied");
					} else if (lvl == "3") {
						p.speed = 0.18;
						alert("Speed 3 applied");
					}
					var dur = parseInt(prompt("How many seconds?"));
					setTimeout(function () {
						p.speed = 0.075;
					}, (!dur ? 60000 : dur * 1000));
				}
				if (res == "2") {
					var lvl = prompt("1 or 2");
					if (lvl == "1") {
						p.jumpSpeed = 0.4;
						alert("Jump boost 1 applied");
					} else if (lvl == "2") {
						p.jumpSpeed = 0.5;
						alert("Jump boost 2 applied");
					}
					var dur = parseInt(prompt("How many seconds?"));
					setTimeout(function () {
						p.jumpSpeed = 0.3;
					}, (!dur ? 60000 : dur * 1000));
				}
				if (res == "3") {
					p.speed = 0.075;
					p.gravityStrength = -0.032;
					p.jumpSpeed = 0.3;
				}
			}
			/*
        Deprecated lucky block code

        function(x, y, z){
          luckyPlaced = true;
          setTimeout(function() {
            if (luckyPlaced) {
              explode(x, y, z, 1, 0);
              rchoice([
                function() {
                  var bb = rchoice([blockIds.diamondBlock, blockIds.netheriteBlock, blockIds.amethystBlock])
                  for (var xx = x - 4; xx <= x + 4; xx++) {
                    for (var zz = z - 4; zz <= z + 4; zz++) {
                      var biome = getBiome(xx, zz, noise((xx) * generator.biomeSmooth, (zz) * generator.biomeSmooth));
                      var caveSmooth = generator.biome[biome].caveSmooth;
                      var caveFreq = generator.biome[biome].caveFrequency;
                      wx = xx;
                      wz = zz;
                      var ggg = Math.round(noise(wx * generator.biome[biome].smooth, wz * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra;
                      for (var yy = ggg + 4; yy > ggg - 4; yy--) {
                        if (world.getBlock(xx, yy, zz)) {
                          if (blockData[world.getBlock(xx, yy, zz)].crossShape) {
                            world.setBlock(xx, yy, zz, 0);
                          }
                          else {
                            world.setBlock(xx, yy, zz, bb);
                          }
                        }
                      }
                    }
                  }
                },
                function() {
                  explode(x, y, z, rchoice([3, 4, 5, 21]), 0.1);
                },
                function() {
                  var n = parseInt(prompt("Enter a number"));
                  if (n === 0 || Math.abs(n) <= 1000) {
                    if (Math.abs(n) == 69) {
                      alert("Nice"); // lol
                    }
                    p.x = rchoice([-1, 1]) * n;
                    p.z = rchoice([-1, 1]) * n;
                  }
                },
                function() {
                  explode(x, y-1, z, 1, 0);
                  world.setBlock(x, y-1, z, blockIds.sandstone);
                  for (var yy = y; yy < (y+100 > 159 ? 159 : y + 100); yy++) {
                    if (blockData[world.getBlock(x, yy, z)].id == 0) {
                      world.setBlock(x, yy, z, blockIds.cactus);
                    }
                    else {
                      break;
                    }
                  }
                },
                function() {
                  world.setBlock(x, y, z, rchoice([blockIds.tnt, blockIds.megaTnt, blockIds.nuke]))
                },
                function() {
                  for (var yy = Math.round(p.y); yy > 1; yy--) {
                    explode(p.x, yy, p.z, 1, 0);
                    explode(p.x+1, yy, p.z, 1, 0);
                    explode(p.x-1, yy, p.z, 1, 0);
                    explode(p.x, yy, p.z+1, 1, 0);
                    explode(p.x, yy, p.z-1, 1, 0);
                  }
                },
                function() {
                  for (var yy = Math.round(p.y); yy > 1; yy--) {
                    explode(Math.round(p.x), yy, Math.round(p.z), 1, 0);
                  }
    	            explode(Math.round(p.x), 1, Math.round(p.z), 1, 0);
                  world.setBlock(Math.round(p.x), 1, Math.round(p.z), blockIds.slime)
                },
                function() {
                  p.velocity.y = 1.8;
                },
                function() {
                  var oldY = p.y, oldX = p.x, oldZ = p.z;
                  p.y = -1;
                },
                function() {
                  world.setBlock(x, y, z, rchoice([blockIds.redMushroom, blockIds.brownMushroom, blockIds.amethystCluster]));
                },
                function() {
                  spawnMushroom(x, y, z);
                },
                function() {
                  world.spawnBlock(x, y, z, rchoice([blockIds.netheriteBlock, blockIds.diamondBlock, blockIds.goldBlock, blockIds.emeraldBlock]));
                },
                function() {
                  world.spawnBlock(x, y, z, rchoice([blockIds.coalBlock, blockIds.copperBlock, blockIds.ironBlock, blockIds.lapisBlock, blockIds.redstoneBlock]));
                },
                function() {
                  choice([
                    function() {
                      world.spawnBlock(x, y, z, rchoice([blockIds.fern, blockIds.sweetBerryBush]));
                      setTimeout(function() {
                        explode(x, y, z, 0, 0);
                        world.spawnBlock(x, y, z, blockIds.deadBush);
                      }, 800);
                    },
                    function() {
                      world.spawnBlock(x, y, z, rchoice([blockIds.poppy, blockIds.oxeyeDaisy, blockIds.cornFlower]));
                      setTimeout(function() {
                        explode(x, y, z, 0, 0);
                        world.spawnBlock(x, y, z, blockIds.witherRose);
                      }, 800);
                    }
                  ])();
                }
              ])();
              luckyPlaced = false;
            }
            else {
              explode(x, y, z, 1, 0);
            }
          }, 800);
        }
      */
		},
		{
			name: "lodestone",
			textures: ["lodestoneTop", "lodestoneSide"],
			onload: function (x, y, z) {
				setTimeout(function () {
					explode(x, y, z, 1, 0);
					var xx = parseInt(prompt("Enter x coordinate"));
					var yy = parseInt(prompt("Enter y coordinate"));
					var zz = parseInt(prompt("Enter z coordinate"));
					if ((Math.abs(xx) <= 100000 && Math.abs(zz) <= 100000 && Math.abs(yy) <= 1000 && yy > 0)) {
						p.x = xx;
						p.z = zz;
						p.y = yy;
					}
				}, 500);
			},
			explodable: false
		},
		{
			name: "beeNest",
			textures: ["beeNestBottom", "beeNestTop", "beeNestSide", "beeNestFront"],
			blastResistance: 0.1,
		},
		{
			name: "slime",
			transparent: true,
			shadow: false,
			bounciness: 0.8,
			slide: 0.05,
			blastResistance: 0.1,
		},
		{
			name: "honeyBlock",
			textures: ["honeyBlockBottom", "honeyBlockTop", "honeyBlockSide"],
			transparent: true,
			shadow: false,
			bounciness: -0.2,
			slide: 0.03,
			blastResistance: 0.1,
		},
		{
			name: "water",
			transparent: false,
			shadow: false,
			liquid: true,
			solid: false,
			slide: 0.1,
      explodable: false,
			onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].liquid) {
					return;
				}
				setTimeout(function () {
					if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape) {
						if (blockData[world.getBlock(x, y - 1, z)].crossShape) {
							explode(x, y - 1, z, 0)
						}
						world.setBlock(x, y - 1, z, blockIds.water);
					} else if (!blockData[world.getBlock(x, y - 1, z)].liquid) {
						if (!world.getBlock(x + 1, y - 1, z) || blockData[world.getBlock(x + 1, y - 1, z)].crossShape) {
							if (blockData[world.getBlock(x + 1, y - 1, z)].crossShape) {
								explode(x + 1, y - 1, z, 0)
							}
							world.setBlock(x + 1, y - 1, z, blockIds.water);
						}
						if (!world.getBlock(x - 1, y - 1, z) || blockData[world.getBlock(x - 1, y - 1, z)].crossShape) {
							if (blockData[world.getBlock(x - 1, y - 1, z)].crossShape) {
								explode(x - 1, y - 1, z, 0)
							}
							world.setBlock(x - 1, y - 1, z, blockIds.water);
						}
						if (!world.getBlock(x, y - 1, z + 1) || blockData[world.getBlock(x, y - 1, z + 1)].crossShape) {
							if (blockData[world.getBlock(x, y - 1, z + 1)].crossShape) {
								explode(x, y - 1, z + 1, 0)
							}
							world.setBlock(x, y - 1, z + 1, blockIds.water);
						}
						if (!world.getBlock(x, y - 1, z - 1) || blockData[world.getBlock(x, y - 1, z - 1)].crossShape) {
							if (blockData[world.getBlock(x, y - 1, z - 1)].crossShape) {
								explode(x, y - 1, z - 1, 0)
							}
							world.setBlock(x, y - 1, z - 1, blockIds.water);
						}
					}
				}, Math.random() * 200 + 200);
			}
		},
		{
			name: "lava",
			transparent: true,
			shadow: false,
			liquid: true,
			solid: false,
			slide: 0.0008,
      explodable: false,
			onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].liquid) {
					return;
				}
				setTimeout(function () {
					if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape) {
						if (blockData[world.getBlock(x, y - 1, z)].crossShape) {
							explode(x, y - 1, z, 0)
						}
						world.setBlock(x, y - 1, z, blockIds.lava);
					} else if (!blockData[world.getBlock(x, y - 1, z)].liquid) {
						if (!world.getBlock(x + 1, y - 1, z) || blockData[world.getBlock(x + 1, y - 1, z)].crossShape) {
							if (blockData[world.getBlock(x + 1, y - 1, z)].crossShape) {
								explode(x + 1, y - 1, z, 0)
							}
							world.setBlock(x + 1, y - 1, z, blockIds.lava);
						}
						if (!world.getBlock(x - 1, y - 1, z) || blockData[world.getBlock(x - 1, y - 1, z)].crossShape) {
							if (blockData[world.getBlock(x - 1, y - 1, z)].crossShape) {
								explode(x - 1, y - 1, z, 0)
							}
							world.setBlock(x - 1, y - 1, z, blockIds.lava);
						}
						if (!world.getBlock(x, y - 1, z + 1) || blockData[world.getBlock(x, y - 1, z + 1)].crossShape) {
							if (blockData[world.getBlock(x, y - 1, z + 1)].crossShape) {
								explode(x, y - 1, z + 1, 0)
							}
							world.setBlock(x, y - 1, z + 1, blockIds.lava);
						}
						if (!world.getBlock(x, y - 1, z - 1) || blockData[world.getBlock(x, y - 1, z - 1)].crossShape) {
							if (blockData[world.getBlock(x, y - 1, z - 1)].crossShape) {
								explode(x, y - 1, z - 1, 0)
							}
							world.setBlock(x, y - 1, z - 1, blockIds.lava);
						}
					}
				}, Math.random() * 400 + 400);
			}
		},
		{
			name: "redMushroomBlock",
			blastResistance: 0.2,
		},
		{
			name: "bookshelf",
			textures: ["oakPlanks", "bookshelf"],
		},
		{
			name: "smithingTable",
			textures: ["smithingTableBottom", "smithingTableTop", "smithingTableSide", "smithingTableFront"],
		},
		{
			name: "fletchingTable",
			textures: ["oakPlanks", "fletchingTableTop", "fletchingTableSide", "fletchingTableFront"],
		},
		{
			name: "cartographyTable",
			textures: ["darkOakPlanks", "cartographerTableTop", "cartographerTableSide", "cartographerTableFront"],
		},
		{
			name: "loom",
			textures: ["loomBottom", "loomTop", "loomSide", "loomFront"],
		},
		{
			name: "barrel",
			textures: ["barrelBottom", "barrelTop", "barrelSide"],
		},
		{
			name: "hayBlock",
			textures: ["hayBlockTop", "hayBlockSide"]
		},
		{
			name: "driedKelpBlock",
			textures: ["driedKelpTop", "driedKelpTop", "driedKelpSide"]
		},
		{
			name: "pumpkin",
			textures: ["pumpkinTop", "pumpkinSide"],
			blastResistance: 0.2
		},
		{
			name: "melon",
			textures: ["melonTop", "melonSide"],
			blastResistance: 0.2
		},
		{
			name: "packedIce",
			slide: 0.85,
			blastResistance: 0.2
		},
		{
			name: "bedrock",
			explodable: false
		},
		{
			name: "poppy",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
          if (world.getBlock(x, y - 1, z) && !blockData[world.getBlock(x, y - 1, z)].crossShape && !blockData[world.getBlock(x, y - 1, z)].liquid) {
            setTimeout(function () {
  						explode(x, y, z, 0);
              world.setBlock(x, y, z, blockIds.witherRose)
  					}, 1200)
          }
          else {
            setTimeout(function () {
  						explode(x, y, z, 0);
  					}, 100)
          }
				}
			}
		},
		{
			name: "dandelion",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "blueOrchid",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "pinkTulip",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "orangeTulip",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "redTulip",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "whiteTulip",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "azureBluet",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "cornFlower",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "oxeyeDaisy",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "allium",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "sugarCane",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05,
			onload: function (x, y, z) {
				if ((blockData[world.getBlock(x + 1, y - 1, z)].name != "water" && blockData[world.getBlock(x - 1, y - 1, z)].name != "water" && blockData[world.getBlock(x, y - 1, z + 1)].name != "water" && blockData[world.getBlock(x, y - 1, z - 1)].name != "water") && blockData[world.getBlock(x, y - 1, z)].name != "sugarCane") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "sweetBerryBush",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			slide: 0.005,
			blastResistance: 0.1
		},
		{
			name: "snow",
			blastResistance: 0.01,
			onload: function (x, y, z) {
				setTimeout(function () {
					if ((!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape) && blockData[world.getBlock(x, y, z)].name == "snow") {
						explode(x, y, z, 0);
						world.setBlock(x, y - 1, z, blockIds.snow)
					}
				}, 100)
			}
		},
		{
			name: "grass",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.1,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "fern",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.08,
      onload: function (x, y, z) {
				if (blockData[world.getBlock(x, y - 1, z)].name != "grassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "lightGrassBlock" && blockData[world.getBlock(x, y - 1, z)].name != "darkGrassBlock") {
          if (world.getBlock(x, y - 1, z) && !blockData[world.getBlock(x, y - 1, z)].crossShape && !blockData[world.getBlock(x, y - 1, z)].liquid) {
            setTimeout(function () {
  						explode(x, y, z, 0);
              world.setBlock(x, y, z, blockIds.deadBush)
  					}, 1200)
          }
          else {
            setTimeout(function () {
  						explode(x, y, z, 0);
  					}, 100)
          }
				}
			}
		},
		{
			name: "witherRose",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			slide: 0.05,
			blastResistance: 0.16,
      onload: function (x, y, z) {
				if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape || blockData[world.getBlock(x, y - 1, z)].liquid) {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "deadBush",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.08,
      onload: function (x, y, z) {
				if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape || blockData[world.getBlock(x, y - 1, z)].liquid) {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "hangingRoots",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.05
		},
		{
			name: "redMushroom",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.1,
      onload: function (x, y, z) {
				if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape || blockData[world.getBlock(x, y - 1, z)].liquid) {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "brownMushroom",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.1,
      onload: function (x, y, z) {
				if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape || blockData[world.getBlock(x, y - 1, z)].liquid) {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "crimsonFungus",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.2,
      onload: function (x, y, z) {
				if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape || blockData[world.getBlock(x, y - 1, z)].liquid) {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "warpedFungus",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.2,
      onload: function (x, y, z) {
				if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape || blockData[world.getBlock(x, y - 1, z)].liquid) {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "crimsonRoots",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.16,
      onload: function (x, y, z) {
				if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape || blockData[world.getBlock(x, y - 1, z)].liquid) {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "warpedRoots",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.16,
      onload: function (x, y, z) {
				if (!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape || blockData[world.getBlock(x, y - 1, z)].liquid) {
					setTimeout(function () {
						explode(x, y, z, 0);
					}, 100)
				}
			}
		},
		{
			name: "crimsonVines",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.16
		},
		{
			name: "warpedVines",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.16
		},
		{
			name: "crimsonLog",
			textures: ["crimsonStemTop", "crimsonStemSide"],
			blastResistance: 0.2,
		},
		{
			name: "warpedLog",
			textures: ["warpedStemTop", "warpedStemSide"],
			blastResistance: 0.2,
		},
		{
			name: "caveVinesBodyLit",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.1
		},
		{
			name: "caveVinesLit",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.1
		},
		{
			name: "dripstoneDown",
			transparent: true,
			shadow: false,
			crossShape: true,
			textures: [
				["dripstoneDown2"],
				["dripstoneDown1"]
			],
			dtexture: ["dripstoneDown1"],
			choice: true
		},
		{
			name: "dripstoneUp",
			transparent: true,
			shadow: false,
			crossShape: true,
			textures: [
				["dripstoneUp1"],
				["dripstoneUp2"]
			],
			dtexture: ["dripstoneUp1"],
			choice: true
		},
		{
			name: "amethystCluster",
			solid: false,
			transparent: true,
			shadow: false,
			crossShape: true,
			blastResistance: 0.15
		},
		{
			name: "powderedSnow",
			textures: ["snow","snow"],
			solid: false,
			transparent: true,
			shadow: false,
			slide: 0.04,
			blastResistance: 0.1,
			onload: function (x, y, z) {
				setTimeout(function () {
					if ((!world.getBlock(x, y - 1, z) || blockData[world.getBlock(x, y - 1, z)].crossShape) && blockData[world.getBlock(x, y, z)].name == "powderedSnow") {
						explode(x, y, z, 0);
						world.setBlock(x, y - 1, z, blockIds.powderedSnow)
					}
				}, 100)
			}
		}
	];

  function inLiquid(x, y, z) {
    return blockData[world.getBlock(Math.round(x), Math.round(y), Math.round(z))].name == "water" || blockData[world.getBlock(Math.round(x), Math.round(y-1), Math.round(z))].name == "water" || blockData[world.getBlock(Math.round(x), Math.round(y), Math.round(z))].name == "lava" || blockData[world.getBlock(Math.round(x), Math.round(y-1), Math.round(z))].name == "lava"
  }

	function inSnow(x, y, z) {
    return blockData[world.getBlock(Math.round(x), Math.round(y), Math.round(z))].name == "powderedSnow" || blockData[world.getBlock(Math.round(x), Math.round(y-1), Math.round(z))].name == "powderedSnow";
  }

  function canClimb(x, y, z) {
    return blockData[world.getBlock(Math.round(x), Math.round(y), Math.round(z))].name == "caveVinesBodyLit" || blockData[world.getBlock(Math.round(x), Math.round(y), Math.round(z))].name == "caveVinesLit" || blockData[world.getBlock(Math.round(x), Math.round(y), Math.round(z))].name == "crimsonVines" || blockData[world.getBlock(Math.round(x), Math.round(y), Math.round(z))].name == "warpedVines";
  }

	/*
	  Create sphere at x, y, z with width w, height h, depth d
	  explosionPower determines if block is deleted due to corresponding blast resistance
	  maxR used to assist with blast resistance calculations
	*/
	function sphere(X, Y, Z, r, maxR, explosionPower) {
		var w2 = r * r
		var h2 = r * r
		var d2 = r * r

		for (var y = -r; y < r; y++) {
			for (var x = -r; x <= r; x++) {
				for (var z = -r; z <= r; z++) {
					if (x * x / w2 + y * y / h2 + z * z / d2 < 1) {
						if (blockData[world.getBlock(X + x, Y + y, Z + z)].bomb) {
							blockData[world.getBlock(X + x, Y + y, Z + z)].explode(X + x, Y + y, Z + z);
						} else if ((blockData[world.getBlock(X + x, Y + y, Z + z)].explodable && blockData[world.getBlock(X + x, Y + y, Z + z)].blastResistance <= 0.1 * maxR / euclideanDistance(X + x, X, Y + y, Y, Z + z, Z) * (1 + explosionPower))) {
							world.setBlock(X + x, Y + y, Z + z, blockIds.air);
						}

						// Determine explosion velocity changes
						if (X + x == Math.round(p.x) && Y + y == Math.round(p.y) && Z + z == Math.round(p.z)) {
							p.velocity.x = (x == 0) ? 0 : (x > 0 ? explosionPower : -explosionPower) * (((maxR - r)) + 1);
							p.velocity.y = (y == 0) ? 0 : (y > 0 ? explosionPower : -explosionPower) * (((maxR - r)) + 1);
							p.velocity.z = (z == 0) ? 0 : (z > 0 ? explosionPower : -explosionPower) * (((maxR - r)) + 1);
						}
					}
				}
			}
		}
	}

	/*
	  explosion at x, y, z with radius r
	  explosionPower used to determine blastResistance calculations and player velocity changes
	*/
	function explode(x, y, z, r, explosionPower) {
		world.setBlock(x, y, z, blockIds.air);
		for (var i = r; i > 0; i--) {
			sphere(x, y, z, i, r, explosionPower);
		}
	}

	// geode at x, y, z with radius r
	function spawnGeode(x, y, z, r) {
		explode(x, y, z, r, 0);
		for (var rr = r; rr > 0; rr--) {
			(function (X, Y, Z, r, block) {
				var w2 = r * r
				var h2 = r * r
				var d2 = r * r

				for (var y = -r; y < r; y++) {
					for (var x = -r; x <= r; x++) {
						for (var z = -r; z <= r; z++) {
							if (x * x / w2 + y * y / h2 + z * z / d2 < 1) {
                if (block) {
                  explode(X + x, Y + y, Z + z, 0)
                }
								world.setBlock(X + x, Y + y, Z + z, block);
							}
						}
					}
				}
			})(x, y, z, rr, (rr == r ? blockIds.smoothBasalt : (rr + 1 == r ? blockIds.calcite : (rr + 2 == r ? blockIds.amethystBlock : blockIds.air))));
		}
	}

	// Compile block data and texturess
	(function () {
		for (var i = 1; i < blockData.length; i++) {
			var data = blockData[i];
			data.id = i;

			// Sets block textures: bottom, top, side, side, side, side
			if (data.choice) {
				for (var j = 0; i < data.textures.length; j++) {
					data.textures[j] = [];
					if (!data.textures) {
						data.textures[j] = [data.name, data.name, data.name, data.name, data.name, data.name];
					} else if (typeof data.textures === "string") {
						var texture = data.textures;
						data.textures[j] = [texture, texture, texture, texture, texture, texture];
					} else if (data.textures.length === 3) {
						data.textures[j][3] = data.textures[j][2];
						data.textures[j][4] = data.textures[j][2];
						data.textures[j][5] = data.textures[j][2];
					} else if (data.textures.length === 4) {
						data.textures[j][4] = data.textures[j][3];
						data.textures[j][3] = data.textures[j][2];
						data.textures[j][5] = data.textures[j][2];
					} else if (data.textures.length === 2) {
						data.textures[j][2] = data.textures[j][1];
						data.textures[j][3] = data.textures[j][2];
						data.textures[j][4] = data.textures[j][2];
						data.textures[j][5] = data.textures[j][2];
						data.textures[j][1] = data.textures[j][0];
					}
				}
			} else {
				if (!data.textures) {
					data.textures = [data.name, data.name, data.name, data.name, data.name, data.name];
				} else if (typeof data.textures === "string") {
					var texture = data.textures;
					data.textures = [texture, texture, texture, texture, texture, texture];
				} else if (data.textures.length === 3) {
					data.textures[3] = data.textures[2];
					data.textures[4] = data.textures[2];
					data.textures[5] = data.textures[2];
				} else if (data.textures.length === 4) {
					data.textures[4] = data.textures[3];
					data.textures[3] = data.textures[2];
					data.textures[5] = data.textures[2];
				} else if (data.textures.length === 2) {
					data.textures[2] = data.textures[1];
					data.textures[3] = data.textures[2];
					data.textures[4] = data.textures[2];
					data.textures[5] = data.textures[2];
					data.textures[1] = data.textures[0];
				}
			}

			if (data.solid !== false) {
				data.solid = true;
			}

			data.transparent = data.transparent || false;

			if (data.crossShape || data.flat) {
				data.flatIcon = true;
			}
			data.explodable = data.explodable === undefined ? true : data.explodable;
			data.blastResistance = data.blastResistance === undefined ? 0.27 : data.blastResistance;
			data.shadow = data.shadow !== undefined ? data.shadow : true;
			data.liquid = data.liquid !== undefined ? data.liquid : false;
			data.dtexture = data.dtexture !== undefined ? [data.dtexture, data.dtexture, data.dtexture, data.dtexture, data.dtexture, data.dtexture] : data.textures;
		}
	})();

	var win = window.parent;
	var doc = document;
	var console = win.console;
	var world;
	var genWorlds = [];
	var seedHash;

	// Generate seed hashes
	var hash = (function () {
		var seed = Math.random() * 2100000000 | 0;
		var PRIME32_2 = 1883677709;
		var PRIME32_3 = 2034071983;
		var PRIME32_4 = 668265263;
		var PRIME32_5 = 374761393;
		seedHash = function (s) {
			seed = s | 0;
		};
		return function (x, y) {
			var h32 = 0;
			h32 = seed + PRIME32_5 | 0;
			h32 += 8;
			h32 += Math.imul(x, PRIME32_3);
			h32 = Math.imul(h32 << 17 | h32 >> 32 - 17, PRIME32_4);
			h32 += Math.imul(y, PRIME32_3);
			h32 = Math.imul(h32 << 17 | h32 >> 32 - 17, PRIME32_4);
			h32 ^= h32 >> 15;
			h32 *= PRIME32_2;
			h32 ^= h32 >> 13;
			h32 *= PRIME32_3;
			h32 ^= h32 >> 16;
			return h32 / 2147483647;
		};
	})();
	var worldSeed;

	/*
	  NOTE: the noise and random functions below are copied from processing.js source code
	        since I was too lazy to rewrite the algorithms :)
	*/
	var currentRandom = null;

	function Marsaglia(i1, i2) {
		// from http://www.math.uni-bielefeld.de/~sillke/ALGORITHMS/random/marsaglia-c
		var z = (i1 | 0) || 362436069,
			w = i2 || hash(521288629, z) * 2147483647 | 0;

		var nextInt = function () {
			z = 36969 * (z & 65535) + (z >>> 16) & 0xFFFFFFFF;
			w = 18000 * (w & 65535) + (w >>> 16) & 0xFFFFFFFF;
			return ((z & 0xFFFF) << 16 | w & 0xFFFF) & 0xFFFFFFFF;
		};

		this.nextDouble = function () {
			var i = nextInt() / 4294967296;
			return i < 0 ? 1 + i : i;
		};
		this.nextInt = nextInt;
	}
	var randomSeed = function (seed) {
		currentRandom = (new Marsaglia(seed)).nextDouble;
	}
	var random = function (min, max) {
		if (!max) {
			if (min) {
				max = min;
				min = 0;
			} else {
				min = 0;
				max = 1;
			}
		}
		return currentRandom() * (max - min) + min;
	}
	var noiseProfile = {
		generator: undefined,
		octaves: 4,
		fallout: 0.5,
		seed: undefined
	};

	function PerlinNoise(seed) {
		var rnd = seed !== undefined ? new Marsaglia(seed) : Marsaglia.createRandomized();
		var i, j;
		// http://www.noisemachine.com/talk1/17b.html
		// http://mrl.nyu.edu/~perlin/noise/
		// generate permutation
		var perm = new Uint8Array(512);
		for (i = 0; i < 256; ++i) {
			perm[i] = i;
		}
		for (i = 0; i < 256; ++i) {
			var t = perm[j = rnd.nextInt() & 0xFF];
			perm[j] = perm[i];
			perm[i] = t;
		}
		// copy to avoid taking mod in perm[0];
		for (i = 0; i < 256; ++i) {
			perm[i + 256] = perm[i];
		}

		function grad3d(i, x, y, z) {
			var h = i & 15; // convert into 12 gradient directions
			var u = h < 8 ? x : y,
				v = h < 4 ? y : h === 12 || h === 14 ? x : z;
			return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);
		}

		function grad2d(i, x, y) {
			var v = (i & 1) === 0 ? x : y;
			return (i & 2) === 0 ? -v : v;
		}

		function grad1d(i, x) {
			return (i & 1) === 0 ? -x : x;
		}

		function lerp(t, a, b) {
			return a + t * (b - a);
		}

		this.noise3d = function (x, y, z) {
			var X = Math.floor(x) & 255,
				Y = Math.floor(y) & 255,
				Z = Math.floor(z) & 255;
			x -= Math.floor(x);
			y -= Math.floor(y);
			z -= Math.floor(z);
			var fx = (3 - 2 * x) * x * x,
				fy = (3 - 2 * y) * y * y,
				fz = (3 - 2 * z) * z * z;
			var p0 = perm[X] + Y,
				p00 = perm[p0] + Z,
				p01 = perm[p0 + 1] + Z,
				p1 = perm[X + 1] + Y,
				p10 = perm[p1] + Z,
				p11 = perm[p1 + 1] + Z;
			return lerp(fz,
				lerp(fy, lerp(fx, grad3d(perm[p00], x, y, z), grad3d(perm[p10], x - 1, y, z)),
					lerp(fx, grad3d(perm[p01], x, y - 1, z), grad3d(perm[p11], x - 1, y - 1, z))),
				lerp(fy, lerp(fx, grad3d(perm[p00 + 1], x, y, z - 1), grad3d(perm[p10 + 1], x - 1, y, z - 1)),
					lerp(fx, grad3d(perm[p01 + 1], x, y - 1, z - 1), grad3d(perm[p11 + 1], x - 1, y - 1, z - 1))));
		};

		this.noise2d = function (x, y) {
			var X = Math.floor(x) & 255,
				Y = Math.floor(y) & 255;
			x -= Math.floor(x);
			y -= Math.floor(y);
			var fx = (3 - 2 * x) * x * x,
				fy = (3 - 2 * y) * y * y;
			var p0 = perm[X] + Y,
				p1 = perm[X + 1] + Y;
			return lerp(fy,
				lerp(fx, grad2d(perm[p0], x, y), grad2d(perm[p1], x - 1, y)),
				lerp(fx, grad2d(perm[p0 + 1], x, y - 1), grad2d(perm[p1 + 1], x - 1, y - 1)));
		};

		this.noise1d = function (x) {
			var X = Math.floor(x) & 255;
			x -= Math.floor(x);
			var fx = (3 - 2 * x) * x * x;
			return lerp(fx, grad1d(perm[X], x), grad1d(perm[X + 1], x - 1));
		};
	}
	var noiseSeed = function (seed) {
		noiseProfile.seed = seed;
		noiseProfile.generator = undefined;
	};
	var noise = function (x, y, z) {
		if (noiseProfile.generator === undefined) {
			noiseProfile.generator = new PerlinNoise(noiseProfile.seed);
		}
		var generator = noiseProfile.generator;
		var effect = 1,
			k = 1,
			sum = 0;
		for (var i = 0; i < noiseProfile.octaves; ++i) {
			effect *= noiseProfile.fallout;
			switch (arguments.length) {
			case 1:
				sum += effect * (1 + generator.noise1d(k * x)) / 2;
				break;
			case 2:
				sum += effect * (1 + generator.noise2d(k * x, k * y)) / 2;
				break;
			case 3:
				sum += effect * (1 + generator.noise3d(k * x, k * y, k * z)) / 2;
				break;
			}
			k *= 2;
		}
		return sum;
	};
	var PVector = function (x, y, z) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.set = function (x, y, z) {
			if (y === undefined) {
				this.x = x.x;
				this.y = x.y;
				this.z = x.z;
			} else {
				this.x = x;
				this.y = y;
				this.z = z;
			}
		}
		this.normalize = function () {
			var mag = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
			this.x /= mag;
			this.y /= mag;
			this.z /= mag;
		}
		this.add = function (v) {
			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
		}
		this.mult = function (m) {
			this.x *= m;
			this.y *= m;
			this.z *= m;
		}
	}
	/*
	  NOTE: the above noise and random functions are copied from processing.js source code
	        since I was too lazy to rewrite the algorithms :)
	*/

	// Some canvas shortcuts
	var fill = function (r, g, b) {
		if (g === undefined) {
			g = r;
			b = r;
		}
		ctx.fillStyle = "rgb(" + r + ", " + g + ", " + b + ")"
	}
	var stroke = function (r, g, b) {
		if (g === undefined) {
			g = r;
			b = r;
		}
		ctx.strokeStyle = "rgb(" + r + ", " + g + ", " + b + ")"
	}
	var line = function (x1, y1, x2, y2) {
		ctx.moveTo(x1, y1);
		ctx.lineTo(x2, y2);
	}

	// write text txt at x, y, z with color color
	function fastText(txt, x, y, h, color) {
		h = h || 0;
		var lines = txt.split("\n");
		for (var i = 0; i < lines.length; i++) {
			ctx.fillText(lines[i], x, y + h * i);
		}
	}

	// quick set text size
	function textSize(size) {
		ctx.font = size + "px \'Press Start 2P\'";
	}

	var text = fastText;
	var strokeWeight = function (num) {
		ctx.lineWidth = num;
	}

	// crosshair = ingame, pointer = out of game
	var HAND = "pointer";
	var CROSS = "crosshair";
	var cursor = function (type) {
		canvas.style.cursor = type;
	}

	// Generate random seed
	randomSeed(Math.random() * 10000000 | 0);
	var fov = 70; // Field of view, degrees
	var reach = 5; // Distance to break/place blocks
	var blockIds = {};
	blockData.forEach(function (block) {
		blockIds[block.name] = block.id;
	});
	var currentFov, targetFov, fovTime;
	var renderDistance, generatedChunks, fogEnabled, dayNightEnabled;
	var mouseX, mouseY;
	var width = window.innerWidth;
	var height = window.innerHeight;

	// Rules for terrain and biome generation
	var generator = {
		// defaults
		height: 100,
		smooth: 0.012,
		extra: 20,
		caveSmooth: 0.04,
		caveFrequency: 0.39,
		// by biome
		biome: {

			// overworld
			plains: {
				height: 100,
				smooth: 0.0075,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.352,
			},
			plains_edge: {
				height: 100,
				smooth: 0.00756,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.352,
			},
			forests_edge: {
				height: 100,
				smooth: 0.00762,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.364,
			},
			forest: {
				height: 100,
				smooth: 0.0077,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.364,
			},
			flower_forest: {
				height: 100,
				smooth: 0.0077,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.364,
			},
			jungle: {
				height: 100,
				smooth: 0.0077,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.355,
			},
			taiga: {
				height: 100,
				smooth: 0.0077,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.355,
			},
			mountains_edge: {
				height: 100,
				smooth: 0.007703,
				extra: 23,
				caveSmooth: 0.024,
				caveFrequency: 0.355,
			},
      mountain_ridge: {
				height: 110,
				smooth: 0.016,
				extra: 20,
				caveSmooth: 0.04,
				caveFrequency: 0.37,
			},
			mountain: {
				height: 120,
				smooth: 0.016,
				extra: 20,
				caveSmooth: 0.04,
				caveFrequency: 0.37,
			},
			tall_mountain: {
				height: 124,
				smooth: 0.018,
				extra: 24,
				caveSmooth: 0.04,
				caveFrequency: 0.37,
			},
			desert: {
				height: 100,
				smooth: 0.0075,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.31,
			},

			// nether
			wasteland: {
				height: 55,
				smooth: 0.01,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.37,
			},
			valley: {
				height: 55,
				smooth: 0.01,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.36,
			},
			brinks: {
				height: 55,
				smooth: 0.01,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.36,
			},
			crimson: {
				height: 55,
				smooth: 0.01,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.36,
			},
			warped: {
				height: 55,
				smooth: 0.01,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.3,
			},
			pile: {
				height: 62,
				smooth: 0.025,
				extra: 20,
				caveSmooth: 0.024,
				caveFrequency: 0.35,
			},
			delta: {
				height: 72,
				smooth: 0.2,
				extra: 25,
				caveSmooth: 0.024,
				caveFrequency: 0.1,
			},

			// stone
			high_spikes: {
				height: 60,
				smooth: 0.2,
				extra: 25,
				caveSmooth: 0.024,
				caveFrequency: 0.33,
			},
			spikes: {
				height: 60,
				smooth: 0.12,
				extra: 25,
				caveSmooth: 0.024,
				caveFrequency: 0.35,
			},
			low_spikes: {
				height: 60,
				smooth: 0.08,
				extra: 25,
				caveSmooth: 0.024,
				caveFrequency: 0.37,
			},

			// moon
			moon_lowlands: {
				height: 7,
				smooth: 0.012,
				extra: 3,
				caveSmooth: 0.024,
				caveFrequency: 0.3,
			},
			moon_midlands: {
				height: 7,
				smooth: 0.03,
				extra: 3,
				caveSmooth: 0.024,
				caveFrequency: 0.3,
			},
			moon_highlands: {
				height: 7,
				smooth: 0.08,
				extra: 3,
				caveSmooth: 0.024,
				caveFrequency: 0.3,
			},
		},
		biomeSmooth: 0.002,
	};

	var origGen = generator;
	var maxHeight = 150; // Max building height

	var blockOutlines = true;
	var blockFill = true;
	var updateHUD = true;
	var textureMap;
	var textureCoords;
	var texCoordsBuffers;
	var bigArray = win.bigArray || new Float32Array(200000);
	win.bigArray = bigArray;
	var screen;
	var hitBox = {};
	var holding = 0;
	var Key = {};
	var modelView = win.modelView || new Float32Array(16);
	win.modelView = modelView;
	var glCache, nearH;
	var freezeFrame = 0;
	var p;
	var vec1 = new PVector(),
		vec2 = new PVector(),
		vec3 = new PVector();
	var move = {
		x: 0,
		y: 0,
		z: 0,
		ang: Math.sqrt(0.5),
	};
	var p2 = {
		x: 0,
		y: 0,
		z: 0,
	};
	var place;

	// default inventory
	var inventory = {
		hotbar: [1, 2, 3, 4, 5, 6, 7, 8, 9], // Block IDs of hotbar
		main: [],
		size: 40, // Size of blocks to be shown in inventory and hotbar
		hotbarSlot: 0,
		holding: 0,
	};
	var skTemp = false;

	// default overworld sky color
	var sky = [179 / 255, 215 / 255, 255 / 255];
	var skyLight = 16;

	/*
	  Gradually decrease sky color from black (night) to blue(day)
	*/
	function lightDay() {
		if (worldmodes[worldmode].name == "Nether") {
			sky = [140 / 255, 60 / 255, 60 / 255];
			skyLight = 15;
			return;
		}
		if (worldmodes[worldmode].name == "Moon") {
			sky = [255 / 255, 255 / 255, 255 / 255];
			skyLight = 13;
			return;
		}
		if (worldmodes[worldmode].name == "Stone") {
			sky = [120 / 255, 120 / 255, 120 / 255];
			skyLight = 15;
			return;
		}
		c = 1;
		var b = true;
		while (c < 100) {
			setTimeout(function () {
				if (b) {
					sky = [(sky[0] + 2 / 255 > 179 / 255) ? 179 / 255 : sky[0] + 2 / 255, (sky[1] + 2.5 / 255 > 215 / 255) ? 215 / 255 : sky[1] + 2.5 / 255, (sky[2] + 3 / 255 > 255 / 255) ? 255 / 255 : sky[2] + 3 / 255];
					skyLight += (skyLight >= 16) ? 0 : 0.1;
					gl.uniform3f(glCache.locations.skyColor, sky[0], sky[1], sky[2])
				}
				if (sky == [179 / 255, 215 / 255, 255 / 255]) {
					b = false;
					skyLight = 16;
					gl.uniform3f(glCache.locations.skyColor, sky[0], sky[1], sky[2])
				}
			}, c * 50);
			c++;
		}
	}
	/*
	  Gradually decrease sky color from blue (day) to black(night)
	*/
	function lightNight() {
		if (worldmodes[worldmode].name == "Nether") {
			sky = [140 / 255, 60 / 255, 60 / 255];
			skyLight = 15;
			return;
		}
		if (worldmodes[worldmode].name == "Stone") {
			sky = [120 / 255, 120 / 255, 120 / 255];
			skyLight = 15;
			return;
		}
		if (worldmodes[worldmode].name == "Moon") {
			sky = [255 / 255, 255 / 255, 255 / 255];
			skyLight = 13;
			return;
		}
		c = 1;
		while (c < 70) {
			setTimeout(function () {
				sky = [(sky[0] - 2 / 255 > 0) ? sky[0] - 2 / 255 : 0, (sky[1] - 2.5 / 255 > 0) ? sky[1] - 2.5 / 255 : 0, (sky[2] - 3 / 255 > 0) ? sky[2] - 3 / 255 : 0];
				skyLight -= (skyLight <= 14.5) ? 0 : 0.08;
				gl.uniform3f(glCache.locations.skyColor, sky[0], sky[1], sky[2])
			}, c * 50);
			c++;
		}
	}

	/*
	  Start the day-night cycle
	  Day for 60 seconds, night for 60 seconds
	*/
	function initDayNightCycle() {
		if (worldmodes[worldmode].name == "Nether") {
			sky = [140 / 255, 60 / 255, 60 / 255];
			skyLight = 15;
		}
		if (worldmodes[worldmode].name == "Moon") {
			sky = [10 / 255, 10 / 255, 10 / 255];
			skyLight = 13;
			return;
		}
		if (worldmodes[worldmode].name == "Stone") {
			sky = [120 / 255, 120 / 255, 120 / 255];
			skyLight = 15;
		}
		gl.uniform3f(glCache.locations.skyColor, sky[0], sky[1], sky[2])
		setTimeout(function () {
			if (dayNightEnabled) {
				lightNight();
			}
		}, 60000);
		setInterval(function () {
			if (dayNightEnabled) {
				lightDay();
				gl.uniform3f(glCache.locations.skyColor, sky[0], sky[1], sky[2]);
				setTimeout(function () {
					if (dayNightEnabled) {
						lightNight();
					}
					gl.uniform3f(glCache.locations.skyColor, sky[0], sky[1], sky[2]);
				}, 60000);
			}
		}, 120000);
	}

	// Start game
	function play() {
		initDayNightCycle();
		screen = "play";
		getPointer();
		fill(255, 255, 255);
		textSize(10);
		p.lastBreak = Date.now();
		updateHUD = true;
		gl.clearColor(sky[0], sky[1], sky[2], 1.0);
		savebox.hidden = true;
	}

	var gl;
	// Lock mouse
	function getPointer() {
		if (canvas.requestPointerLock) {
			canvas.requestPointerLock();
		}
	}
	// Unlock mouse
	function releasePointer() {
		if (doc.exitPointerLock) {
			doc.exitPointerLock();
		}
		gl.clearColor(sky[0], sky[1], sky[2], 1.0);
	}

	function objectify(x, y, z, width, height, textureX, textureY, texXFlip) {
		return {
			x: x,
			y: y,
			z: z,
			w: width,
			h: height,
			tx: textureX,
			ty: textureY,
			txf: texXFlip
		}
	}

	var Block = {
		top: 0x4,
		bottom: 0x8,
		north: 0x20,
		south: 0x10,
		east: 0x2,
		west: 0x1,
	};
	var Sides = {
		top: 0,
		bottom: 1,
		north: 2,
		south: 3,
		east: 4,
		west: 5,
	};

	// GLSL Shader code
	var vertexShaderSrc3D = document.getElementById("fragmentShader").text

	var fragmentShaderSrc3D = document.getElementById("vertexShader").text

	// Create 3d object for context
	var createProgramObject = function (curContext, vetexShaderSource, fragmentShaderSource) {
		var vertexShaderObject = curContext.createShader(curContext.VERTEX_SHADER);
		curContext.shaderSource(vertexShaderObject, vetexShaderSource);
		curContext.compileShader(vertexShaderObject);
		if (!curContext.getShaderParameter(vertexShaderObject, curContext.COMPILE_STATUS)) {
			throw curContext.getShaderInfoLog(vertexShaderObject);
		}

		var fragmentShaderObject = curContext.createShader(curContext.FRAGMENT_SHADER);
		curContext.shaderSource(fragmentShaderObject, fragmentShaderSource);
		curContext.compileShader(fragmentShaderObject);
		if (!curContext.getShaderParameter(fragmentShaderObject, curContext.COMPILE_STATUS)) {
			throw curContext.getShaderInfoLog(fragmentShaderObject);
		}

		var programObject = curContext.createProgram();
		curContext.attachShader(programObject, vertexShaderObject);
		curContext.attachShader(programObject, fragmentShaderObject);
		curContext.linkProgram(programObject);
		if (!curContext.getProgramParameter(programObject, curContext.LINK_STATUS)) {
			throw "Error linking shaders.";
		}

		return programObject;
	};

	var programObject3D;

	/*
	  Holds vertices for different shape types
	  - cube (most blocks)
	  - cactus
	  - crossShape (flowers, sugar cane, etc)
	*/
	var sideEdgeVerts = {
		cube: [
			new Float32Array([-0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5]), // top
			new Float32Array([-0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5]), // bottom
			new Float32Array([0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.5, 0.5, -0.5, 0.5]), // north
			new Float32Array([-0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5]), // south
			new Float32Array([0.5, 0.5, -0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, -0.5]), // east
			new Float32Array([-0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0.5]), // west
		],
		cactus: [
			new Float32Array([-0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5]), // top
			new Float32Array([-0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5]), // bottom
			new Float32Array([0.5, 0.5, 0.43, -0.5, 0.5, 0.43, -0.5, -0.5, 0.43, 0.5, -0.5, 0.43]), // north
			new Float32Array([-0.5, 0.5, -0.43, 0.5, 0.5, -0.43, 0.5, -0.5, -0.43, -0.5, -0.5, -0.43]), // south
			new Float32Array([0.43, 0.5, -0.5, 0.43, 0.5, 0.5, 0.43, -0.5, 0.5, 0.43, -0.5, -0.5]), // east
			new Float32Array([-0.43, 0.5, 0.5, -0.43, 0.5, -0.5, -0.43, -0.5, -0.5, -0.43, -0.5, 0.5]), // west
		],
		crossShape: [
			new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), // top
			new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), // bottom
			new Float32Array([0.5, 0.5, 0, -0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0]), // north
			new Float32Array([-0.5, 0.5, 0, 0.5, 0.5, 0, 0.5, -0.5, 0, -0.5, -0.5, 0]), // south
			new Float32Array([0, 0.5, -0.5, 0, 0.5, 0.5, 0, -0.5, 0.5, 0, -0.5, -0.5]), // east
			new Float32Array([0, 0.5, 0.5, 0, 0.5, -0.5, 0, -0.5, -0.5, 0, -0.5, 0.5]), // west
		],
		flat: [
			new Float32Array([-0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, -0.5, -0.5, 0.5]), // top
			new Float32Array([-0.5, -0.49, -0.5, -0.5, -0.49, 0.5, 0.5, -0.49, 0.5, 0.5, -0.49, -0.5]), // bottom
			new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), // north
			new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), // south
			new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), // east
			new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), // west
		],
	}

	// To assist with the gl drawing
	var indexOrder;
	(function () {
		var arr = [];
		for (var i = 0; i < 10000; i++) {
			arr.push(0 + i * 4, 1 + i * 4, 2 + i * 4, 0 + i * 4, 2 + i * 4, 3 + i * 4);
		}
		indexOrder = new Uint32Array(arr);
	})();

	var _2dIconVerts, hexagonVerts; // Verticies for the inventory icons
	var blockIcons;
	(function () {
		var side = Math.sqrt(3) / 2;
		hexagonVerts = new Float32Array([
			0, 1, 1, side, 0.5, 1, 0, 0, 1, -side, 0.5, 1,
			0, 0, 1, side, 0.5, 1, side, -0.5, 1, 0, -1, 1,
			-side, 0.5, 1, 0, 0, 1, 0, -1, 1, -side, -0.5, 1,
		]);

		_2dIconVerts = [-1, 1, 0, 1, 1, 1, 1, -1, 1, -1, -1, 0];

		hexagonVertsCactus = new Float32Array([
			0, 0.9, 1, side, 0.4, 1, 0, -0.1, 1, -side, 0.4, 1,
			-0.08, 0, 1, side - 0.08, 0.5, 1, side - 0.08, -0.5, 1, 0 - 0.08, -1, 1,
			-side, 0.5, 1 + 0.1, 0, 0, 1 + 0.1, 0, -1, 1 + 0.1, -side, -0.5, 1 + 0.1,
		]);
	})();

	/*
	  Generate icons for inventory
	*/
	function genIcons() {
		blockIcons = [null];
		var texOrder = [1, 2, 3];
		var shadows = [1, 0.4, 0.7];
		var scale = 0.16 / height * inventory.size;
		for (var i = 1; i < blockData.length; i++) {
			var data = [];
			var buffer;
			var block = blockData[i];

			var vts = (block.flatIcon) ? _2dIconVerts : hexagonVerts;
			if (block.cactus) {
				vts = hexagonVertsCactus;
			}
			for (var j = 0; j < 12; j++) {
				data.push(vts[j * 3 + 0] * scale);
				data.push(vts[j * 3 + 1] * scale);
				data.push(0.1666666);
				data.push(textureCoords[textureMap[block.dtexture[texOrder[Math.floor(j / 4)]]]][(j * 2 + 0) % 8]);
				data.push(textureCoords[textureMap[block.dtexture[texOrder[Math.floor(j / 4)]]]][(j * 2 + 1) % 8]);
				data.push(shadows[Math.floor(j / 4)]);
			}
			buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);

			blockIcons.push(buffer);
		}
	}

	function uniformMatrix(cacheId, programObj, vrName, transpose, matrix) {
		var vrLocation = glCache.locations[cacheId];
		if (vrLocation === undefined) {
			vrLocation = gl.getUniformLocation(programObj, vrName);
			glCache.locations[cacheId] = vrLocation;
		}
		gl.uniformMatrix4fv(vrLocation, transpose, matrix);
	}

	function vertexAttribPointer(cacheId, programObj, vrName, size, VBO) {
		var vrLocation = glCache.locations[cacheId];
		if (vrLocation === undefined) {
			vrLocation = gl.getAttribLocation(programObj, vrName);
			glCache.locations[cacheId] = vrLocation;
		}
		if (vrLocation !== -1) {
			gl.enableVertexAttribArray(vrLocation);
			gl.bindBuffer(gl.ARRAY_BUFFER, VBO);
			gl.vertexAttribPointer(vrLocation, size, gl.FLOAT, false, 0, 0);
		}
	}

	// Generate and store buffers for every block
	var sideEdgeBuffers;
	var indexBuffer;

	// Matrix transformation method
	var matrix = new Float32Array(16);
	var projection = win.projection || new Float32Array(16);
	win.projection = projection;

	// linalg shortcuts
	function trans(matrix, x, y, z) {
		var a = matrix;
		a[3] += a[0] * x + a[1] * y + a[2] * z;
		a[7] += a[4] * x + a[5] * y + a[6] * z;
		a[11] += a[8] * x + a[9] * y + a[10] * z;
		a[15] += a[12] * x + a[13] * y + a[14] * z;
	}

	function rotX(matrix, angle) {
		var elems = matrix;
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var t = elems[1];
		elems[1] = t * c + elems[2] * s;
		elems[2] = t * -s + elems[2] * c;
		t = elems[5];
		elems[5] = t * c + elems[6] * s;
		elems[6] = t * -s + elems[6] * c;
		t = elems[9];
		elems[9] = t * c + elems[10] * s;
		elems[10] = t * -s + elems[10] * c;
		t = elems[13];
		elems[13] = t * c + elems[14] * s;
		elems[14] = t * -s + elems[14] * c;
	}

	function rotY(matrix, angle) {
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var elems = matrix;
		var t = elems[0];
		elems[0] = t * c + elems[2] * -s;
		elems[2] = t * s + elems[2] * c;
		t = elems[4];
		elems[4] = t * c + elems[6] * -s;
		elems[6] = t * s + elems[6] * c;
		t = elems[8];
		elems[8] = t * c + elems[10] * -s;
		elems[10] = t * s + elems[10] * c;
		t = elems[12];
		elems[12] = t * c + elems[14] * -s;
		elems[14] = t * s + elems[14] * c;
	}

	function transpose(matrix) {
		var temp = matrix[4];
		matrix[4] = matrix[1];
		matrix[1] = temp;

		temp = matrix[8];
		matrix[8] = matrix[2];
		matrix[2] = temp;

		temp = matrix[6];
		matrix[6] = matrix[9];
		matrix[9] = temp;

		temp = matrix[3];
		matrix[3] = matrix[12];
		matrix[12] = temp;

		temp = matrix[7];
		matrix[7] = matrix[13];
		matrix[13] = temp;

		temp = matrix[11];
		matrix[11] = matrix[14];
		matrix[14] = temp;
	}

	function matMult() {
		var proj = projection;
		var view = modelView;
		matrix[0] = proj[0] * view[0];
		matrix[1] = proj[0] * view[1];
		matrix[2] = proj[0] * view[2];
		matrix[3] = proj[0] * view[3];
		matrix[4] = proj[5] * view[4];
		matrix[5] = proj[5] * view[5];
		matrix[6] = proj[5] * view[6];
		matrix[7] = proj[5] * view[7];
		matrix[8] = proj[10] * view[8] + proj[11] * view[12];
		matrix[9] = proj[10] * view[9] + proj[11] * view[13];
		matrix[10] = proj[10] * view[10] + proj[11] * view[14];
		matrix[11] = proj[10] * view[11] + proj[11] * view[15];
		matrix[12] = proj[14] * view[8];
		matrix[13] = proj[14] * view[9];
		matrix[14] = proj[14] * view[10];
		matrix[15] = proj[14] * view[11];
	}

	function copyArr(a, b) {
		for (var i = 0; i < a.length; i++) {
			b[i] = a[i];
		}
	}

	// Apply field of vision
	function FOV(fov) {
		var tang = Math.tan(fov * 0.5 * Math.PI / 180);
		var scale = 1 / tang;
		var near = 1;
		var far = 1000000;
		currentFov = fov;
		nearH = near * tang;

		projection[0] = scale / width * height;
		projection[5] = scale;
		projection[10] = -far / (far - near);
		projection[11] = -1;
		projection[14] = -far * near / (far - near);

	}

	function cross(v1, v2, result) {
		var x = v1.x,
			y = v1.y,
			z = v1.z,
			x2 = v2.x,
			y2 = v2.y,
			z2 = v2.z;
		result.x = y * z2 - y2 * z;
		result.y = z * x2 - z2 * x;
		result.z = x * y2 - x2 * y;
	}

	// more linalg shortcuts
	function Plane(nx, ny, nz) {
		this.dx = nx > 0 ? 16 : 0;
		this.dy = ny > 0;
		this.dz = nz > 0 ? 16 : 0;

		this.nx = nx;
		this.ny = ny;
		this.nz = nz;
	}

	Plane.prototype.set = Plane;

	function computeFrustum() {
		var X = vec1;
		X.x = p.direction.z;
		X.y = 0
		X.z = -p.direction.x;
		X.normalize();

		var Y = vec2;
		Y.set(p.direction);
		Y.mult(-1);
		cross(Y, X, Y);

		var aux = vec3;
		aux.set(Y);
		aux.mult(nearH);
		aux.add(p.direction);
		aux.normalize();
		cross(aux, X, aux);
		p.frustum[0].set(aux.x, aux.y, aux.z);

		aux.set(Y);
		aux.mult(-nearH);
		aux.add(p.direction);
		aux.normalize();
		cross(X, aux, aux);
		p.frustum[1].set(aux.x, aux.y, aux.z);

		aux.set(X);
		aux.mult(-nearH * width / height);
		aux.add(p.direction);
		aux.normalize();
		cross(aux, Y, aux);
		p.frustum[2].set(aux.x, aux.y, aux.z);

		aux.set(X);
		aux.mult(nearH * width / height);
		aux.add(p.direction);
		aux.normalize();
		cross(Y, aux, aux);
		p.frustum[3].set(aux.x, aux.y, aux.z);
	}

	// Determine if chunk should be visible
	var chunkVisible = function (x, y, z, maxY) {
		x -= 0.5;
		y -= 0.5;
		z -= 0.5;
		maxY += 0.5;
		var px = 0,
			py = 0,
			pz = 0,
			plane = null;
		var cx = p.x,
			cy = p.y,
			cz = p.z;
		for (var i = 0; i < 4; i++) {
			plane = p.frustum[i];
			px = x + plane.dx;
			py = plane.dy ? maxY : y;
			pz = z + plane.dz;
			if ((px - cx) * plane.nx + (py - cy) * plane.ny + (pz - cz) * plane.nz < 0) {
				return false;
			}
		}
		return true;
	};

	var defaultModelView = new Float32Array([-4, 0, 0, 0, 0, 4, 0, 0, 0, 0, -4, 0, 0, 0, 0, 1]);
	var initModelView = function (x, y, z, rx, ry) {
		copyArr(defaultModelView, modelView);
		rotX(modelView, rx);
		rotY(modelView, ry);
		trans(modelView, -x, -y, -z);
		matMult();
		transpose(matrix);
		uniformMatrix("view3d", programObject3D, "uView", false, matrix);
	};
	var tex;

	function getFaces(x, y, z) {
		return p.x < x - 0.5 |
			(p.x > x + 0.5) << 1 |
			(p.y < y - 0.5) << 2 |
			(p.y > y + 0.5) << 3 |
			(p.z < z - 0.5) << 4 |
			(p.z > z + 0.5) << 5;
	}

	function rayTrace(x, y, z, sides) {
		x -= 0.5;
		y -= 0.5;
		z -= 0.5;

		var cf, cd = 1e9; // Closest face and distance
		var m; // Absolute distance to intersection point
		var ix, iy, iz; // Intersection coords

		// Top and bottom faces
		if (Block.top & sides && p.direction.y) {
			m = (y - p.y) / p.direction.y;
			ix = m * p.direction.x + p.x;
			iz = m * p.direction.z + p.z;
			if (m > 0 && m < cd && ix >= x && ix <= x + 1 && iz >= z && iz <= z + 1) {
				cd = m;
				cf = "top";
			}
		}
		y += 1;
		if (Block.bottom & sides && p.direction.y) {
			m = (y - p.y) / p.direction.y;
			ix = m * p.direction.x + p.x;
			iz = m * p.direction.z + p.z;
			if (m > 0 && m < cd && ix >= x && ix <= x + 1 && iz >= z && iz <= z + 1) {
				cd = m;
				cf = "bottom";
			}
		}
		y -= 1;

		// West and East faces
		if (Block.west & sides && p.direction.x) {
			m = (x - p.x) / p.direction.x;
			iy = m * p.direction.y + p.y;
			iz = m * p.direction.z + p.z;
			if (m > 0 && m < cd && iy >= y && iy <= y + 1 && iz >= z && iz <= z + 1) {
				cd = m;
				cf = "west";
			}
		}
		x += 1;
		if (Block.east & sides && p.direction.x) {
			m = (x - p.x) / p.direction.x;
			iy = m * p.direction.y + p.y;
			iz = m * p.direction.z + p.z;
			if (m > 0 && m < cd && iy >= y && iy <= y + 1 && iz >= z && iz <= z + 1) {
				cd = m;
				cf = "east";
			}
		}
		x -= 1;

		// South and North faces
		if (Block.south & sides && p.direction.z) {
			m = (z - p.z) / p.direction.z;
			ix = m * p.direction.x + p.x;
			iy = m * p.direction.y + p.y;
			if (m > 0 && m < cd && ix >= x && ix <= x + 1 && iy >= y && iy <= y + 1) {
				cd = m;
				cf = "south";
			}
		}
		z += 1;
		if (Block.north & sides && p.direction.z) {
			m = (z - p.z) / p.direction.z;
			ix = m * p.direction.x + p.x;
			iy = m * p.direction.y + p.y;
			if (m > 0 && m < cd && ix >= x && ix <= x + 1 && iy >= y && iy <= y + 1) {
				cd = m;
				cf = "north";
			}
		}
		return [cd, cf];
	}

	function runRayTrace(x, y, z, faces) {
		var block = world.getBlock(x, y, z);
		if (block) {
			var rt = rayTrace(x, y, z, faces);

			if (rt[1] && rt[0] < hitBox.closest) {
				hitBox.closest = rt[0];
				hitBox.face = rt[1];
				hitBox.pos = [x, y, z];
			}
		}
	}

	// Checks blocks in front of the player to see which is looked at
	function lookingAt() {
		hitBox.pos = null;
		hitBox.closest = 1e9;
		var pd = p.direction;

		// Target block
		var tx = Math.round(pd.x * reach + p.x);
		var ty = Math.round(pd.y * reach + p.y);
		var tz = Math.round(pd.z * reach + p.z);

		var minX = p2.x;
		var maxX = 0;
		var minY = p2.y;
		var maxY = 0;
		var minZ = p2.z;
		var maxZ = 0;
		var faces = getFaces(tx, ty, tz);

		for (var i = 1; i < reach + 1; i++) {
			if (i > reach) {
				i = reach;
			}
			maxX = Math.round(p.x + pd.x * i);
			maxY = Math.round(p.y + pd.y * i);
			maxZ = Math.round(p.z + pd.z * i);
			if (maxX === minX && maxY === minY && maxZ === minZ) {
				continue;
			}
			if (minX !== maxX) {
				if (minY !== maxY) {
					if (minZ !== maxZ) {
						runRayTrace(maxX, maxY, maxZ, faces);
					}
					runRayTrace(maxX, maxY, minZ, faces);
				}
				if (minZ !== maxZ) {
					runRayTrace(maxX, minY, maxZ, faces);
				}
				runRayTrace(maxX, minY, minZ, faces);
			}
			if (minY !== maxY) {
				if (minZ !== maxZ) {
					runRayTrace(minX, maxY, maxZ, faces);
				}
				runRayTrace(minX, maxY, minZ, faces);
			}
			if (minZ !== maxZ) {
				runRayTrace(minX, minY, maxZ, faces);
			}
			if (hitBox.pos) {
				return;
			}
			minZ = maxZ;
			minY = maxY;
			minX = maxX;
		}
	}

	var inBox = function (x, y, z, w, h, d) {
		var iy = y - h / 2 - p.topH;
		var ih = h + p.bottomH + p.topH;
		var ix = x - w / 2 - p.w;
		var iw = w + p.w * 2;
		var iz = z - d / 2 - p.w;
		var id = d + p.w * 2;
		return p.x > ix && p.y > iy && p.z > iz && p.x < ix + iw && p.y < iy + ih && p.z < iz + id;
	};

	var boxCollision = function (x, y, z, w, h, d, vx, vy, vz, dt) {
		if (inBox(x, y, z, w, h, d)) {
			if (vx) {
				p.x -= p.velocity.x * dt;
				p.velocity.x = 0;
			} else if (vz) {
				p.z -= p.velocity.z * dt;
				p.velocity.z = 0;
			} else if (vy > 0) {
				p.y -= p.velocity.y * dt;
				p.velocity.y = 0;
			} else {
				p.y = y - h / 2 - p.topH + (h + p.bottomH + p.topH);
				p.onGround = true;
				p.velocity.y = 0;
			}
		}
	};

	var contacts = {
		array: [],
		size: 0,
		add: function (x, y, z) {
			if (this.size === this.array.length) {
				this.array.push([x, y, z]);
			} else {
				this.array[this.size][0] = x;
				this.array[this.size][1] = y;
				this.array[this.size][2] = z;
			}
			this.size++;
		},
		clear: function () {
			this.size = 0;
		},
	};

	var resolveContactsAndUpdatePosition = function () {
		var minX = p2.x - 1;
		var maxX = p2.x + 1;
		var minY = p2.y - 2;
		var maxY = p2.y + 1;
		var minZ = p2.z - 1;
		var maxZ = p2.z + 1;
		var wrld = world;
		var cont = contacts;
		var block = null;
		var player = p;

		for (var x = minX; x <= maxX; x++) {
			for (var y = minY; y <= maxY; y++) {
				for (var z = minZ; z <= maxZ; z++) {
					if (wrld.getBlock(x, y, z)) {
						cont.add(x, y, z);
					}
				}
			}
		}

		var dt = (win.performance.now() - p.lastUpdate) / 33;
		dt = dt > 2 ? 2 : dt;

		// Check collisions in the X direction
		player.x += player.velocity.x * dt;
		for (var i = 0; i < contacts.size; i++) {
			block = cont.array[i];
			if (blockData[wrld.getBlock(block[0], block[1], block[2])].solid) {
				boxCollision(block[0], block[1], block[2], 1, 1, 1, player.velocity.x, 0, 0, dt);
			}
		}

		// Check collisions in the Y direction
		var dy = Math.abs(player.velocity.y * dt)
		player.y += player.velocity.y * dt;
		for (var i = 0; i < contacts.size; i++) {
			block = cont.array[i];
			if (blockData[wrld.getBlock(block[0], block[1], block[2])].solid) {
				boxCollision(block[0], block[1], block[2], 1, 1, 1, 0, player.velocity.y, 0, dt);
				this.standingOn = world.getBlock(Math.round(player.x), Math.floor(player.y - (dy > 1 ? 2 - dy : 2)), Math.round(player.z))
				if (blockData[this.standingOn] && blockData[this.standingOn].hasOwnProperty("bounciness") && p.velocity.y < -0.2 && !p.flying) {
					p.velocity.y *= -blockData[this.standingOn].bounciness;
				}
			}
		}

		// Check collisions in the Z direction
		player.z += player.velocity.z * dt;
		for (var i = 0; i < contacts.size; i++) {
			block = cont.array[i];
			if (blockData[wrld.getBlock(block[0], block[1], block[2])].solid) {
				boxCollision(block[0], block[1], block[2], 1, 1, 1, 0, 0, player.velocity.z, dt);
			}
		}
		var darkestCave = 13;
		if (!worldmodes[worldmode].caveFog) {
			skTemp = false;
		} else {
			if (p.y < 20) {
				skTemp = darkestCave;
			} else if (p.y < 40) {
				var diff = Math.abs(skyLight - darkestCave);
				var factor = (1 - (p.y - 20) / 20) * diff;
				skTemp = skyLight - factor;
			} else {
				skTemp = false;
			}
		}

		// Determine friction
		if (!p.flying) {
			var drag = p.onGround ? 0.5 : 0.85;
			try {
				if (blockData[this.standingOn].slide) {
					drag = blockData[this.standingOn].slide;
				}
				if (blockData[world.getBlock(Math.round(player.x), Math.round(player.y - 1), Math.round(player.z))].slide) {
					drag = blockData[world.getBlock(Math.round(player.x), Math.round(player.y - 1), Math.round(player.z))].slide;
				}
			} catch (err) {}

			p.velocity.z += (p.velocity.z * drag - p.velocity.z) * dt;
			p.velocity.x += (p.velocity.x * drag - p.velocity.x) * dt;
		} else {
			var drag = 0.9;
			p.velocity.z += (p.velocity.z * drag - p.velocity.z) * dt;
			p.velocity.x += (p.velocity.x * drag - p.velocity.x) * dt;
			p.velocity.y += (p.velocity.y * 0.8 - p.velocity.y) * dt;
			if (p.onGround) {
				p.flying = false;
			}
		}

		p.lastUpdate = win.performance.now();
		contacts.clear();
		lookingAt();
	};

	var runGravity = function () {
		if (p.flying) {
			this.standingOn = 0;
			if (p.y < -200) {
				p.y = 300;
			}
			if (p.y > 300) {
				p.y = -200;
			}
			return;
		}
		var dt = (win.performance.now() - p.lastUpdate) / 33;
		dt = dt > 2 ? 2 : dt;



		if (p.onGround && !inLiquid(p.x, p.y, p.z) && !canClimb(p.x, p.y, p.z)) {
			if (Key[" "]) {
				reach = 5;
				p.velocity.y = p.jumpSpeed;
				p.onGround = false;
			} else if (Key["6"] && Key["9"]) {
				reach = 24;
				p.nut();
			} else {
				reach = 5;
				p.velocity.y = 0;
			}
		} else {
      if (inLiquid(p.x, p.y, p.z) && !Key[" "]) {
        p.velocity.y = -0.06
      } else if (canClimb(p.x, p.y, p.z) && !Key[" "]) {
        if (Key.shift) {
          p.velocity.y = 0;
        } else {
          p.velocity.y = -0.04
        }
      } else if (inSnow(p.x, p.y, p.z) && !Key[" "]) {
				p.velocity.y = -0.02;
			} else {
        p.velocity.y += p.gravityStrength * dt;
      }

			if (p.velocity.y < -p.maxYVelocity) {
				p.velocity.y = -p.maxYVelocity;
			}
			if (p.y < -120) {
				p.y = 275;
			}
			if (p.y > 275) {
				p.y = -120;
			}
		}
		p.onGround = false;
	};

	function box(sides, tex) {
		var i = 0;
		for (var side in Block) {
			if (sides & Block[side]) {
				vertexAttribPointer("aVertex", programObject3D, "aVertex", 3, sideEdgeBuffers[Sides[side]]);
				if (blockFill) {
					vertexAttribPointer("aTexture", programObject3D, "aTexture", 2, texCoordsBuffers[textureMap[tex[i]]]);
					if (tex[0] != "cactusTop" || tex[0] != "cactusSide" || tex[0] != "cactusBottom") {
						continue;
					}
					gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_INT, 0);
				}

				if (blockOutlines) {
					vertexAttribPointer("aTexture", programObject3D, "aTexture", 2, texCoordsBuffers[textureMap.hitbox]);

					gl.drawArrays(gl.LINE_LOOP, 0, 4);
				}
			}
			i++;
		}
	}

	function block2(x, y, z, t) {
		copyArr(modelView, matrix);
		trans(modelView, x, y, z);
		matMult();
		trans(modelView, -x, -y, -z);
		transpose(matrix);
		uniformMatrix("view3d", programObject3D, "uView", false, matrix);
		box(0xff, blockData[t].textures);
	}

	// block hunt gamemode data
	blockHunt = {
		riddles: [{
				riddle: "the best conductor",
				answers: [blockIds.copperOre, blockIds.copperBlock, blockIds.deepslateCopperOre],
				score: 4
			},
			{
				riddle: "don't hug me!",
				answers: [blockIds.cactus],
				score: 1
			},
			{
				riddle: "let's make a castle!",
				answers: [blockIds.sand],
				score: 3
			},
			{
				riddle: "nobody knows I exist",
				answers: [blockIds.hangingRoots],
				score: 24
			},
			{
				riddle: "don't give me to your girlfriend!",
				answers: [blockIds.deadBush],
				score: 4
			},
			{
				riddle: "the worst holiday gift",
				answers: [blockIds.coalOre, blockIds.deepslateCoalOre, blockIds.coalBlock],
				score: 3
			},
			{
				riddle: "don't anger the queen!",
				answers: [blockIds.beeNest],
				score: 3
			},
			{
				riddle: "green and expensive",
				answers: [blockIds.emeraldOre, blockIds.deepslateEmeraldOre, blockIds.emeraldBlock],
				score: 10
			},
			{
				riddle: "black when you find me, red when you use me, gray when you throw me away",
				answers: [blockIds.coalOre, blockIds.deepslateCoalOre, blockIds.coalBlock],
				score: 4
			},
			{
				riddle: "shiny and pointy",
				answers: [blockIds.amethystCluster],
				score: 5
			},
			{
				riddle: "gimme dat knowledge",
				answers: [blockIds.bookshelf],
				score: 7
			},
			{
				riddle: "good to eat, bad to walk through",
				answers: [blockIds.sweetBerryBush],
				score: 3
			},
			{
				riddle: "get skewered",
				answers: [blockIds.dripstoneDown, blockIds.dripstoneUp],
				score: 5
			},
			{
				riddle: "don't fall on me!",
				answers: [blockIds.dripstoneUp],
				score: 5
			},
			{
				riddle: "expensive and high maintenance, but very pretty",
				answers: [blockIds.blueOrchid],
				score: 5
			},
			{
				riddle: "the shortest flower",
				answers: [blockIds.dandelion],
				score: 5
			},
			{
				riddle: "slip n slide",
				answers: [blockIds.packedIce],
				score: 4
			},
			{
				riddle: "the oldest mystery",
				answers: [blockIds.ancientDebris, blockIds.gildedDebris],
				score: 20
			},
			{
				riddle: "cool magma",
				answers: [blockIds.obsidian, blockIds.cryingObsidian],
				score: 4
			},
			{
				riddle: "\"MINING AWAY\"",
				answers: [blockIds.diamondOre, blockIds.deepslateDiamondOre],
				score: 6
			},
			{
				riddle: "rich person's cheese",
				answers: [blockIds.goldBlock, blockIds.goldOre, blockIds.deepslateGoldOre, blockIds.netherGoldOre],
				score: 6
			},
			{
				riddle: "The rarest mineral",
				answers: [blockIds.gildedDebris],
				score: 42
			},
			{
				riddle: "I'm dying but still alive",
				answers: [blockIds.autumnLeaves],
				score: 4
			},
			{
				riddle: "red and juicy on the inside",
				answers: [blockIds.melon],
				score: 3
			},
			{
				riddle: "I guess it's october...",
				answers: [blockIds.pumpkin],
				score: 2
			},
			{
				riddle: "I look kinda like an egg",
				answers: [blockIds.oxeyeDaisy],
				score: 4
			},
			{
				riddle: "\"go touch grass\" - my mom",
				answers: [blockIds.grass],
				score: 1
			},
			{
				riddle: "scalding hot",
				answers: [blockIds.magma, blockIds.lava],
				score: 2
			},
			{
				riddle: "don't eat me in the wild!",
				answers: [blockIds.redMushroom, blockIds.brownMushroom],
				score: 4
			},
			{
				riddle: "the best wood",
				answers: [blockIds.darkOakLog],
				score: 1
			},
			{
				riddle: "...that's ironic...",
				answers: [blockIds.ironOre, blockIds.deepslateIronOre],
				score: 3
			},
			{
				riddle: "the ugliest wood",
				answers: [blockIds.birchLog],
				score: 1
			},
			{
				riddle: "who made this orange???",
				answers: [blockIds.acaciaLog],
				score: 4
			},
			{
				riddle: "dice block?",
				answers: [blockIds.redMushroomBlock],
				score: 2
			},
			{
				riddle: "find me in a geode",
				answers: [blockIds.amethystBlock],
				score: 20
			},
			{
				riddle: "the rarest tulip",
				answers: [blockIds.orangeTulip],
				score: 2
			},
			{
				riddle: "find me only in the highest places",
				answers: [blockIds.snow],
				score: 4
			},
			{
				riddle: "you're holding me right now",
				answers: [blockIds.redConcrete, blockIds.orangeConcrete, blockIds.yellowConcrete, blockIds.limeConcrete, blockIds.lightBlueConcrete, blockIds.purpleConcrete, blockIds.tnt, blockIds.redstoneBlock],
				score: 2
			},
			{
				riddle: "the most common block",
				answers: [blockIds.stone],
				score: 1
			},
			{
				riddle: "stonks",
				answers: [blockIds.diamondBlock, blockIds.netheriteBlock, blockIds.emeraldBlock, blockIds.goldBlock],
				score: 12
			},
			{
				riddle: "boom boom BOOOOM",
				answers: [blockIds.tnt],
				score: 3
			},
			{
				riddle: "who's cutting onions?",
				answers: [blockIds.cryingObsidian],
				score: 5
			},

		],
		score: 0,
		chosen: 0,
		message: ""
	}

	// ore hunt gamemode data
	oreHunt = {
		points: {
			"coalOre": 1,
			"deepslateCoalOre": 1,
			"ironOre": 2,
			"deepslateIronOre": 2,
			"copperOre": 3,
			"deepslateCopperOre": 3,
			"redstoneOre": 3,
			"deepslateRedstoneOre": 3,
			"lapisOre": 5,
			"deepslateLapisOre": 5,
			"goldOre": 5,
			"deepslateGoldOre": 5,
			"diamondOre": 15,
			"deepslateDiamondOre": 12,
			"emeraldOre": 13,
			"deepslateEmeraldOre": 13,
			"ancientDebris": 36,
			"gildedDebris": 144,
			"netherQuartzOre": 2,
			"netherGoldOre": 3,
		},
		score: 0,
		message: ""
	}

	// block hunt helpers
	function newRiddle() {
		blockHunt.chosen = Math.floor(Math.random() * blockHunt.riddles.length);
	}

	function checkBlockHuntBlock(b) {
		if (blockHunt.riddles[blockHunt.chosen].answers.includes(b)) {
			blockHunt.message = "You got it!  +" + blockHunt.riddles[blockHunt.chosen].score;
			var old = blockHunt.message;
			blockHunt.score += blockHunt.riddles[blockHunt.chosen].score;
			newRiddle();
			setTimeout(function () {
				if (blockHunt.message === old) {
					blockHunt.message = "";
				}
			}, 5000);
		}
	}

	// ore hunt helper
	function checkOreHuntBlock(b) {
		if (oreHunt.points.hasOwnProperty(blockData[b].name)) {
			oreHunt.message = blockData[b].name + " +" + oreHunt.points[blockData[b].name];
			var old = oreHunt.message;
			oreHunt.score += oreHunt.points[blockData[b].name];
			setTimeout(function () {
				if (oreHunt.message === old) {
					oreHunt.message = "";
				}
			}, 5000);
		}
	}

	// world helper functions
	var changeWorldBlock = function (t) {
		var pos = hitBox.pos;
		if (pos && pos[1] > 0 && pos[1] < maxHeight) {
			if (gamemodes[gamemode].name == "Block Hunt") {
				checkBlockHuntBlock(world.getBlock(hitBox.pos[0], hitBox.pos[1], hitBox.pos[2]));
			}
			if (gamemodes[gamemode].name == "Ore Hunt") {
				checkOreHuntBlock(world.getBlock(hitBox.pos[0], hitBox.pos[1], hitBox.pos[2]));
			}
			world.setBlock(hitBox.pos[0], hitBox.pos[1], hitBox.pos[2], t);
			if (t) {
				p.lastPlace = Date.now();
			} else {
				p.lastBreak = Date.now();
			}
		}
	};

	var newWorldBlock = function () {
		if (!hitBox.pos || !holding) {
			return;
		}
		var x = 0,
			y = 0,
			z = 0,
			pos = hitBox.pos;
		switch (hitBox.face) {
		case "top":
			y -= 1;
			break;
		case "bottom":
			y += 1;
			break;
		case "south":
			z -= 1;
			break;
		case "north":
			z += 1;
			break;
		case "west":
			x -= 1;
			break;
		case "east":
			x += 1;
			break;
		}

		if (!inBox(pos[0] + x, pos[1] + y, pos[2] + z, 1, 1, 1)) {
			pos[0] += x;
			pos[1] += y;
			pos[2] += z;
			changeWorldBlock(holding);
		}
	};

	var renderedChunks = 0;

	function getBlock(x, y, z, blocks) {
		return blocks[((x >> 4) + 1) * 9 + ((y >> 4) + 1) * 3 + (z >> 4) + 1][((x & 15) << 8) + ((y & 15) << 4) + (z & 15)] & 0xff;
	}

	function hideFace(x, y, z, blocks, type, func) {
		var block = func.call(world, x, y, z, blocks);
		var data = blockData[block]
		if (!block || block !== type && data.transparent || data.transparent && data.shadow || data.crossShape || data.flat || data.cactus || data.liquid) {
			return 1;
		}
		return 0;
	}

	var getShadows = {
		shade: [1, 0.85, 0.7, 0.6, 0.3],
		top: function (x, y, z, block) {
			var blocks = [
				blockData[getBlock(x - 1, y - 1, z - 1, block)].shadow,
				blockData[getBlock(x, y - 1, z - 1, block)].shadow,
				blockData[getBlock(x + 1, y - 1, z - 1, block)].shadow,
				blockData[getBlock(x - 1, y - 1, z, block)].shadow,
				blockData[getBlock(x, y - 1, z, block)].shadow,
				blockData[getBlock(x + 1, y - 1, z, block)].shadow,
				blockData[getBlock(x - 1, y - 1, z + 1, block)].shadow,
				blockData[getBlock(x, y - 1, z + 1, block)].shadow,
				blockData[getBlock(x + 1, y - 1, z + 1, block)].shadow,
			];
			return [
				this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]] * 0.8,
				this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]] * 0.8,
				this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]] * 0.8,
				this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]] * 0.8,
			];
		},
		bottom: function (x, y, z, block) {
			var blocks = [
				blockData[getBlock(x - 1, y + 1, z - 1, block)].shadow,
				blockData[getBlock(x, y + 1, z - 1, block)].shadow,
				blockData[getBlock(x + 1, y + 1, z - 1, block)].shadow,
				blockData[getBlock(x - 1, y + 1, z, block)].shadow,
				blockData[getBlock(x, y + 1, z, block)].shadow,
				blockData[getBlock(x + 1, y + 1, z, block)].shadow,
				blockData[getBlock(x - 1, y + 1, z + 1, block)].shadow,
				blockData[getBlock(x, y + 1, z + 1, block)].shadow,
				blockData[getBlock(x + 1, y + 1, z + 1, block)].shadow,
			];
			return [
				this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]],
				this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]],
				this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]],
				this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]],
			];
		},
		north: function (x, y, z, block) {
			var blocks = [
				blockData[getBlock(x - 1, y - 1, z + 1, block)].shadow,
				blockData[getBlock(x, y - 1, z + 1, block)].shadow,
				blockData[getBlock(x + 1, y - 1, z + 1, block)].shadow,
				blockData[getBlock(x - 1, y, z + 1, block)].shadow,
				blockData[getBlock(x, y, z + 1, block)].shadow,
				blockData[getBlock(x + 1, y, z + 1, block)].shadow,
				blockData[getBlock(x - 1, y + 1, z + 1, block)].shadow,
				blockData[getBlock(x, y + 1, z + 1, block)].shadow,
				blockData[getBlock(x + 1, y + 1, z + 1, block)].shadow,
			];
			return [
				this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]],
				this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]],
				this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]],
				this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]],
			];
		},
		south: function (x, y, z, block) {
			var blocks = [
				blockData[getBlock(x - 1, y - 1, z - 1, block)].shadow,
				blockData[getBlock(x - 1, y, z - 1, block)].shadow,
				blockData[getBlock(x - 1, y + 1, z - 1, block)].shadow,
				blockData[getBlock(x, y - 1, z - 1, block)].shadow,
				blockData[getBlock(x, y, z - 1, block)].shadow,
				blockData[getBlock(x, y + 1, z - 1, block)].shadow,
				blockData[getBlock(x + 1, y - 1, z - 1, block)].shadow,
				blockData[getBlock(x + 1, y, z - 1, block)].shadow,
				blockData[getBlock(x + 1, y + 1, z - 1, block)].shadow,
			];
			return [
				this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]],
				this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]],
				this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]],
				this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]],
			];
		},
		east: function (x, y, z, block) {
			var blocks = [
				blockData[getBlock(x + 1, y - 1, z - 1, block)].shadow,
				blockData[getBlock(x + 1, y, z - 1, block)].shadow,
				blockData[getBlock(x + 1, y + 1, z - 1, block)].shadow,
				blockData[getBlock(x + 1, y - 1, z, block)].shadow,
				blockData[getBlock(x + 1, y, z, block)].shadow,
				blockData[getBlock(x + 1, y + 1, z, block)].shadow,
				blockData[getBlock(x + 1, y - 1, z + 1, block)].shadow,
				blockData[getBlock(x + 1, y, z + 1, block)].shadow,
				blockData[getBlock(x + 1, y + 1, z + 1, block)].shadow,
			];
			return [
				this.shade[blocks[1] + blocks[2] + blocks[4] + blocks[5]] * 0.8,
				this.shade[blocks[5] + blocks[4] + blocks[8] + blocks[7]] * 0.8,
				this.shade[blocks[4] + blocks[3] + blocks[7] + blocks[6]] * 0.8,
				this.shade[blocks[0] + blocks[1] + blocks[3] + blocks[4]] * 0.8,
			];
		},
		west: function (x, y, z, block) {
			var blocks = [
				blockData[getBlock(x - 1, y - 1, z - 1, block)].shadow,
				blockData[getBlock(x - 1, y, z - 1, block)].shadow,
				blockData[getBlock(x - 1, y + 1, z - 1, block)].shadow,
				blockData[getBlock(x - 1, y - 1, z, block)].shadow,
				blockData[getBlock(x - 1, y, z, block)].shadow,
				blockData[getBlock(x - 1, y + 1, z, block)].shadow,
				blockData[getBlock(x - 1, y - 1, z + 1, block)].shadow,
				blockData[getBlock(x - 1, y, z + 1, block)].shadow,
				blockData[getBlock(x - 1, y + 1, z + 1, block)].shadow,
			];
			return [
				this.shade[blocks[7] + blocks[8] + blocks[4] + blocks[5]] * 0.8,
				this.shade[blocks[5] + blocks[4] + blocks[2] + blocks[1]] * 0.8,
				this.shade[blocks[4] + blocks[3] + blocks[1] + blocks[0]] * 0.8,
				this.shade[blocks[6] + blocks[7] + blocks[3] + blocks[4]] * 0.8,
			];
		}
	};

	var getLight = {
		blocks: [],
		top: function (x, y, z, block, ret, blockLight = 0) { // Actually the bottom... How did these get flipped?
			var blocks = this.blocks
			blocks[0] = (getBlock(x - 1, y - 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[1] = (getBlock(x, y - 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[2] = (getBlock(x + 1, y - 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[3] = (getBlock(x - 1, y - 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[4] = (getBlock(x, y - 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[5] = (getBlock(x + 1, y - 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[6] = (getBlock(x - 1, y - 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[7] = (getBlock(x, y - 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[8] = (getBlock(x + 1, y - 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4

			ret[0] = average(blocks, 4, 0, 1, 3)
			ret[1] = average(blocks, 4, 1, 2, 5)
			ret[2] = average(blocks, 4, 5, 7, 8)
			ret[3] = average(blocks, 4, 3, 6, 7)
			// debugger
			return ret
		},
		bottom: function (x, y, z, block, ret, blockLight = 0) { // Actually the top
			var blocks = this.blocks
			blocks[0] = (getBlock(x - 1, y + 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[1] = (getBlock(x, y + 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[2] = (getBlock(x + 1, y + 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[3] = (getBlock(x - 1, y + 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[4] = (getBlock(x, y + 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[5] = (getBlock(x + 1, y + 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[6] = (getBlock(x - 1, y + 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[7] = (getBlock(x, y + 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[8] = (getBlock(x + 1, y + 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4

			ret[0] = average(blocks, 4, 3, 6, 7)
			ret[1] = average(blocks, 4, 5, 7, 8)
			ret[2] = average(blocks, 4, 1, 2, 5)
			ret[3] = average(blocks, 4, 0, 1, 3)
			return ret
		},
		north: function (x, y, z, block, ret, blockLight = 0) {
			var blocks = this.blocks
			blocks[0] = (getBlock(x - 1, y - 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[1] = (getBlock(x, y - 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[2] = (getBlock(x + 1, y - 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[3] = (getBlock(x - 1, y, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[4] = (getBlock(x, y, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[5] = (getBlock(x + 1, y, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[6] = (getBlock(x - 1, y + 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[7] = (getBlock(x, y + 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[8] = (getBlock(x + 1, y + 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4

			ret[0] = average(blocks, 4, 5, 7, 8)
			ret[1] = average(blocks, 4, 3, 6, 7)
			ret[2] = average(blocks, 4, 0, 1, 3)
			ret[3] = average(blocks, 4, 1, 2, 5)
			return ret
		},
		south: function (x, y, z, block, ret, blockLight = 0) {
			var blocks = this.blocks
			blocks[0] = (getBlock(x - 1, y - 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[1] = (getBlock(x - 1, y, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[2] = (getBlock(x - 1, y + 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[3] = (getBlock(x, y - 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[4] = (getBlock(x, y, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[5] = (getBlock(x, y + 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[6] = (getBlock(x + 1, y - 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[7] = (getBlock(x + 1, y, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[8] = (getBlock(x + 1, y + 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4

			ret[0] = average(blocks, 4, 1, 2, 5)
			ret[1] = average(blocks, 4, 5, 7, 8)
			ret[2] = average(blocks, 4, 3, 6, 7)
			ret[3] = average(blocks, 4, 0, 1, 3)
			return ret
		},
		east: function (x, y, z, block, ret, blockLight = 0) {
			var blocks = this.blocks
			blocks[0] = (getBlock(x + 1, y - 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[1] = (getBlock(x + 1, y, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[2] = (getBlock(x + 1, y + 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[3] = (getBlock(x + 1, y - 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[4] = (getBlock(x + 1, y, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[5] = (getBlock(x + 1, y + 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[6] = (getBlock(x + 1, y - 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[7] = (getBlock(x + 1, y, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[8] = (getBlock(x + 1, y + 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4

			ret[0] = average(blocks, 4, 1, 2, 5)
			ret[1] = average(blocks, 4, 5, 7, 8)
			ret[2] = average(blocks, 4, 3, 6, 7)
			ret[3] = average(blocks, 4, 0, 1, 3)
			return ret
		},
		west: function (x, y, z, block, ret, blockLight = 0) {
			var blocks = this.blocks
			blocks[0] = (getBlock(x - 1, y - 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[1] = (getBlock(x - 1, y, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[2] = (getBlock(x - 1, y + 1, z - 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[3] = (getBlock(x - 1, y - 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[4] = (getBlock(x - 1, y, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[5] = (getBlock(x - 1, y + 1, z, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[6] = (getBlock(x - 1, y - 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[7] = (getBlock(x - 1, y, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4
			blocks[8] = (getBlock(x - 1, y + 1, z + 1, block) & 0xf << (blockLight * 4)) >> blockLight * 4

			ret[0] = average(blocks, 4, 5, 7, 8)
			ret[1] = average(blocks, 4, 1, 2, 5)
			ret[2] = average(blocks, 4, 0, 1, 3)
			ret[3] = average(blocks, 4, 3, 6, 7)
			return ret
		},
	};


	// Column of blocks from bedrock up
	function Section(x, y, z, size, chunk) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.size = size;
		this.arraySize = size * size * size;
		this.blocks = new Int32Array(this.arraySize);
		this.renderData = [];
		this.renderLength = 0;
		this.faces = 0;
		this.hasVisibleBlocks = false;
		this.chunk = chunk;
		this.edited = false;
	}

	Section.prototype.getBlock = function (x, y, z) {
		var s = this.size;
		return this.blocks[x * s * s + y * s + z] & 0xff;
	};

	Section.prototype.setBlock = function (x, y, z, blockID, hidden) {
		var s = this.size;
		this.blocks[x * s * s + y * s + z] = !hidden << 31 | blockID;
	};
	Section.prototype.deleteBlock = function (x, y, z) {
		var s = this.size;

		var data = this.blocks[x * s * s + y * s + z];
		var index = this.renderData.indexOf(data);
		if (index >= 0 && index < this.renderLength) {
			this.renderData.splice(index, 1);
			this.renderLength--;
			this.hasVisibleBlocks = !!this.renderLength;
			if (!world.meshQueue.includes(this.chunk)) {
				world.meshQueue.push(this.chunk);
			}
		}
		this.blocks[x * s * s + y * s + z] = blockIds.air;

	};
	Section.prototype.optimize = function (world) {
		var visible = false;
		var pos = 0;
		var xx = this.x;
		var yy = this.y;
		var zz = this.z;
		var blockData = 0;
		var blockType = 0;
		var index = 0;
		var s = this.size;
		var blocks = this.blocks;
		this.hasVisibleBlocks = false;
		this.renderLength = 0;
		var localBlocks = world.getAdjacentSubchunks(xx, yy, zz);

		// Check all the blocks in the subchunk to see if they're visible.
		for (var i = 0; i < s; i++) {
			for (var j = 0; j < s; j++) {
				for (var k = 0; k < s; k++, index++) {
					blockData = blocks[index];
					if (blockData >= 0) {
						continue;
					}
					blockType = blockData & 0xff;
					visible = hideFace(i - 1, j, k, localBlocks, blockType, getBlock) |
						hideFace(i + 1, j, k, localBlocks, blockType, getBlock) << 1 |
						hideFace(i, j - 1, k, localBlocks, blockType, getBlock) << 2 |
						hideFace(i, j + 1, k, localBlocks, blockType, getBlock) << 3 |
						hideFace(i, j, k - 1, localBlocks, blockType, getBlock) << 4 |
						hideFace(i, j, k + 1, localBlocks, blockType, getBlock) << 5;
					if (visible) {
						pos = (i | j << 4 | k << 8) << 16;
						blockData = 1 << 31 | pos | visible << 8 | blockType;
						this.renderData[this.renderLength++] = blockData;
						blocks[index] = blockData;
						this.hasVisibleBlocks = true;
					} else {
						blocks[index] = blockType;
					}
				}
			}
		}
	};
	Section.prototype.updateBlock = function (x, y, z, world) {
		var i = x;
		var j = y;
		var k = z;
		var s = this.size;
		x += this.x;
		y += this.y;
		z += this.z;
		var blockData2 = this.blocks[i * s * s + j * s + k];
		var blockType = blockData2 & 0xff;
		var visible = blockType && hideFace(x - 1, y, z, 0, blockType, world.getBlock) |
			hideFace(x + 1, y, z, 0, blockType, world.getBlock) << 1 |
			hideFace(x, y - 1, z, 0, blockType, world.getBlock) << 2 |
			hideFace(x, y + 1, z, 0, blockType, world.getBlock) << 3 |
			hideFace(x, y, z - 1, 0, blockType, world.getBlock) << 4 |
			hideFace(x, y, z + 1, 0, blockType, world.getBlock) << 5;
		var pos = (i | j << 4 | k << 8) << 16;
		var index = blockData2 < 0 ? this.renderData.indexOf(blockData2) : -1;

		if ((index < 0 || index >= this.renderLength) && !visible) {
			if (!world.meshQueue.includes(this.chunk)) {
				world.meshQueue.push(this.chunk);
			}
			return;
		}
		if (!visible) {
			this.renderData.splice(index, 1);
			this.blocks[i * s * s + j * s + k] = blockType; //Toggle invisible bit
			this.renderLength--;
			this.hasVisibleBlocks = !!this.renderLength;
			if (!world.meshQueue.includes(this.chunk)) {
				world.meshQueue.push(this.chunk);
			}
			this.chunk.minY = y < this.chunk.minY ? y : this.chunk.minY;
			this.chunk.maxY = y > this.chunk.maxY ? y : this.chunk.maxY;
			return;
		}
		if (visible && (index < 0 || index >= this.renderLength)) {
			index = this.renderLength++;
			this.hasVisibleBlocks = true;
		}
		this.chunk.minY = y < this.chunk.minY ? y : this.chunk.minY;
		this.chunk.maxY = y > this.chunk.maxY ? y : this.chunk.maxY;
		this.renderData[index] = 1 << 31 | pos | visible << 8 | blockData2 & 0xff;
		this.blocks[i * s * s + j * s + k] = this.renderData[index];
		if (!world.meshQueue.includes(this.chunk)) {
			world.meshQueue.push(this.chunk);
		}
		var block = world.getBlock(x, y, z)
		if (blockData[block]) {
			try {
				if (blockData[block].onload) {
					blockData[block].onload(x, y, z);
				}

			} catch (err) {}

		}
	};

	function spawnMushroom(x1, y1, z1) {
		world.setBlock(x1, y1, z1, blockIds.boneBlock);
		world.setBlock(x1, y1 + 1, z1, blockIds.boneBlock);
		world.setBlock(x1, y1 + 2, z1, blockIds.boneBlock);
		world.setBlock(x1, y1 + 3, z1, blockIds.boneBlock);
		world.setBlock(x1, y1 + 4, z1, blockIds.boneBlock);
		for (var xx = -1; xx <= 1; xx++) {
			for (var zz = -1; zz <= 1; zz++) {
				world.setBlock(x1 + xx, y1 + 5, z1 + zz, blockIds.redMushroomBlock);
			}
		}
		for (var yy = 2; yy <= 4; yy++) {
			world.setBlock(x1 + 2, y1 + yy, z1, blockIds.redMushroomBlock);
			world.setBlock(x1 + 2, y1 + yy, z1 + 1, blockIds.redMushroomBlock);
			world.setBlock(x1 + 2, y1 + yy, z1 - 1, blockIds.redMushroomBlock);

			world.setBlock(x1 - 2, y1 + yy, z1, blockIds.redMushroomBlock);
			world.setBlock(x1 - 2, y1 + yy, z1 + 1, blockIds.redMushroomBlock);
			world.setBlock(x1 - 2, y1 + yy, z1 - 1, blockIds.redMushroomBlock);

			world.setBlock(x1 - 1, y1 + yy, z1 + 2, blockIds.redMushroomBlock);
			world.setBlock(x1, y1 + yy, z1 + 2, blockIds.redMushroomBlock);
			world.setBlock(x1 + 1, y1 + yy, z1 + 2, blockIds.redMushroomBlock);

			world.setBlock(x1 - 1, y1 + yy, z1 - 2, blockIds.redMushroomBlock);
			world.setBlock(x1, y1 + yy, z1 - 2, blockIds.redMushroomBlock);
			world.setBlock(x1 + 1, y1 + yy, z1 - 2, blockIds.redMushroomBlock);
		}
	}
	Section.prototype.genMesh = function (barray, index) {
		if (!this.renderLength) {
			return index;
		}
		var length = this.renderLength;
		var rData = this.renderData;
		var x = 0,
			y = 0,
			z = 0,
			loc = 0,
			data = 0,
			sides = 0,
			tex = null,
			x2 = 0,
			y2 = 0,
			z2 = 0,
			verts = null,
			texVerts = null;
		var wx = this.x,
			wy = this.y,
			wz = this.z;
		var blocks = world.getAdjacentSubchunks(wx, wy, wz);

		var shadows = null;
		var bData = blockData;
		var gShadows = getShadows;
		var sedgeVerts = sideEdgeVerts;
		var tCoords = textureCoords;
		var tmap = textureMap;
		var block = Block;
		var sideMap = Sides;
		var blockSides = Object.keys(block);
		var side = "";
		var svert;
		for (var i = 0; i < length; i++) {
			data = rData[i];
			if (bData[data & 0xff].cactus) {
				svert = sedgeVerts.cactus;
			} else if (bData[data & 0xff].flat) {
				svert = sedgeVerts.flat;
			} else if (bData[data & 0xff].crossShape) {
				svert = sedgeVerts.crossShape;
			} else {
				svert = sedgeVerts.cube;
			}
			tex = bData[data & 0xff].textures;
			if (bData[data & 0xff].choice) {
				tex = choice(bData[data & 0xff].textures);
				tex = [tex, tex, tex, tex, tex, tex];
			}

			sides = data >> 8 & 0x3f;
			loc = data >> 16;
			x = loc & 15;
			y = loc >> 4 & 15;
			z = loc >> 8 & 15;

			x2 = x + this.x;
			y2 = y + this.y;
			z2 = z + this.z;

			var texNum = 0;
			for (var n = 0; n < 6; n++) {
				side = blockSides[n];
				if (sides & block[side]) {
					shadows = gShadows[side](x, y, z, blocks);
					verts = svert[sideMap[side]];
					texVerts = tCoords[tmap[tex[texNum]]];

					barray[index] = verts[0] + x2;
					barray[index + 1] = verts[1] + y2;
					barray[index + 2] = verts[2] + z2;
					barray[index + 3] = texVerts[0];
					barray[index + 4] = texVerts[1];
					barray[index + 5] = shadows[0];

					barray[index + 6] = verts[3] + x2;
					barray[index + 7] = verts[4] + y2;
					barray[index + 8] = verts[5] + z2;
					barray[index + 9] = texVerts[2];
					barray[index + 10] = texVerts[3];
					barray[index + 11] = shadows[1];

					barray[index + 12] = verts[6] + x2;
					barray[index + 13] = verts[7] + y2;
					barray[index + 14] = verts[8] + z2;
					barray[index + 15] = texVerts[4];
					barray[index + 16] = texVerts[5];
					barray[index + 17] = shadows[2];

					barray[index + 18] = verts[9] + x2;
					barray[index + 19] = verts[10] + y2;
					barray[index + 20] = verts[11] + z2;
					barray[index + 21] = texVerts[6];
					barray[index + 22] = texVerts[7];
					barray[index + 23] = shadows[3];
					index += 24;
				}
				texNum++;
			}
		}
		return index;
	};

	function newSection(x, y, z, size, chunk) {
		var section = Object.create(Section.prototype);
		Section.apply(section, [x, y, z, size, chunk]);
		return section;
	}
	var emptySection = newSection(0, 0, 0, 16);

	function getBiome(x, z, biome) {
		if (worldmodes[worldmode].name == "Normal") {
			if (noise(x / 2 * generator.biomeSmooth, z / 2 * generator.biomeSmooth) > 0.52) {
				if (biome < 0.4) {
					return "desert"
				} else if (biome < 0.45) {
					return "plains";
				} else if (biome < 0.455) {
					return "plains_edge";
				} else if (biome < 0.4625) {
					return "forests_edge";
				} else if (biome < 0.485) {
					return "flower_forest";
				} else if (biome < 0.5) {
					return "forest";
				} else if (biome < 0.585) {
					return "taiga";
				} else if (biome < 0.592) {
					return "mountains_edge";
				} else if (biome < 0.6) {
					return "mountain_ridge";
				} else if (biome < 0.64) {
					return "mountain";
				}
				return "tall_mountain";
			}
			if (biome < 0.4) {
				return "desert"
			} else if (biome < 0.45) {
				return "plains"
			} else if (biome < 0.455) {
				return "plains_edge";
			} else if (biome < 0.4625) {
				return "forests_edge";
			} else if (biome < 0.52) {
				return "forest";
			} else if (biome < 0.585) {
				return "jungle"
			} else if (biome < 0.592) {
        return "mountains_edge";
      } else if (biome < 0.6) {
        return "mountain_ridge";
      } else if (biome < 0.64) {
        return "mountain";
      }
      return "tall_mountain"
		} else if (worldmodes[worldmode].name == "Superflat") {
			return "superflat"
		} else if (worldmodes[worldmode].name == "Nether") {
			if (biome < 0.35) {
				return "warped"
			}
			if (biome < 0.42) {
				return "crimson"
			}
			if (biome < 0.47) {
				return "valley"
			}
			if (biome < 0.49) {
				return "brinks"
			} else if (biome < 0.54) {
				return "wasteland"
			} else if (biome < 0.56) {
				return "pile"
			} else {
				return "delta";
			}
		} else if (worldmodes[worldmode].name == "Stone") {
			if (biome > 0.5) {
				return "high_spikes";
			} else if (biome > 0.42) {
				return "spikes"
			}
			return "low_spikes"
		} else if (worldmodes[worldmode].name == "Moon") {
			if (biome > 0.52) {
				return "moon_highlands";
			} else if (biome > 0.42) {
				return "moon_midlands"
			}
			return "moon_lowlands"
		}
	}

	function getSubBiome(x, z, biome) {
		if (worldmodes[worldmode].name == "Normal") {
			if (noise(x * 0.0029, z * 0.0029) > 0.61 && noise(x * 0.0029, z * 0.0029) < 0.72 && getBiome(x,z,biome).includes("mountain")) {
				return "ice_caps";
			}
			if (noise(x / 2 * generator.biomeSmooth, z / 2 * generator.biomeSmooth) > 0.52 && noise(x * 0.0029, z * 0.0029) < 0.54 && getBiome(x,z,biome).includes("mountain")) {
				return "snowy_taiga";
			}
			if (noise(x / 2 * generator.biomeSmooth, z / 2 * generator.biomeSmooth) > 0.475 && noise(x * 0.0029, z * 0.0029) >= 0.54 && noise(x * 0.0029, z * 0.0029) <= 0.61 && getBiome(x,z,biome).includes("mountain")) {
				return "dotted_mountains";
			}
			if (noise(x * 0.0029, z * 0.0029) > 0.595 && getBiome(x,z,biome) == "taiga") {
				return "tall_taiga";
			}
			if (noise(x * 0.0022, z * 0.0022) > 0.55 && getBiome(x,z,biome) == "forest") {
				return "birch_forest";
			}
		}
		return false;
	}

	function getBigStruct(x, z, biome) {
		if (worldmodes[worldmode].name == "Normal") {
			if (noise(x * 0.0029, z * 0.0029) > 0.495 && noise(x * 0.0029, z * 0.0029) < 0.57 && getBiome(x,z,biome) == "plains") {
				return "village";
			}
		}
	}

	function choice(l) {
		try {
			return l[Math.floor(random() * l.length)];
		} catch (err) {
			console.log(l)
		}
	}

	function rchoice(l) {
		try {
			return l[Math.floor(Math.random() * l.length)];
		} catch (err) {
			console.log(l)
		}
	}


	function Chunk(x, z) {
		this.x = x;
		this.z = z;
		this.maxY = 0;
		this.minY = 255;
		this.sections = [];
		this.cleanSections = [];
		this.optimized = false;
		this.generated = false; // Terrain
		this.populated = false; // subbiomeures
		this.lazy = false;
		this.edited = false;
	}

	Chunk.prototype.getBlock = function (x, y, z) {
		var s = y >> 4;
		return this.sections.length > s ? this.sections[s].getBlock(x, y & 15, z) : 0;
	};

	Chunk.prototype.setBlock = function (x, y, z, blockID, hidden, user) {
		if (blockID == blockIds.netherQuartzOre) {}
		if (y < 1 && blockData[blockID].textures[0] != "bedrock") {
			return;
		}
		if (!hidden) {
			this.minY = y < this.minY ? y : this.minY;
			this.maxY = y > this.maxY ? y : this.maxY;
		}
		if (!this.sections[y >> 4]) {
			do {
				this.sections.push(newSection(this.x, this.sections.length * 16, this.z, 16, this));
			} while (!this.sections[y >> 4]);
		}
		if (user && !this.sections[y >> 4].edited) {
			this.cleanSections[y >> 4] = this.sections[y >> 4].blocks.slice();
			this.sections[y >> 4].edited = true;
			this.edited = true;
		}
		this.sections[y >> 4].setBlock(x, y & 15, z, blockID, hidden);

	};
	Chunk.prototype.optimize = function (world) {
		for (var i = 0; i < this.sections.length; i++) {
			this.sections[i].optimize(world);
		}
		if (!world.meshQueue.includes(this)) {
			world.meshQueue.push(this);
		}
		this.optimized = true;
	};
	Chunk.prototype.render = function () {
		if (!this.buffer) {
			return;
		}
		if (chunkVisible(this.x, this.minY, this.z, this.maxY)) {
			renderedChunks++;
			gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);
			gl.vertexAttribPointer(glCache.locations.aVertex, 3, gl.FLOAT, false, 24, 0);
			gl.vertexAttribPointer(glCache.locations.aTexture, 2, gl.FLOAT, false, 24, 12);
			gl.vertexAttribPointer(glCache.locations.aShadow, 1, gl.FLOAT, false, 24, 20);
			gl.vertexAttribPointer(glCache.locations.aSkylight, 1, gl.FLOAT, false, 32, 24);
			gl.drawElements(gl.TRIANGLES, 6 * this.faces, gl.UNSIGNED_INT, 0);
		}
	};
	Chunk.prototype.updateBlock = function (x, y, z, world, lazy) {
		this.lazy = lazy;
		if (this.sections.length > y >> 4) {
			try {
				this.sections[y >> 4].updateBlock(x, y & 15, z, world);
			} catch (err) {}
		}
	};
	Chunk.prototype.deleteBlock = function (x, y, z, user) {
		if (this.sections[y >> 4] && y > 0 /*&& this.getBlock(x, y, z) != 58 && this.getBlock(x, y, z) != 59*/ ) {
			if (user && !this.sections[y >> 4].edited) {
				this.cleanSections[y >> 4] = this.sections[y >> 4].blocks.slice();
				this.sections[y >> 4].edited = true;
				this.edited = true;
			}
			this.sections[y >> 4].deleteBlock(x, y & 15, z);
			this.minY = y < this.minY ? y : this.minY;
			this.maxY = y > this.maxY ? y : this.maxY;
		}
	};

	Chunk.prototype.spawnRuinedPillar = function (xx, zz, yBuff, blocks, gems) {
		var bb = getBiome(this.x + xx, this.z + zz, noise((this.x + xx) * generator.biomeSmooth, (this.z + zz) * generator.biomeSmooth));

		grd = Math.round(noise(xx * generator.biome[bb].smooth, zz * generator.biome[bb].smooth) * generator.biome[bb].height) + generator.biome[bb].extra;
		if (!this.getBlock(xx, grd, zz)) {
			return;
		}
		for (var g = grd; g <= grd + yBuff + Math.floor(random() * 8); g++) {
			if (random() < 0.05) {
				this.setBlock(xx, g, zz, choice(gems));
			} else {
				this.setBlock(xx, g, zz, choice(blocks));
			}
		}
	};

	Chunk.prototype.spawnPillar2 = function (x, z, minY, biome, b) {
		grd = Math.round(noise(x * generator.biome[biome].smooth, z * generator.biome[biome].smooth) * generator.biome[biome].height);
		for (var g = grd; g <= minY; g++) {
			this.setBlock(x, g, z, choice(b) || blockIds.calcite);
		}
	};

	Chunk.prototype.spawnPillar3 = function (i, grd, j, k, b) {
		for (var g = grd; g <= j; g++) {
			this.setBlock(i, g, k, choice(b));
		}
	};

	Chunk.prototype.setBlock2 = function (x, z, y, biome, b) {
		this.setBlock(x, y, z, b || blockIds.calcite);
	};

	Chunk.prototype.bshelf = function (i, k, gr, biome, block) {
		if (random() > 0.1) {
			this.setBlock2(i, k, gr, biome, choice(block));
			if (random() > 0.45) {
				this.setBlock2(i, k, gr + 1, biome, choice(block));
				if (random() > 0.5) {
					this.setBlock2(i, k, gr + 2, biome, choice(block));
				}
			}
		}
	}

	Chunk.prototype.populate = function () {
		randomSeed(hash(this.x, this.z) * 210000000);
		var wx = 0,
			wz = 0,
			ground = 0,
			top = 0,
			rand = 0,
			place = false;


		for (var i = 0; i < 16; i++) {
			for (var k = 0; k < 16; k++) {
				var biome = getBiome(this.x + i, this.z + k, noise((this.x + i) * generator.biomeSmooth, (this.z + k) * generator.biomeSmooth));
				var subbiome = getSubBiome(this.x + i, this.z + k, noise((this.x + i) * generator.biomeSmooth, (this.z + k) * generator.biomeSmooth));
				var struct = getBigStruct(this.x + i, this.z + k, noise((this.x + i) * generator.biomeSmooth, (this.z + k) * generator.biomeSmooth));
				var caveSmooth = generator.biome[biome].caveSmooth;
				var caveFreq = generator.biome[biome].caveFrequency;

				wx = this.x + i;
				wz = this.z + k;
				ground = Math.round(noise(wx * generator.biome[biome].smooth, wz * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra;

				if (biome == "jungle" || biome == "plains" || biome == "forest" || biome == "taiga" || biome == "flower_forest" || biome == "forests_edge" || biome == "plains_edge") {
					if (random() < 0.05 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && (this.getBlock(i, ground, k) == blockIds.grassBlock || this.getBlock(i, ground, k) == blockIds.lightGrassBlock)) {
						this.setBlock(i, ground + 1, k, (biome == "jungle") ? choice([blockIds.fern, blockIds.grass]) : blockIds.grass);
					}
					for (var j = 0; j <= 24; j++) {
						var lastY = j;
						if (random() < ((biome == "jungle") ? 0.08 : 0.04) && !this.getBlock(i, j, k) && this.getBlock(i, j + 1, k) && !blockData[this.getBlock(i, j + 1, k)].crossShape) {
							this.setBlock(i, j, k, blockIds.caveVinesBodyLit);
							for (var yy = j - 1; yy > 0; yy--) {
								if (!this.getBlock(i, yy - 1, k) && random() < ((biome == "jungle") ? 0.8 : 0.6)) {
									this.setBlock(i, yy, k, blockIds.caveVinesBodyLit);
									var lastY = yy;
								} else {
									this.setBlock(i, lastY, k, blockIds.caveVinesLit);
									break;
								}
							}
						}
					}
					for (var j = 40; j <= 80; j++) {
						if (random() < ((biome != "plains") ? 0.01 : 0.005) && !this.getBlock(i, j, k) && (blockData[this.getBlock(i, j + 1, k)].name == "stone" || blockData[this.getBlock(i, j + 1, k)].name == "dirt") && !blockData[this.getBlock(i, j + 1, k)].crossShape) {
							this.setBlock(i, j, k, blockIds.hangingRoots);
						}
					}
				}
				if (biome == "forest" || biome == "flower_forest") {
					var gg = Math.round(noise((wx + i) * generator.biome[biome].smooth, (wz + k) * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra;
					if (random() < 0.0008 && world.getBlock(wx + i, gg, wz + k) != 0 && world.getBlock(wx + i, gg + 1, wz + k) == 0 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && i < 10 && i > 4 && k < 10 && k > 4) {
						spawnMushroom(wx + i, gg + 1, wz + k);
					}
					if (biome == "forest") {
						if (random() < 0.005 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground, k) == blockIds.grassBlock) {
							this.setBlock(i, ground + 1, k, choice([blockIds.poppy, blockIds.cornFlower, blockIds.oxeyeDaisy]));
						}
						if (random() < 0.012 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {

							top = ground + Math.floor(4.5 + random((subbiome == "birch_forest" ? 4.5 : 2.5)));
							rand = Math.floor(random(4096));
							var tree = random() < (subbiome == "birch_forest" ? 0 : 0.9) ? blockIds.oakLog : ++top && blockIds.birchLog;

							//Center
							for (var j = ground + 1; j <= top; j++) {
								this.setBlock(i, j, k, tree);
							}
							this.setBlock(i, top + 1, k, blockIds.leaves);
							this.setBlock(i, ground, k, blockIds.dirt);

							if (random() < 0.08 && blockData[this.getBlock(i, top - 3, k)].name == "oakLog" && noise((wx + i) * caveSmooth, ground * caveSmooth, (wz + k) * caveSmooth) > caveFreq && i < 14 && i > 1 && k < 14 && k > 1) {
								var coord = [0, 0];
								coord[choice([0, 1])] = choice([-1, 1]);
								this.setBlock(i + coord[0], top - 3, k + coord[1], blockIds.beeNest);
							}

							//Bottom leaves
							for (var x = -2; x <= 2; x++) {
								for (var z = -2; z <= 2; z++) {
									if (x || z) {
										if ((x * z & 7) === 4) {
											place = rand & 1;
											rand >>>= 1;
											if (place) {
												world.spawnBlock(wx + x, top - 2, wz + z, blockIds.leaves);
											}
										} else {
											world.spawnBlock(wx + x, top - 2, wz + z, blockIds.leaves);
										}
									}
								}
							}

							//2nd layer leaves
							for (var x = -2; x <= 2; x++) {
								for (var z = -2; z <= 2; z++) {
									if (x || z) {
										if ((x * z & 7) === 4) {
											place = rand & 1;
											rand >>>= 1;
											if (place) {
												world.spawnBlock(wx + x, top - 1, wz + z, blockIds.leaves);
											}
										} else {
											world.spawnBlock(wx + x, top - 1, wz + z, blockIds.leaves);
										}
									}
								}
							}

							//3rd layer leaves
							for (var x = -1; x <= 1; x++) {
								for (var z = -1; z <= 1; z++) {
									if (x || z) {
										if (x & z) {
											place = rand & 1;
											rand >>>= 1;
											if (place) {
												world.spawnBlock(wx + x, top, wz + z, blockIds.leaves);
											}
										} else {
											world.spawnBlock(wx + x, top, wz + z, blockIds.leaves);
										}
									}
								}
							}

							//Top leaves
							world.spawnBlock(wx + 1, top + 1, wz, blockIds.leaves);
							world.spawnBlock(wx, top + 1, wz - 1, blockIds.leaves);
							world.spawnBlock(wx, top + 1, wz + 1, blockIds.leaves);
							world.spawnBlock(wx - 1, top + 1, wz, blockIds.leaves);
						}
					} else {
						if (random() < 0.02 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground, k) == blockIds.lightGrassBlock) {
							this.setBlock(i, ground + 1, k, choice([blockIds.poppy, blockIds.cornFlower, blockIds.oxeyeDaisy, blockIds.allium, blockIds.redTulip, blockIds.pinkTulip, blockIds.orangeTulip, blockIds.azureBluet, blockIds.dandelion]));
						}
						if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {

							top = ground + Math.floor(4.5 + random(2.5));
							rand = Math.floor(random(4096));
							var combo = choice([{
								leaves: blockIds.pinkLeaves,
								tree: blockIds.darkOakLog
							}, {
								leaves: blockIds.autumnLeaves,
								tree: blockIds.acaciaLog
							}])

							//Center
							for (var j = ground + 1; j <= top; j++) {
								this.setBlock(i, j, k, combo.tree);
							}
							this.setBlock(i, top + 1, k, combo.leaves);
							this.setBlock(i, ground, k, blockIds.dirt);

							//Bottom leaves
							for (var x = -2; x <= 2; x++) {
								for (var z = -2; z <= 2; z++) {
									if (x || z) {
										if ((x * z & 7) === 4) {
											place = rand & 1;
											rand >>>= 1;
											if (place) {
												world.spawnBlock(wx + x, top - 2, wz + z, combo.leaves);
											}
										} else {
											world.spawnBlock(wx + x, top - 2, wz + z, combo.leaves);
										}
									}
								}
							}

							//2nd layer leaves
							for (var x = -2; x <= 2; x++) {
								for (var z = -2; z <= 2; z++) {
									if (x || z) {
										if ((x * z & 7) === 4) {
											place = rand & 1;
											rand >>>= 1;
											if (place) {
												world.spawnBlock(wx + x, top - 1, wz + z, combo.leaves);
											}
										} else {
											world.spawnBlock(wx + x, top - 1, wz + z, combo.leaves);
										}
									}
								}
							}

							//3rd layer leaves
							for (var x = -1; x <= 1; x++) {
								for (var z = -1; z <= 1; z++) {
									if (x || z) {
										if (x & z) {
											place = rand & 1;
											rand >>>= 1;
											if (place) {
												world.spawnBlock(wx + x, top, wz + z, combo.leaves);
											}
										} else {
											world.spawnBlock(wx + x, top, wz + z, combo.leaves);
										}
									}
								}
							}

							//Top leaves
							world.spawnBlock(wx + 1, top + 1, wz, combo.leaves);
							world.spawnBlock(wx, top + 1, wz - 1, combo.leaves);
							world.spawnBlock(wx, top + 1, wz + 1, combo.leaves);
							world.spawnBlock(wx - 1, top + 1, wz, combo.leaves);
						}
					}


				}
				if (biome == "mountain" || biome == "mountains_edge" || biome == "tall_mountain" || biome == "mountain_ridge") {
					for (var j = 5; j <= 36; j++) {
						if (random() < 0.05 && !this.getBlock(i, j, k) && this.getBlock(i, j + 1, k) && !blockData[this.getBlock(i, j + 1, k)].crossShape) {
							this.setBlock(i, j, k, blockIds.dripstoneDown);
						}
					}
					for (var j = 0; j <= 24; j++) {
						if (random() < 0.04 && !this.getBlock(i, j, k) && this.getBlock(i, j - 1, k) && !blockData[this.getBlock(i, j - 1, k)].liquid && !blockData[this.getBlock(i, j - 1, k)].crossShape) {
							this.setBlock(i, j, k, blockIds.dripstoneUp);
						}
					}
				}
				if (biome == "desert") {

					if (random() < 0.004 && this.getBlock(i, ground, k) == blockIds.sand && !this.getBlock(i, ground + 1, k) && !this.getBlock(i + 1, ground + 1, k) && !this.getBlock(i - 1, ground + 1, k) && !this.getBlock(i, ground + 1, k + 1) && !this.getBlock(i, ground + 1, k - 1)) {
						top = ground + Math.floor(1.5 + random(3.5));
						rand = Math.floor(random(4096));
						var tree = blockIds.cactus;

						//Center
						for (var j = ground + 1; j <= top; j++) {
							this.setBlock(i, j, k, tree);
						}
					}

					if (random() < 0.006 && this.getBlock(i, ground, k) == blockIds.sand && this.getBlock(i, ground + 1, k) != blockIds.cactus && !this.getBlock(i, ground + 1, k) && !this.getBlock(i + 1, ground + 1, k) && !this.getBlock(i - 1, ground + 1, k) && !this.getBlock(i, ground + 1, k + 1) && !this.getBlock(i, ground + 1, k - 1)) {
						top = ground + Math.floor(1.5 + random(3.5));
						rand = Math.floor(random(4096));
						this.setBlock(i, ground + 1, k, blockIds.deadBush);
					}

					if (random() < 0.00035 && i > 3 && i < 13 && k > 3 && k < 13 && this.getBlock(i, ground, k) && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						this.setBlock(i, ground + 1, k, blockIds.water);

						this.setBlock(i, ground, k - 1, blockIds.sand);
						this.setBlock(i, ground, k + 1, blockIds.sand);
						this.setBlock(i - 1, ground, k, blockIds.sand);
						this.setBlock(i + 1, ground, k, blockIds.sand);

						this.setBlock(i - 1, ground, k + 1, blockIds.sand);
						this.setBlock(i - 1, ground, k - 1, blockIds.sand);
						this.setBlock(i + 1, ground, k + 1, blockIds.sand);
						this.setBlock(i + 1, ground, k - 1, blockIds.sand);

						this.setBlock(i, ground + 1, k - 1, blockIds.cutSandstone);
						this.setBlock(i, ground + 1, k + 1, blockIds.cutSandstone);
						this.setBlock(i - 1, ground + 1, k, blockIds.cutSandstone);
						this.setBlock(i + 1, ground + 1, k, blockIds.cutSandstone);

						this.setBlock(i - 1, ground + 1, k + 1, blockIds.cutSandstone);
						this.setBlock(i - 1, ground + 1, k - 1, blockIds.cutSandstone);
						this.setBlock(i + 1, ground + 1, k + 1, blockIds.cutSandstone);
						this.setBlock(i + 1, ground + 1, k - 1, blockIds.cutSandstone);

						this.setBlock(i - 1, ground + 2, k + 1, blockIds.chiseledSandstone);
						this.setBlock(i - 1, ground + 2, k - 1, blockIds.chiseledSandstone);
						this.setBlock(i + 1, ground + 2, k + 1, blockIds.chiseledSandstone);
						this.setBlock(i + 1, ground + 2, k - 1, blockIds.chiseledSandstone);

						this.setBlock(i - 1, ground + 3, k + 1, blockIds.cutSandstone);
						this.setBlock(i - 1, ground + 3, k - 1, blockIds.cutSandstone);
						this.setBlock(i + 1, ground + 3, k + 1, blockIds.cutSandstone);
						this.setBlock(i + 1, ground + 3, k - 1, blockIds.cutSandstone);

						this.setBlock(i - 1, ground + 4, k + 1, blockIds.chiseledSandstone);
						this.setBlock(i - 1, ground + 4, k - 1, blockIds.chiseledSandstone);
						this.setBlock(i + 1, ground + 4, k + 1, blockIds.chiseledSandstone);
						this.setBlock(i + 1, ground + 4, k - 1, blockIds.chiseledSandstone);
						this.setBlock(i, ground + 4, k - 1, blockIds.chiseledSandstone);
						this.setBlock(i, ground + 4, k + 1, blockIds.chiseledSandstone);
						this.setBlock(i - 1, ground + 4, k, blockIds.chiseledSandstone);
						this.setBlock(i + 1, ground + 4, k, blockIds.chiseledSandstone);
						this.setBlock(i, ground + 5, k, blockIds.chiseledSandstone);

						if (random() > 0.5) {
							this.setBlock(i, ground - 2, k, blockIds.goldBlock);
						}

					}
				}
				if (biome == "taiga") {
					if (random() < 0.03 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground, k) == blockIds.darkGrassBlock) {
						this.setBlock(i, ground + 1, k, choice([blockIds.sweetBerryBush, blockIds.grass, blockIds.sweetBerryBush, blockIds.brownMushroom, blockIds.redMushroom]));
					}

					if (random() < (subbiome == "tall_taiga" ? 0.008 : 0.018) && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						tall = Math.floor(6 + random(8)) //5 to 10
						top = ground + tall
						var tree = blockIds.spruceLog
						var leaf = blockIds.spruceLeaves

						//Center
						for (var j = ground + 1; j <= top; j++) {
							this.setBlock(i, j, k, tree)
						}
						this.setBlock(i, top + 1, k, leaf)
						this.setBlock(i, ground, k, blockIds.dirt)

						//Bottom leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top - 2, wz + z, leaf)
										}
									} else {
										world.spawnBlock(wx + x, top - 2, wz + z, leaf)
									}
								}
							}
						}

						//2nd layer leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top - 1, wz + z, leaf)
										}
									} else {
										world.spawnBlock(wx + x, top - 1, wz + z, leaf)
									}
								}
							}
						}

						//3rd layer leaves
						for (var x = -1; x <= 1; x++) {
							for (var z = -1; z <= 1; z++) {
								if (x || z) {
									if (x & z) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top, wz + z, leaf)
										}
									} else {
										world.spawnBlock(wx + x, top, wz + z, leaf)
									}
								}
							}
						}

						//Top leaves
						world.spawnBlock(wx + 1, top + 1, wz, leaf)
						world.spawnBlock(wx, top + 1, wz - 1, leaf)
						world.spawnBlock(wx, top + 1, wz + 1, leaf)
						world.spawnBlock(wx - 1, top + 1, wz, leaf)

						world.spawnBlock(wx + 1, top - 3, wz, leaf)
						world.spawnBlock(wx, top - 3, wz - 1, leaf)
						world.spawnBlock(wx, top - 3, wz + 1, leaf)
						world.spawnBlock(wx - 1, top - 3, wz, leaf)

						if (tall > 7 && tall < 10 && random() < 0.7) {
							for (var x = -2; x <= 2; x++) {
								for (var z = -2; z <= 2; z++) {
									if (x || z) {
										if ((x * z & 7) === 4) {
											place = rand & 1
											rand >>>= 1
											if (place) {
												world.spawnBlock(wx + x, top - (tall - 2), wz + z, leaf)
											}
										} else {
											world.spawnBlock(wx + x, top - (tall - 2), wz + z, leaf)
										}
									}
								}
							}

							for (var x = -1; x <= 1; x++) {
								for (var z = -1; z <= 1; z++) {
									if (x || z) {
										if ((x * z & 7) === 4) {
											place = rand & 1
											rand >>>= 1
											if (place) {
												world.spawnBlock(wx + x, top - (tall - 4), wz + z, leaf)
											}
										} else {
											world.spawnBlock(wx + x, top - (tall - 4), wz + z, leaf)
										}
									}
								}
							}
						}
					} else if (subbiome == "tall_taiga" && random() < 0.003 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						tall = Math.floor(20 + random(10))
						top = ground + tall
						var tree = blockIds.spruceLog
						var leaf = blockIds.spruceLeaves

						//Center
						for (var j = ground + 1; j < top; j++) {
							this.setBlock(i, j, k, tree)
							world.spawnBlock(wx + 1, j, wz, tree)
							world.spawnBlock(wx, j, wz + 1, tree)
							world.spawnBlock(wx + 1, j, wz + 1, tree)
						}
						this.setBlock(i, ground, k, blockIds.dirt)
						world.setBlock(wx + 1, ground, wz, blockIds.dirt)
						world.setBlock(wx, ground, wz + 1, blockIds.dirt)
						world.setBlock(wx + 1, ground, wz + 1, blockIds.dirt)

						//Messy part
						//leaves
						var w2 = 4 * 4
						var d2 = 4 * 4
						var h2 = 8 * 8

						for (var y = -1; y < 8; y++) {
							for (var x = -4.5; x < 4.5 - y * 0.2; x++) {
								for (var z = -4.5; z < 4.5 - y * 0.2; z++) {
									var n = x * x / w2 + y * y / h2 + z * z / d2
									if (n < 1) {
										world.spawnBlock(wx + x, top - 4 + y, wz + z, leaf)
									}
								}
							}
						}

					}
				}
				if (biome == "plains") {
					if (random() < 0.00018 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground, k) == blockIds.grassBlock) {
						this.setBlock(i, ground + 1, k, blockIds.pumpkin);
					}
          if (random() < 0.15 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && i == 1 && k == 1) {
						var combo = choice([{
							log: blockIds.acaciaLog,
							leaf: blockIds.autumnLeaves
						}, {
							log: blockIds.darkOakLog,
							leaf: blockIds.pinkLeaves
						}]);
						for (var xx = i; xx < i + 14; xx++) {
							for (var zz = k; zz < k + 14; zz++) {
								var grdg = Math.round(noise(xx * generator.biome[biome].smooth, zz * generator.biome[biome].smooth) * generator.biome[biome].height + generator.biome[biome].extra);
								if (random() < 0.05 && this.getBlock(xx, grdg, zz) == blockIds.grassBlock) {
									top = grdg + Math.floor(4.5 + random(2.5));
									for (var j = grdg + 1; j <= top; j++) {
										explode(xx, j, zz, 0, 0);
										this.setBlock(xx, j, zz, combo.log);
									}
									this.setBlock(xx, top + 1, zz, combo.leaf);

									//Bottom leaves
									for (var x = -2; x <= 2; x++) {
										for (var z = -2; z <= 2; z++) {
											if (x || z) {
												if ((x * z & 7) === 4) {
													place = rand & 1;
													rand >>>= 1;
													if (place) {
														world.spawnBlock(wx + xx + x - 1, top - 2, wz + zz + z - 1, combo.leaf);
													}
												} else {
													world.spawnBlock(wx + xx + x - 1, top - 2, wz + zz + z - 1, combo.leaf);
												}
											}
										}
									}

									//2nd layer leaves
									for (var x = -2; x <= 2; x++) {
										for (var z = -2; z <= 2; z++) {
											if (x || z) {
												if ((x * z & 7) === 4) {
													place = rand & 1;
													rand >>>= 1;
													if (place) {
														world.spawnBlock(wx + xx + x - 1, top - 1, wz + zz + z - 1, combo.leaf);
													}
												} else {
													world.spawnBlock(wx + xx + x - 1, top - 1, wz + zz + z - 1, combo.leaf);
												}
											}
										}
									}

									//3rd layer leaves
									for (var x = -1; x <= 1; x++) {
										for (var z = -1; z <= 1; z++) {
											if (x || z) {
												if (x & z) {
													place = rand & 1;
													rand >>>= 1;
													if (place) {
														world.spawnBlock(wx + xx + x - 1, top, wz + zz + z - 1, combo.leaf);
													}
												} else {
													world.spawnBlock(wx + xx + x - 1, top, wz + zz + z - 1, combo.leaf);
												}
											}
										}
									}

									//Top leaves

									world.spawnBlock(wx + xx, top + 1, wz + zz - 1, combo.leaf);
									world.spawnBlock(wx + xx - 1, top + 1, wz + zz - 2, combo.leaf);
									world.spawnBlock(wx + xx - 1, top + 1, wz + zz, combo.leaf);
									world.spawnBlock(wx + xx - 2, top + 1, wz + zz - 1, combo.leaf);
								}
							}
						}

					}
					if (random() < 0.3 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && i == 1 && k == 1) {
						for (var xx = i; xx < i + 14; xx++) {
							for (var zz = k; zz < k + 14; zz++) {
								var grdg = Math.round(noise(xx * generator.biome[biome].smooth, zz * generator.biome[biome].smooth) * generator.biome[biome].height + generator.biome[biome].extra);
								if (random() < 0.08 && this.getBlock(xx, grdg, zz) == blockIds.grassBlock) {
									this.setBlock(xx, grdg + 1, zz, blockIds.pumpkin);
								}
							}
						}

					}
					if (random() < 0.02 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground, k) == blockIds.grassBlock) {
						this.setBlock(i, ground + 1, k, choice([blockIds.pinkTulip, blockIds.whiteTulip, blockIds.oxeyeDaisy, blockIds.poppy, blockIds.dandelion, blockIds.azureBluet, blockIds.redTulip]));
					}

					if (random() < 0.02 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && i == 1 && k == 1) {
						var combo = choice([{
							log: blockIds.acaciaLog,
							leaf: blockIds.autumnLeaves
						}, {
							log: blockIds.darkOakLog,
							leaf: blockIds.pinkLeaves
						}]);
						for (var xx = i; xx < i + 14; xx++) {
							for (var zz = k; zz < k + 14; zz++) {
								var grdg = Math.round(noise(xx * generator.biome[biome].smooth, zz * generator.biome[biome].smooth) * generator.biome[biome].height + generator.biome[biome].extra);
								if (random() < 0.05 && this.getBlock(xx, grdg, zz) == blockIds.grassBlock) {
									top = grdg + Math.floor(4.5 + random(2.5));
									for (var j = grdg + 1; j <= top; j++) {
										explode(xx, j, zz, 0, 0);
										this.setBlock(xx, j, zz, combo.log);
									}
									this.setBlock(xx, top + 1, zz, combo.leaf);

									//Bottom leaves
									for (var x = -2; x <= 2; x++) {
										for (var z = -2; z <= 2; z++) {
											if (x || z) {
												if ((x * z & 7) === 4) {
													place = rand & 1;
													rand >>>= 1;
													if (place) {
														world.spawnBlock(wx + xx + x - 1, top - 2, wz + zz + z - 1, combo.leaf);
													}
												} else {
													world.spawnBlock(wx + xx + x - 1, top - 2, wz + zz + z - 1, combo.leaf);
												}
											}
										}
									}

									//2nd layer leaves
									for (var x = -2; x <= 2; x++) {
										for (var z = -2; z <= 2; z++) {
											if (x || z) {
												if ((x * z & 7) === 4) {
													place = rand & 1;
													rand >>>= 1;
													if (place) {
														world.spawnBlock(wx + xx + x - 1, top - 1, wz + zz + z - 1, combo.leaf);
													}
												} else {
													world.spawnBlock(wx + xx + x - 1, top - 1, wz + zz + z - 1, combo.leaf);
												}
											}
										}
									}

									//3rd layer leaves
									for (var x = -1; x <= 1; x++) {
										for (var z = -1; z <= 1; z++) {
											if (x || z) {
												if (x & z) {
													place = rand & 1;
													rand >>>= 1;
													if (place) {
														world.spawnBlock(wx + xx + x - 1, top, wz + zz + z - 1, combo.leaf);
													}
												} else {
													world.spawnBlock(wx + xx + x - 1, top, wz + zz + z - 1, combo.leaf);
												}
											}
										}
									}

									//Top leaves

									world.spawnBlock(wx + xx, top + 1, wz + zz - 1, combo.leaf);
									world.spawnBlock(wx + xx - 1, top + 1, wz + zz - 2, combo.leaf);
									world.spawnBlock(wx + xx - 1, top + 1, wz + zz, combo.leaf);
									world.spawnBlock(wx + xx - 2, top + 1, wz + zz - 1, combo.leaf);
								}
							}
						}
					}
				}
				if (biome == "jungle") {
					if (random() < 0.02 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground, k) == blockIds.grassBlock) {
						this.setBlock(i, ground + 1, k, choice([blockIds.blueOrchid, blockIds.orangeTulip, blockIds.allium]));
					}

					if (random() < 0.015 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						tall = Math.floor(5 + random(5)) //5 to 10
						top = ground + tall
						var tree = blockIds.jungleLog
						var leaf = blockIds.leaves

						//Center
						for (var j = ground + 1; j <= top; j++) {
							this.setBlock(i, j, k, tree)
						}
						this.setBlock(i, top + 1, k, leaf)
						this.setBlock(i, ground, k, blockIds.dirt)

						//Bottom leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top - 2, wz + z, leaf)
										}
									} else {
										world.spawnBlock(wx + x, top - 2, wz + z, leaf)
									}
								}
							}
						}

						//2nd layer leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top - 1, wz + z, leaf)
										}
									} else {
										world.spawnBlock(wx + x, top - 1, wz + z, leaf)
									}
								}
							}
						}

						//3rd layer leaves
						for (var x = -1; x <= 1; x++) {
							for (var z = -1; z <= 1; z++) {
								if (x || z) {
									if (x & z) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top, wz + z, leaf)
										}
									} else {
										world.spawnBlock(wx + x, top, wz + z, leaf)
									}
								}
							}
						}

						//Top leaves
						world.spawnBlock(wx + 1, top + 1, wz, leaf)
						world.spawnBlock(wx, top + 1, wz - 1, leaf)
						world.spawnBlock(wx, top + 1, wz + 1, leaf)
						world.spawnBlock(wx - 1, top + 1, wz, leaf)
					} else if (random() < 0.0008 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						tall = Math.floor(10 + random(20)) //10 to 30
						top = ground + tall
						var tree = blockIds.jungleLog
						var leaf = blockIds.leaves

						//Center
						for (var j = ground + 1; j < top; j++) {
							this.setBlock(i, j, k, tree)
							world.spawnBlock(wx + 1, j, wz, tree)
							world.spawnBlock(wx, j, wz + 1, tree)
							world.spawnBlock(wx + 1, j, wz + 1, tree)
						}
						this.setBlock(i, ground, k, blockIds.dirt)
						world.setBlock(wx + 1, ground, wz, blockIds.dirt)
						world.setBlock(wx, ground, wz + 1, blockIds.dirt)
						world.setBlock(wx + 1, ground, wz + 1, blockIds.dirt)

						//Messy part
						//leaves
						var w2 = 5 * 5
						var d2 = 5 * 5
						var h2 = 5 * 5

						for (var x = -4.5; x < 4.5; x++) {
							for (var y = 2; y < 4.5; y++) {
								for (var z = -4.5; z < 4.5; z++) {
									var n = x * x / w2 + y * y / h2 + z * z / d2
									if (n < 1) {
										world.spawnBlock(wx + x + 1, top - 4 + y, wz + z + 1, leaf)
									}
								}
							}
						}

						//the diagonal branches
						w2 = 3 * 3
						d2 = 3 * 3
						h2 = 3 * 3
						for (y = ground + 5; y < top - 1; y += Math.floor(random(10))) {
							var side = Math.floor(random(4))
							var mx = 0,
								mz = 0
							switch (side) {
							case 0:
								mx = 1
								break
							case 1:
								mx = -1
								break
							case 2:
								mz = 1
								break
							case 3:
								mz = -1
								break
							}
							var x = mx === 1 ? 2 : mx,
								z = mz === 1 ? 2 : mz
							var rnd = Math.floor(random(4)) + 2
							//branch
							for (var by = 0; by < rnd; by++) {
								world.setBlock(wx + x, y + by, wz + z, tree)
								x += mx
								z += mz
							}
							x -= mx
							z -= mz
							by -= 1

							//leaves
							for (var lx = -3; lx < 3; lx++) {
								for (var ly = 1; ly < 3; ly++) {
									for (var lz = -3; lz < 3; lz++) {
										var n = lx * lx / w2 + ly * ly / h2 + lz * lz / d2
										if (n < 1) {
											world.spawnBlock(wx + x + lx, y + by + ly, wz + z + lz, leaf)
										}
									}
								}
							}
							// m = move; l = leaf
						}
					} //end giant jungle trees; jungle bushes
					if (random() < 0.007 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						var leaves = choice([
							[blockIds.leaves, blockIds.leaves, blockIds.redBerryLeaves, blockIds.redBerryLeaves, blockIds.redBerryLeaves],
							[blockIds.leaves, blockIds.leaves, blockIds.blueBerryLeaves, blockIds.blueBerryLeaves, blockIds.blueBerryLeaves]
						])
						var w2 = 3 * 3
						var d2 = 3 * 3
						var h2 = 3 * 3
						for (var x = -3; x < 3; x++) {
							for (var y = 1; y < 3; y++) {
								for (var z = -3; z < 3; z++) {
									var n = x * x / w2 + y * y / h2 + z * z / d2
									if (n < 1) {
										world.spawnBlock(wx + x, ground + y, wz + z, choice(leaves))
									}
								}
							}
						}
						this.setBlock(i, ground + 1, k, blockIds.jungleLog)
					}
					if (random() < 0.005 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground, k) == blockIds.lightGrassBlock && !this.getBlock(i, ground + 1, k)) {
						this.setBlock(i, ground + 1, k, blockIds.melon);
					}

				}

				if (!subbiome && random() < 0.007 && i > 7 && i < 9 && k > 7 && k < 9 && this.getBlock(i, ground, k) && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
					var sets = [
						[
							[blockIds.magma, blockIds.magma, blockIds.magma, blockIds.magma, blockIds.lava],
							[blockIds.obsidian, blockIds.cryingObsidian, blockIds.goldBlock],
							[blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherGoldOre, blockIds.netherQuartzOre]
						],
						[
							[blockIds.magma, blockIds.magma, blockIds.magma, blockIds.magma, blockIds.lava],
							[blockIds.obsidian, blockIds.cryingObsidian, blockIds.goldBlock],
							[blockIds.blackstone, blockIds.blackstone, blockIds.chiseledPolishedBlackstone, blockIds.gildedBlackstone, blockIds.polishedBlackstoneBricks, blockIds.polishedBlackstoneBricks]
						],
						[
							[blockIds.soulSoil, blockIds.soulSand, blockIds.soulSand, blockIds.soulSand, blockIds.lava],
							[blockIds.obsidian, blockIds.cryingObsidian, blockIds.goldBlock],
							[blockIds.stoneBricks, blockIds.mossyStoneBricks, blockIds.stoneBricks, blockIds.mossyStoneBricks, blockIds.netherrack]
						],
						[
							[blockIds.soulSand, blockIds.glowstone],
							[blockIds.obsidian, blockIds.cryingObsidian, blockIds.goldBlock],
							[blockIds.netherBricks]
						]
					]
					var set = choice(sets);
					for (var a = 3; a > 1; a--) {
						for (var x = -(Math.floor(random() * 3) + a); x < Math.floor(random() * 3) + a; x++) {
							for (var y = -(Math.floor(random() * 3) + a); y < Math.floor(random() * 3) + a; y++) {
								if (random() < 0.15) {
									this.setBlock(i + x, ground - (a - 3), k + y, choice(set[0]));
								} else if (random() < 0.15) {
									this.setBlock(i + x, ground - (a - 3), k + y, choice(set[1]));
								} else {
									this.setBlock(i + x, ground - (a - 3), k + y, choice(set[2]));
								}

								this.setBlock(i + x + Math.floor(random() * a), ground - (a - 3), k + y, choice(set[2]));
							}
						}
					}
					var height = Math.floor(random() * 4) + 5;
					var width = Math.floor(random() * 3) + 4;
					for (var h = 0; h < height; h++) {
						for (var w = 0; w < width; w++) {
							if (w == 0 || w == width - 1 || h == 0 || h == height - 1) {
								var b = choice([blockIds.obsidian, blockIds.obsidian, blockIds.obsidian, blockIds.obsidian, blockIds.obsidian, blockIds.obsidian, blockIds.cryingObsidian, blockIds.obsidian, blockIds.obsidian, blockIds.cryingObsidian, false]);
								if (b) {
									this.setBlock(i + w - Math.floor(width / 2), ground + 1 + h, k, b);
								}
							}
						}
					}


				}
				if (!subbiome && random() < ((biome == "plains") ? 0.007 : (biome == "desert") ? 0 : 0.003) && i == 8 && k == 8 && this.getBlock(i, ground, k) && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
					var gems = [blockIds.diamondOre, blockIds.goldOre, blockIds.emeraldOre, blockIds.lapisOre];
					if (random() < 0.1) {
						gems = [blockIds.diamondOre, blockIds.goldOre, blockIds.emeraldOre, blockIds.lapisOre, blockIds.diamondBlock, blockIds.lapisBlock, blockIds.emeraldBlock, blockIds.goldBlock];
					}
					for (var x = 3; x < 8; x++) {
						for (var c = x; c >= 0; c--) {
							if (random() < 0.25) {
								this.spawnRuinedPillar(i + x, k + c, 6, [blockIds.stoneBricks, blockIds.mossyStoneBricks, blockIds.cobblestone, blockIds.mossyCobble, blockIds.chiseledStoneBricks], gems);
							}
							if (random() < 0.25) {
								this.spawnRuinedPillar(i + x, k - c, 6, [blockIds.stoneBricks, blockIds.mossyStoneBricks, blockIds.cobblestone, blockIds.mossyCobble, blockIds.chiseledStoneBricks], gems);
							}
						}
					}


					// this.setBlock(i+6, ground+2, k, blockIds.netheriteBlock);
				}
				if (!subbiome && random() < ((biome == "jungle") ? 0.007 : (biome == "mountain" || biome == "mountains_edge" || biome == "mountain_ridge" || biome == "tall_mountain" ? 0.006 : 0.004)) && i == 8 && k == 4 && this.getBlock(i, ground, k) && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
					var gr = ground + 8;
					var possibilities = {
						desert: [{
							main: [blockIds.sandstone, blockIds.smoothSandstone, blockIds.smoothSandstone, blockIds.smoothSandstone, blockIds.smoothSandstone, blockIds.chiseledSandstone, blockIds.cutSandstone],
							treasure: [blockIds.lava, blockIds.diamondBlock, blockIds.redstoneBlock]
						}],
						forest: [{
							main: [blockIds.deepslateBricks],
							treasure: [blockIds.diamondBlock, blockIds.water, blockIds.emeraldBlock]
						}],
						forests_edge: [{
							main: [blockIds.deepslateBricks],
							treasure: [blockIds.diamondBlock, blockIds.lapisBlock, blockIds.emeraldBlock]
						}],
						flower_forest: [{
								main: [blockIds.deepslateBricks],
								treasure: [blockIds.diamondBlock, blockIds.emeraldBlock]
							},
							{
								main: [blockIds.deepslateBricks],
								treasure: [blockIds.diamondBlock, blockIds.emeraldBlock]
							},
							{
								main: [blockIds.emeraldBlock],
								treasure: [blockIds.diamondBlock]
							},
							{
								main: [blockIds.deepslateBricks],
								treasure: [blockIds.diamondBlock, blockIds.emeraldBlock]
							},
							{
								main: [blockIds.deepslateBricks],
								treasure: [blockIds.diamondBlock, blockIds.emeraldBlock]
							},
							{
								main: [blockIds.deepslateBricks],
								treasure: [blockIds.diamondBlock, blockIds.emeraldBlock]
							},
							{
								main: [blockIds.diamondBlock],
								treasure: [blockIds.netheriteBlock]
							},
						],
						taiga: [{
								main: [blockIds.polishedGranite, blockIds.polishedGranite, blockIds.polishedGranite, blockIds.polishedGranite, blockIds.granite],
								treasure: [blockIds.lava, blockIds.diamondBlock, blockIds.emeraldBlock]
							},
              {
								main: [blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.stone, blockIds.coalOre, blockIds.ironOre, blockIds.goldOre, blockIds.diamondOre, blockIds.lapisOre, blockIds.copperOre],
								treasure: [blockIds.water, blockIds.diamondBlock, blockIds.netheriteBlock]
  						},
							{
								main: [blockIds.stone, blockIds.andesite, blockIds.tuff],
								treasure: [blockIds.lava, blockIds.diamondBlock, blockIds.emeraldBlock]
							}
						],
						plains: [{
								main: [blockIds.basalt, blockIds.polishedBasalt, blockIds.polishedBasalt, blockIds.polishedBasalt],
								treasure: [blockIds.diamondBlock, blockIds.lapisBlock, blockIds.glowstone]
							},
							{
								main: [blockIds.polishedBlackstoneBricks],
								treasure: [blockIds.diamondBlock, blockIds.lapisBlock, blockIds.goldBlock, blockIds.glowstone]
							},
						],
						plains_edge: [{
								main: [blockIds.basalt, blockIds.polishedBasalt, blockIds.polishedBasalt, blockIds.polishedBasalt],
								treasure: [blockIds.diamondBlock, blockIds.lapisBlock, blockIds.glowstone]
							},
							{
								main: [blockIds.polishedBlackstoneBricks],
								treasure: [blockIds.diamondBlock, blockIds.lapisBlock, blockIds.goldBlock, blockIds.glowstone]
							},
						],
						jungle: [{
							main: [blockIds.cobblestone, blockIds.mossyCobble, blockIds.stoneBricks, blockIds.mossyStoneBricks],
							treasure: [blockIds.diamondBlock, blockIds.emeraldBlock, blockIds.water]
						}],
						mountain: [{
							main: [blockIds.cobbledDeepslate, blockIds.cobbledDeepslate, blockIds.cobbledDeepslate, blockIds.deepslate],
							treasure: [blockIds.shroomlight, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.glowstone]
						}],
						tall_mountain: [{
							main: [blockIds.cobbledDeepslate, blockIds.cobbledDeepslate, blockIds.cobbledDeepslate, blockIds.deepslate],
							treasure: [blockIds.shroomlight, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.glowstone]
						}],
						mountains_edge: [{
							main: [blockIds.deepslateBricks, blockIds.cobbledDeepslate, blockIds.cobbledDeepslate, blockIds.deepslate],
							treasure: [blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.glowstone]
						}],
						mountain_ridge: [{
							main: [blockIds.deepslateBricks, blockIds.cobbledDeepslate, blockIds.cobbledDeepslate, blockIds.deepslate],
							treasure: [blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.glowstone]
						}]
					};
					var u = choice(possibilities[biome])

					this.spawnPillar2(i, k + 2, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 2, k + 2, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 3, k + 2, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 3, k + 2, gr + 5, biome, (u.main));

					this.spawnPillar2(i + 4, k + 1, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 4, k + 3, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 4, k + 5, gr + 5, biome, (u.main));
					this.setBlock2(i + 4, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 4, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 4, gr + 5, biome, choice(u.main));

					this.spawnPillar2(i + 3, k + 2, gr, biome, (u.main));
					this.setBlock2(i + 3, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 1, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 2, gr + 5, biome, choice(u.main));
					this.spawnPillar2(i + 3, k + 6, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 2, k + 7, gr + 5, biome, (u.main));
					this.spawnPillar2(i, k + 7, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 2, k + 2, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 4, k + 1, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 4, k + 3, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 4, k + 5, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 3, k + 6, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 2, k + 7, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 1, k, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 1, k, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 3, k, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 3, k, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 3, k + 4, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 3, k + 4, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 1, k + 6, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 1, k + 6, gr + 5, biome, (u.main));

					this.bshelf(i, k + 6, gr + 1, biome, ([blockIds.bookshelf]));

					this.bshelf(i, k + 6, gr + 1, biome, ([blockIds.bookshelf]));
					this.bshelf(i - 2, k + 6, gr + 1, biome, ([blockIds.bookshelf]));
					this.bshelf(i + 2, k + 6, gr + 1, biome, ([blockIds.bookshelf]));
					this.bshelf(i + 3, k + 5, gr + 1, biome, ([blockIds.bookshelf]));
					this.bshelf(i - 3, k + 3, gr + 1, biome, ([blockIds.bookshelf]));
					this.bshelf(i + 3, k + 3, gr + 1, biome, ([blockIds.bookshelf]));
					this.bshelf(i - 3, k + 5, gr + 1, biome, ([blockIds.bookshelf]));

					// this.setBlock2(i, k+5, gr+6, biome, ([blockIds.bedrock]));

					this.spawnPillar2(i + 1, k + 2, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 2, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 2, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 2, gr, biome, (u.main));

					this.spawnPillar2(i, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i + 1, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i + 3, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i + 4, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i - 4, k + 1, gr, biome, (u.main));

					this.spawnPillar2(i, k, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k, gr, biome, (u.main));

					this.spawnPillar2(i, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i + 1, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i + 3, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i + 4, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i - 4, k + 3, gr, biome, (u.main));

					this.spawnPillar2(i, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i + 1, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i + 3, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 4, gr, biome, (u.main));

					this.spawnPillar2(i, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i + 1, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i + 3, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i + 4, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i - 4, k + 5, gr, biome, (u.main));

					this.spawnPillar2(i, k + 6, gr, biome, (u.main));

					this.setBlock2(i + 1, k + 7, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 7, gr + 5, biome, choice(u.main));

					this.spawnPillar2(i + 2, k + 6, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 6, gr, biome, (u.main));

					///
					this.setBlock2(i, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 1, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 3, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 4, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 1, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 1, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 3, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 4, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 3, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i, k + 4, gr, biome, choice(u.treasure));
					this.setBlock2(i + 1, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 3, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 4, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 3, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 3, k + 4, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 3, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 3, k + 3, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 3, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 3, k + 2, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i, k + 1, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 1, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 1, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 1, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 1, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i + 1, k + 4, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i, k + 4, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i - 1, k + 4, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i + 1, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i - 2, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i + 2, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i - 1, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i + 1, k + 2, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i - 1, k + 2, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i, k + 2, gr + 5 + 2, biome, choice(u.main));

					this.setBlock2(i, k + 5, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 5, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 5, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 5, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 5, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 1, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 3, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 4, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 5, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k + 6, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 6, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 6, gr + 5, biome, choice(u.main));

				}
				for (var j = 2; j <= 50; j++) {
					if (j < 10 && random() < (biome == "flower_forest" ? 0.009 : 0.006) && !this.getBlock(i, j, k) && this.getBlock(i, j - 1, k) && !blockData[this.getBlock(i, j - 1, k)].liquid && !blockData[this.getBlock(i, j - 1, k)].crossShape) {
						this.setBlock(i, j, k, blockIds.amethystCluster);
					} else if (random() < 0.005 && !this.getBlock(i, j, k) && this.getBlock(i, j - 1, k) && !blockData[this.getBlock(i, j - 1, k)].liquid && !blockData[this.getBlock(i, j - 1, k)].crossShape) {
						this.setBlock(i, j, k, choice([blockIds.redMushroom, blockIds.brownMushroom]));
					}
				}
				if (!subbiome && random() < (biome == "mountain" || biome == "mountains_edge" || biome == "tall_mountain" ? 0 : 0.00002) && i > 3 && i < 13 && k > 3 && k < 13 && this.getBlock(i, ground, k) && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
					this.setBlock(i, ground + 1, k, blockIds.lava);
					this.setBlock(i, ground, k, blockIds.deepslateBricks);

					this.setBlock(i, ground, k - 1, blockIds.deepslateBricks);
					this.setBlock(i, ground, k + 1, blockIds.deepslateBricks);
					this.setBlock(i - 1, ground, k, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground, k, blockIds.deepslateBricks);

					this.setBlock(i - 1, ground, k + 1, blockIds.deepslateBricks);
					this.setBlock(i - 1, ground, k - 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground, k + 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground, k - 1, blockIds.deepslateBricks);

					this.setBlock(i, ground + 1, k - 1, blockIds.deepslateBricks);
					this.setBlock(i, ground + 1, k + 1, blockIds.deepslateBricks);
					this.setBlock(i - 1, ground + 1, k, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 1, k, blockIds.deepslateBricks);

					this.setBlock(i - 1, ground + 1, k + 1, blockIds.deepslateBricks);
					this.setBlock(i - 1, ground + 1, k - 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 1, k + 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 1, k - 1, blockIds.deepslateBricks);

					this.setBlock(i - 1, ground + 2, k + 1, blockIds.deepslateBricks);
					this.setBlock(i - 1, ground + 2, k - 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 2, k + 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 2, k - 1, blockIds.deepslateBricks);

					this.setBlock(i - 1, ground + 3, k + 1, blockIds.deepslateBricks);
					this.setBlock(i - 1, ground + 3, k - 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 3, k + 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 3, k - 1, blockIds.deepslateBricks);

					this.setBlock(i - 1, ground + 4, k + 1, blockIds.deepslateBricks);
					this.setBlock(i - 1, ground + 4, k - 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 4, k + 1, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 4, k - 1, blockIds.deepslateBricks);
					this.setBlock(i, ground + 4, k - 1, blockIds.deepslateBricks);
					this.setBlock(i, ground + 4, k + 1, blockIds.deepslateBricks);
					this.setBlock(i - 1, ground + 4, k, blockIds.deepslateBricks);
					this.setBlock(i + 1, ground + 4, k, blockIds.deepslateBricks);
					this.setBlock(i, ground + 5, k, blockIds.deepslateBricks);

					if (random() > 0.1) {
						this.setBlock(i, ground - 1, k, choice([blockIds.diamondBlock, blockIds.emeraldBlock, blockIds.diamondBlock, blockIds.emeraldBlock, blockIds.netheriteBlock]));
					}

				}
				if (struct == "village") {
					if (i == 8 && k == 8 && random() < 0.75 && this.getBlock(i, ground, k) == blockIds.grassBlock) {
						if (random() > 0.7) {
							var houseCenter = [choice([6, 7, 8, 9, 10]), choice([6, 7, 8, 9, 10])];
							var houseopening = choice([[choice([houseCenter[0]-3, houseCenter[0]+3]), houseCenter[1]], [houseCenter[0], choice([houseCenter[1]-3, houseCenter[1]+3])]]);

							for (var i2 = houseCenter[0]-3; i2 <= houseCenter[0]+3; i2++) {
								for (var k2 = houseCenter[1]-3; k2 <= houseCenter[1]+3; k2++) {
									if (Math.abs(houseCenter[0]-i2) != 3 && Math.abs(houseCenter[1]-k2) != 3) {
										this.setBlock(i2, ground+6, k2, blockIds.sprucePlanks);
									}
									this.spawnPillar3(i2, Math.round(noise((i2+this.x) * generator.biome[biome].smooth, (k2+this.z) * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra, ground+1, k2, ((Math.abs(houseCenter[0]-i2) == 3 && Math.abs(houseCenter[1]-k2) == 3) ? [blockIds.oakLog] : [blockIds.stoneBricks, blockIds.stoneBricks, blockIds.stoneBricks, blockIds.mossyStoneBricks]))
									if (Math.abs(houseCenter[0]-i2) == 3 || Math.abs(houseCenter[1]-k2) == 3) {
										this.spawnPillar3(i2, (i2 == houseopening[0] && k2 == houseopening[1] ? ground+4 : ground+1), ground+4, k2, ((Math.abs(houseCenter[0]-i2) == 3 && Math.abs(houseCenter[1]-k2) == 3) ? [blockIds.oakLog] : [blockIds.stoneBricks, blockIds.stoneBricks, blockIds.stoneBricks, blockIds.mossyStoneBricks]))
									}
									if ((((i2 == houseCenter[0]+3 || i2 == houseCenter[0]-3) && (k2 == houseCenter[1] || k2 == houseCenter[1]-1 || k2 == houseCenter[1]+1))|| (k2 == houseCenter[1]-3 || k2 == houseCenter[1]+3) && (i2 == houseCenter[0] || i2 == houseCenter[0]+1 || i2 == houseCenter[0]-1)) && ((i2 != houseopening[0]-1 && i2 != houseopening[0]+1 && i2 != houseopening[0]) || (k2 != houseopening[1] && k2 != houseopening[1]-1 && k2 != houseopening[1]+1))) {
										this.setBlock(i2, ground+3, k2, blockIds.glass)
									}
								}
							}

							for (var i2 = houseCenter[0]-4; i2 <= houseCenter[0]+4; i2++) {
								for (var k2 = houseCenter[1]-4; k2 <= houseCenter[1]+4; k2++) {
									if (((Math.abs(houseCenter[0]-i2) == 4) || (Math.abs(houseCenter[1]-k2) == 4)) && Math.abs(houseCenter[1]-k2) != Math.abs(houseCenter[0]-i2)) {
										this.setBlock(i2, ground+5, k2, blockIds.sprucePlanks)
									}
									else if ((Math.abs(houseCenter[0]-i2) == 3) || (Math.abs(houseCenter[1]-k2) == 3)) {
										if (Math.abs(houseCenter[1]-k2) == Math.abs(houseCenter[0]-i2)) {
											this.setBlock(i2, ground+5, k2, blockIds.sprucePlanks)
										}
										else {
											this.setBlock(i2, ground+5, k2, blockIds.stoneBricks)
											this.setBlock(i2, ground+6, k2, blockIds.sprucePlanks)
										}
									}
								}
							}
							// this.deleteBlock(houseCenter[0], ground, houseCenter[1])
							this.setBlock(houseCenter[0], ground+1, houseCenter[1], choice([blockIds.stoneBricks, blockIds.stoneBricks, blockIds.stoneBricks, blockIds.stoneBricks, blockIds.stoneBricks, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.emeraldBlock, blockIds.diamondBlock]))
						}
						else {
							var houseCenter = [choice([6, 7, 8, 9, 10]), choice([6, 7, 8, 9, 10])];
							var houseopening = choice([[choice([houseCenter[0]-2, houseCenter[0]+2]), houseCenter[1]], [houseCenter[0], choice([houseCenter[1]-2, houseCenter[1]+2])]]);

							for (var i2 = houseCenter[0]-2; i2 <= houseCenter[0]+2; i2++) {
								for (var k2 = houseCenter[1]-2; k2 <= houseCenter[1]+2; k2++) {
									if (Math.abs(houseCenter[0]-i2) != 2 && Math.abs(houseCenter[1]-k2) != 2) {
										this.setBlock(i2, ground+6, k2, blockIds.sprucePlanks);
									}
									this.spawnPillar3(i2, Math.round(noise((i2+this.x) * generator.biome[biome].smooth, (k2+this.z) * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra, ground+1, k2, ((Math.abs(houseCenter[0]-i2) == 2 && Math.abs(houseCenter[1]-k2) == 2) ? [blockIds.oakLog] : [blockIds.stoneBricks, blockIds.stoneBricks, blockIds.stoneBricks, blockIds.mossyStoneBricks]))
									if (Math.abs(houseCenter[0]-i2) == 2 || Math.abs(houseCenter[1]-k2) == 2) {
										this.spawnPillar3(i2, (i2 == houseopening[0] && k2 == houseopening[1] ? ground+4 : ground+1), ground+4, k2, ((Math.abs(houseCenter[0]-i2) == 2 && Math.abs(houseCenter[1]-k2) == 2) ? [blockIds.oakLog] : [blockIds.stoneBricks, blockIds.stoneBricks, blockIds.stoneBricks, blockIds.mossyStoneBricks]))
									}
									if ((((i2 == houseCenter[0]+2 || i2 == houseCenter[0]-2) && k2 == houseCenter[1]) || ((k2 == houseCenter[1]-2 || k2 == houseCenter[1]+2) && i2 == houseCenter[0])) && (i2 != houseopening[0] || k2 != houseopening[1])) {
										this.setBlock(i2, ground+3, k2, blockIds.glass)
									}
								}
							}

							for (var i2 = houseCenter[0]-3; i2 <= houseCenter[0]+3; i2++) {
								for (var k2 = houseCenter[1]-3; k2 <= houseCenter[1]+3; k2++) {
									if (((Math.abs(houseCenter[0]-i2) == 3) || (Math.abs(houseCenter[1]-k2) == 3)) && Math.abs(houseCenter[1]-k2) != Math.abs(houseCenter[0]-i2)) {
										this.setBlock(i2, ground+5, k2, blockIds.sprucePlanks)
									}
									else if ((Math.abs(houseCenter[0]-i2) == 2) || (Math.abs(houseCenter[1]-k2) == 2)) {
										if (Math.abs(houseCenter[1]-k2) == Math.abs(houseCenter[0]-i2)) {
											this.setBlock(i2, ground+5, k2, blockIds.sprucePlanks)
										}
										else {
											this.setBlock(i2, ground+5, k2, blockIds.stoneBricks)
											this.setBlock(i2, ground+6, k2, blockIds.sprucePlanks)
										}
									}
								}
							}

							for (var i2 = houseCenter[0]-1; i2 <= houseCenter[0]+1; i2+=2) {
								for (var k2 = houseCenter[1]-1; k2 <= houseCenter[1]+1; k2+=2) {
									if (random() < 0.4) {
										this.setBlock(i2, ground+2, k2, choice([blockIds.craftingTable, blockIds.bookshelf, blockIds.fletchingTable, blockIds.cartographyTable, blockIds.barrel, blockIds.smithingTable]))
									}
								}
							}
						}



					}
					if ((i < 5 || i > 11) && (k < 5 || k > 11) && random() < 0.001) {
						var b = (random() > 0.95 ? blockIds.tnt : blockIds.hayBlock)
						for (var i2 = i - choice([0, 1, 2]); i2 <= i + choice([0, 1, 2]); i2++) {
							for (var k2 = k - choice([0, 1, 2]); k2 <= k + choice([0, 1, 2]); k2++) {
								for (var h = 1; h <= choice([1, 1, 2, 2, 3]); h++) {
									var g = Math.round(noise((i2+this.x) * generator.biome[biome].smooth, (k2+this.z) * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra;
									if (this.getBlock(i2, g, k2))
									this.setBlock(i2, g+h, k2, b);
								}
							}
						}
					}
				}

				if (subbiome == "ice_caps") {
					if (this.getBlock(i, ground+(biome == "mountains_edge" ? -3 : 0), k) && (biome != "mountains_edge" || this.getBlock(i, ground+(biome == "mountains_edge" ? -3 : 0), k) == blockIds.gravel)) {
						this.setBlock(i, ground+(biome == "mountains_edge" ? -3 : 0), k, choice([blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce, blockIds.packedIce,blockIds.snow]));
						if (biome != "mountains_edge") {
							this.setBlock(i, ground-1, k, blockIds.packedIce);
							this.setBlock(i, ground-2, k, blockIds.packedIce);
						}
					}
				}

				if (subbiome == "snowy_taiga") {
					if (this.getBlock(i, ground + (biome == "mountains_edge" ? -3 : 0), k)) {
						this.setBlock(i, ground + (biome == "mountains_edge" ? -3 : 0), k, blockIds.snow);
						this.setBlock(i, ground-1 + (biome == "mountains_edge" ? -3 : 0), k, blockIds.snow);
					}
					if (this.getBlock(i, ground + (biome == "mountains_edge" ? -3 : 0), k) && random() < 0.016 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						tall = Math.floor(6 + random(8)) //5 to 10
						top = ground + (biome == "mountains_edge" ? -3 : 0) + tall
						var tree = blockIds.spruceLog
						var leaf = blockIds.spruceLeaves

						//Center
						for (var j = ground + 1 + (biome == "mountains_edge" ? -3 : 0); j <= top; j++) {
							this.setBlock(i, j, k, tree)
						}
						this.setBlock(i, top + 1, k, leaf)

						//Bottom leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top - 2, wz + z, leaf)
										}
									} else {
										world.spawnBlock(wx + x, top - 2, wz + z, leaf)
									}
								}
							}
						}

						//2nd layer leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top - 1, wz + z, leaf)
										}
									} else {
										world.spawnBlock(wx + x, top - 1, wz + z, leaf)
									}
								}
							}
						}

						//3rd layer leaves
						for (var x = -1; x <= 1; x++) {
							for (var z = -1; z <= 1; z++) {
								if (x || z) {
									if (x & z) {
										place = rand & 1
										rand >>>= 1
										if (place) {
											world.spawnBlock(wx + x, top, wz + z, leaf)
										}
									} else {
										world.spawnBlock(wx + x, top, wz + z, leaf)
									}
								}
							}
						}

						//Top leaves
						world.spawnBlock(wx + 1, top + 1, wz, leaf)
						world.spawnBlock(wx, top + 1, wz - 1, leaf)
						world.spawnBlock(wx, top + 1, wz + 1, leaf)
						world.spawnBlock(wx - 1, top + 1, wz, leaf)

						world.spawnBlock(wx + 1, top - 3, wz, leaf)
						world.spawnBlock(wx, top - 3, wz - 1, leaf)
						world.spawnBlock(wx, top - 3, wz + 1, leaf)
						world.spawnBlock(wx - 1, top - 3, wz, leaf)

						if (tall > 7 && tall < 10 && random() < 0.7) {
							for (var x = -2; x <= 2; x++) {
								for (var z = -2; z <= 2; z++) {
									if (x || z) {
										if ((x * z & 7) === 4) {
											place = rand & 1
											rand >>>= 1
											if (place) {
												world.spawnBlock(wx + x, top - (tall - 2), wz + z, leaf)
											}
										} else {
											world.spawnBlock(wx + x, top - (tall - 2), wz + z, leaf)
										}
									}
								}
							}

							for (var x = -1; x <= 1; x++) {
								for (var z = -1; z <= 1; z++) {
									if (x || z) {
										if ((x * z & 7) === 4) {
											place = rand & 1
											rand >>>= 1
											if (place) {
												world.spawnBlock(wx + x, top - (tall - 4), wz + z, leaf)
											}
										} else {
											world.spawnBlock(wx + x, top - (tall - 4), wz + z, leaf)
										}
									}
								}
							}
						}
				}
					if (random() < 0.003 && noise(wx * caveSmooth, ground+(biome == "mountains_edge" ? -3 : 0) * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground+(biome == "mountains_edge" ? -3 : 0), k) == blockIds.snow) {
						this.setBlock(i, ground + 1 + (biome == "mountains_edge" ? -3 : 0), k, choice([blockIds.sweetBerryBush,blockIds.sweetBerryBush,blockIds.sweetBerryBush,blockIds.sweetBerryBush,blockIds.sweetBerryBush,blockIds.sweetBerryBush,blockIds.sweetBerryBush,blockIds.deadBush]));
					}
				}
				// Blocks of each per chunk in Minecraft
				// Coal: 60
				// Iron: 50
				// Gold: 6.3
				// Redstone: 12
				// Ancient Debris: 0.5
				// Gilded debris: 0.08
				// Volcanic Rock: 0.1
				// Diamond: 2.6
				// Lapis: 3.1
				// Emerald: 11.4 in mountains only
				// Copper: 40
				ground -= 4;

				if (random() < 2.6 / 256) {
					var y = random() * 16 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, (y < 21) ? blockIds.deepslateDiamondOre : blockIds.diamondOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4, 5, 6, 7, 8, 9])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], (y < 21) ? blockIds.deepslateDiamondOre : blockIds.diamondOre);
						} else {
							break;
						}
					}
				}

				if (random() < 0.08 / 256) {
					var y = random() * 20 | 0 + 1;
					y = y < 2 ? 2 : y;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].crossShape && this.getBlock(i, y + 1, k) && !blockData[this.getBlock(i, y + 1, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.gildedDebris);
					}

				}

				if (random() < 0.5 / 256) {
					var y = random() * 16 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.ancientDebris);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], blockIds.ancientDebris);
						} else {
							break;
						}
					}
				}

				if ((biome == "mountain" || biome == "mountains_edge" || biome == "tall_mountain" || biome == "mountain_ridge") && random() < 11.4 / 256) {
					var y = random() * 40 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, (y < 21) ? blockIds.deepslateEmeraldOre : blockIds.emeraldOre);
					}
				}

				if (random() < 40 / 256) {
					var y = random() * ground | 0 + 1;
					y = y < ground - 8 ? y : ground - 8;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, (y < 21) ? blockIds.deepslateCopperOre : blockIds.copperOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid && y + p[1] < -10 + Math.round(noise(p[0] * generator.biome[biome].smooth, p[2] * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra) {

							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], (y < 21) ? blockIds.deepslateCopperOre : blockIds.copperOre);
						} else {
							break;
						}
					}
				}

				if (random() < 45 / 256) {
					var y = random() * ground | 0 + 1;
					y = y < ground - 8 ? y : ground - 8;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, (y < 21) ? blockIds.deepslateIronOre : blockIds.ironOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid && y + p[1] < -10 + Math.round(noise(p[0] * generator.biome[biome].smooth, p[2] * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], (y < 21) ? blockIds.deepslateIronOre : blockIds.ironOre);
						} else {
							break;
						}
					}
				}

				if (random() < 55 / 256) {
					var y = random() * ground | 0 + 1;
					y = y < ground - 8 ? y : ground - 8;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, (y < 21) ? blockIds.deepslateCoalOre : blockIds.coalOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid && y + p[1] < -10 + Math.round(noise(p[0] * generator.biome[biome].smooth, p[2] * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], (y < 21) ? blockIds.deepslateCoalOre : blockIds.coalOre);
						} else {
							break;
						}
					}
				}

				if (random() < 6.3 / 256) {
					var y = random() * 28 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, (y < 21) ? blockIds.deepslateGoldOre : blockIds.goldOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], (y < 21) ? blockIds.deepslateGoldOre : blockIds.goldOre);
						} else {
							break;
						}
					}
				}

				if (random() < 12 / 256) {
					var y = random() * 24 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, (y < 21) ? blockIds.deepslateRedstoneOre : blockIds.redstoneOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4, 5, 6, 7, 8])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], (y < 21) ? blockIds.deepslateRedstoneOre : blockIds.redstoneOre);
						} else {
							break;
						}
					}
				}

				if (random() < 3.1 / 256) {
					var y = random() * 36 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, (y < 21) ? blockIds.deepslateLapisOre : blockIds.lapisOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid && y + p[1]) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], (y < 21) ? blockIds.deepslateLapisOre : blockIds.lapisOre);
						} else {
							break;
						}
					}
				}

				if (random() < 0.035 && i == 1 && k == 1) {
					var j = choice([8, 10, 12, 14, 16, 18, 20, 22, 24]);
					if (this.getBlock(i, j, k)) {
						spawnGeode(wx + i, j, wz + k, choice([5, 6, 7, 8]));
					}
				}
			}

		}



		var chunkX = this.x >> 4;
		var chunkZ = this.z >> 4;
		var load = null;

		for (var i = 0; i < world.loadFrom.length; i++) {
			load = world.loadFrom[i];
			if (load.x === chunkX && load.z === chunkZ) {
				var y = load.y * 16;
				for (var j in load.blocks) {
					world.setBlock((j >> 8 & 15) + this.x, (j >> 4 & 15) + y, (j & 15) + this.z, load.blocks[j]);
				}
				world.loadFrom.splice(i--, 1);
			}
		}

		this.populated = true;
	};

	Chunk.prototype.populateStone = function () {
		randomSeed(hash(this.x, this.z) * 210000000);
		var wx = 0,
			wz = 0,
			ground = 0,
			top = 0,
			rand = 0,
			place = false;


		for (var i = 0; i < 16; i++) {
			for (var k = 0; k < 16; k++) {
				var biome = getBiome(this.x + i, this.z + k, noise((this.x + i) * generator.biomeSmooth, (this.z + k) * generator.biomeSmooth));
				var caveSmooth = generator.biome[biome].caveSmooth;
				var caveFreq = generator.biome[biome].caveFrequency;

				wx = this.x + i;
				wz = this.z + k;
				ground = Math.round(noise(wx * generator.biome[biome].smooth, wz * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra;

				for (var j = 0; j <= 74; j++) {
					var lastY = j;
					if (random() < 0.06 && !this.getBlock(i, j, k) && this.getBlock(i, j + 1, k) && !blockData[this.getBlock(i, j + 1, k)].crossShape) {
						this.setBlock(i, j, k, blockIds.caveVinesBodyLit);
						for (var yy = j - 1; yy > 0; yy--) {
							if (!this.getBlock(i, yy - 1, k) && random() < ((biome == "jungle" || biome == "flower_forest") ? 0.8 : 0.6)) {
								this.setBlock(i, yy, k, blockIds.caveVinesBodyLit);
								var lastY = yy;
							} else {
								this.setBlock(i, lastY, k, blockIds.caveVinesLit);
								break;
							}
						}
					}
				}

				ground -= 4;
				if (random() < 0.4 / 256) {
					var y = random() * 20 | 0 + 1;
					y = y < 2 ? 2 : y;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].crossShape && this.getBlock(i, y + 1, k) && !blockData[this.getBlock(i, y + 1, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.gildedDebris);
					}

				}

				if (random() < 0.8 / 256) {
					var y = random() * 16 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.ancientDebris);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], blockIds.ancientDebris);
						} else {
							break;
						}
					}
				}

				if (random() < 3.2 / 256) {
					var y = random() * 26 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.lapisOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid && y + p[1]) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], blockIds.lapisOre);
						} else {
							break;
						}
					}
				}

				if (random() < 2 / 256) {
					var y = random() * 16 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.diamondOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4, 5, 6, 7, 8, 9])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], blockIds.diamondOre);
						} else {
							break;
						}
					}
				}
			}

		}



		var chunkX = this.x >> 4;
		var chunkZ = this.z >> 4;
		var load = null;

		for (var i = 0; i < world.loadFrom.length; i++) {
			load = world.loadFrom[i];
			if (load.x === chunkX && load.z === chunkZ) {
				var y = load.y * 16;
				for (var j in load.blocks) {
					world.setBlock((j >> 8 & 15) + this.x, (j >> 4 & 15) + y, (j & 15) + this.z, load.blocks[j]);
				}
				world.loadFrom.splice(i--, 1);
			}
		}

		this.populated = true;
	};

	Chunk.prototype.populateMoon = function () {
		randomSeed(hash(this.x, this.z) * 210000000);
		var wx = 0,
			wz = 0,
			ground = 0,
			top = 0,
			rand = 0,
			place = false;


		for (var i = 0; i < 16; i++) {
			for (var k = 0; k < 16; k++) {
				var biome = getBiome(this.x + i, this.z + k, noise((this.x + i) * generator.biomeSmooth, (this.z + k) * generator.biomeSmooth));
				var caveSmooth = generator.biome[biome].caveSmooth;
				var caveFreq = generator.biome[biome].caveFrequency;

				wx = this.x + i;
				wz = this.z + k;
				ground = Math.round(noise(wx * generator.biome[biome].smooth, wz * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra;

			}

		}



		var chunkX = this.x >> 4;
		var chunkZ = this.z >> 4;
		var load = null;

		for (var i = 0; i < world.loadFrom.length; i++) {
			load = world.loadFrom[i];
			if (load.x === chunkX && load.z === chunkZ) {
				var y = load.y * 16;
				for (var j in load.blocks) {
					world.setBlock((j >> 8 & 15) + this.x, (j >> 4 & 15) + y, (j & 15) + this.z, load.blocks[j]);
				}
				world.loadFrom.splice(i--, 1);
			}
		}

		this.populated = true;
	};

	Chunk.prototype.populateNether = function () {
		randomSeed(hash(this.x, this.z) * 210000000);
		var wx = 0,
			wz = 0,
			ground = 0,
			top = 0,
			rand = 0,
			place = false;


		for (var i = 0; i < 16; i++) {
			for (var k = 0; k < 16; k++) {
				var biome = getBiome(this.x + i, this.z + k, noise((this.x + i) * generator.biomeSmooth, (this.z + k) * generator.biomeSmooth));
				var caveSmooth = generator.biome[biome].caveSmooth;
				var caveFreq = generator.biome[biome].caveFrequency;

				wx = this.x + i;
				wz = this.z + k;
				ground = Math.round(noise(wx * generator.biome[biome].smooth, wz * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra;
				if (random() < 0.02 && i > 7 && i < 9 && k > 7 && k < 9 && this.getBlock(i, ground, k) && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
					var sets = [
						[
							[blockIds.magma, blockIds.magma, blockIds.magma, blockIds.magma, blockIds.lava],
							[blockIds.obsidian, blockIds.cryingObsidian, blockIds.goldBlock],
							[blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherrack, blockIds.netherGoldOre, blockIds.netherQuartzOre]
						],
						[
							[blockIds.magma, blockIds.magma, blockIds.magma, blockIds.magma, blockIds.lava],
							[blockIds.obsidian, blockIds.cryingObsidian, blockIds.goldBlock],
							[blockIds.blackstone, blockIds.blackstone, blockIds.chiseledPolishedBlackstone, blockIds.gildedBlackstone, blockIds.polishedBlackstoneBricks, blockIds.polishedBlackstoneBricks]
						],
						[
							[blockIds.soulSoil, blockIds.soulSand, blockIds.soulSand, blockIds.soulSand, blockIds.lava],
							[blockIds.obsidian, blockIds.cryingObsidian, blockIds.goldBlock],
							[blockIds.stoneBricks, blockIds.mossyStoneBricks, blockIds.stoneBricks, blockIds.mossyStoneBricks, blockIds.netherrack]
						],
						[
							[blockIds.soulSand, blockIds.glowstone],
							[blockIds.obsidian, blockIds.cryingObsidian, blockIds.goldBlock],
							[blockIds.netherBricks]
						]
					]
					var set = choice(sets);
					for (var a = 3; a > 1; a--) {
						for (var x = -(Math.floor(random() * 3) + a); x < Math.floor(random() * 3) + a; x++) {
							for (var y = -(Math.floor(random() * 3) + a); y < Math.floor(random() * 3) + a; y++) {
								if (random() < 0.15) {
									this.setBlock(i + x, ground + 1 - (a - 3), k + y, choice(set[0]));
								} else if (random() < 0.15) {
									this.setBlock(i + x, ground + 1 - (a - 3), k + y, choice(set[1]));
								} else {
									this.setBlock(i + x, ground + 1 - (a - 3), k + y, choice(set[2]));
								}

								this.setBlock(i + x + Math.floor(random() * a), ground + 1 - (a - 3), k + y, choice(set[2]));
							}
						}
					}
					var height = Math.floor(random() * 4) + 5;
					var width = Math.floor(random() * 3) + 4;
					for (var h = 0; h < height; h++) {
						for (var w = 0; w < width; w++) {
							if (w == 0 || w == width - 1 || h == 0 || h == height - 1) {
								var b = choice([blockIds.obsidian, blockIds.obsidian, blockIds.obsidian, blockIds.obsidian, blockIds.obsidian, blockIds.obsidian, blockIds.cryingObsidian, blockIds.obsidian, blockIds.obsidian, blockIds.cryingObsidian, false]);
								if (b) {
									this.setBlock(i + w - Math.floor(width / 2), ground + 2 + h, k, b);
								}
							}
						}
					}


				}

				if (biome == "wasteland" && random() < 0.4 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && i == 1 && k == 1) {
					var m = choice([blockIds.redMushroom, blockIds.brownMushroom]);
					for (var xx = i; xx < i + 14; xx++) {
						for (var zz = k; zz < k + 14; zz++) {
							var grdg = Math.round(noise(xx * generator.biome[biome].smooth, zz * generator.biome[biome].smooth) * generator.biome[biome].height + generator.biome[biome].extra);
							if (random() < 0.06 && this.getBlock(xx, grdg, zz) == blockIds.netherrack) {
								this.setBlock(xx, grdg + 1, zz, m);
							}
						}
					}

				}
				if (biome == "wasteland" && random() < 0.006 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground, k) == blockIds.netherrack) {
					this.setBlock(i, ground + 1, k, choice([blockIds.redMushroom, blockIds.brownMushroom]));
				}

				if (biome == "valley" && random() < 0.0005 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq && this.getBlock(i, ground, k) == blockIds.soulSand) {
					this.setBlock(i, ground + 1, k, blockIds.witherRose);
				}

				if (biome == "valley" && i > 4 && i < 10 && k > 4 && k < 10 && random() < 0.002 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
					for (var ii = 0; ii < choice([4, 6, 8]); ii += 2) {
						this.setBlock(i, ground + 1, ii, blockIds.boneBlock);
						this.setBlock(i + 1, ground + 1, ii, blockIds.boneBlock);
						this.setBlock(i - 1, ground + 1, ii, blockIds.boneBlock);

						this.setBlock(i + 2, ground + 2, ii, blockIds.boneBlock);
						this.setBlock(i - 2, ground + 2, ii, blockIds.boneBlock);

						this.setBlock(i + 2, ground + 3, ii, blockIds.boneBlock);
						this.setBlock(i - 2, ground + 3, ii, blockIds.boneBlock);
					}
				}
				if (biome == "valley" && i > 4 && i < 10 && k > 4 && k < 10 && random() < 0.001 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
					for (var ii = 0; ii < choice([4, 6, 8]); ii += 2) {
						this.setBlock(i, ground + 1, ii, blockIds.boneBlock);
						this.setBlock(i + 1, ground + 1, ii, blockIds.boneBlock);
						this.setBlock(i - 1, ground + 1, ii, blockIds.boneBlock);
						this.setBlock(i + 2, ground + 1, ii, blockIds.boneBlock);

						this.setBlock(i + 3, ground + 2, ii, blockIds.boneBlock);
						this.setBlock(i - 2, ground + 2, ii, blockIds.boneBlock);
						this.setBlock(i + 3, ground + 3, ii, blockIds.boneBlock);
						this.setBlock(i - 2, ground + 3, ii, blockIds.boneBlock);
						this.setBlock(i + 2, ground + 4, ii, blockIds.boneBlock);
						this.setBlock(i - 1, ground + 4, ii, blockIds.boneBlock);
					}
				}

				if (biome == "valley" && i > 4 && i < 10 && k > 4 && k < 10 && random() < 0.004 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
					this.setBlock(i + 1, ground + 1, k - 1, blockIds.boneBlock);
					this.setBlock(i + 1, ground + 1, k + 1, blockIds.boneBlock);
					this.setBlock(i + 2, ground + 1, k, blockIds.boneBlock);
					this.setBlock(i + 3, ground + 1, k, blockIds.boneBlock);
					for (var ii = 4; ii < choice([4, 5, 6, 7]); ii++) {
						this.setBlock(i + ii, ground + 1, k, blockIds.boneBlock);
					}
				}

				if (biome == "crimson") {
					if (random() < 0.08 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						this.setBlock(i, ground + 1, k, blockIds.crimsonRoots);
					}

					if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						this.setBlock(i, ground + 1, k, blockIds.crimsonFungus);
					}

					if (random() < 0.003 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						this.setBlock(i, ground + 1, k, blockIds.warpedFungus);
					}

					if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						for (var j = 1; j < choice([2, 3, 4, 5, 6, 8, 10, 12, 13, 14, 15, 16]); j++) {
							if (!world.getBlock(i, ground + j, k)) {
								break;
							}
							this.setBlock(i, ground + j, k, blockIds.crimsonVines);
						}
					}

					if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						top = ground + Math.floor(3.5 + random(4.5));
						rand = Math.floor(random(4096));

						//Center
						for (var j = ground + 1; j <= top; j++) {
							this.setBlock(i, j, k, blockIds.crimsonLog);
						}
						this.setBlock(i, top + 1, k, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
						this.setBlock(i, ground, k, blockIds.netherrack);

						//Bottom leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top - 2, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top - 2, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//2nd layer leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top - 1, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top - 1, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//3rd layer leaves
						for (var x = -1; x <= 1; x++) {
							for (var z = -1; z <= 1; z++) {
								if (x || z) {
									if (x & z) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//Top leaves
						world.spawnBlock(wx + 1, top + 1, wz, blockIds.netherWartBlock);
						world.spawnBlock(wx, top + 1, wz - 1, blockIds.netherWartBlock);
						world.spawnBlock(wx, top + 1, wz + 1, blockIds.netherWartBlock);
						world.spawnBlock(wx - 1, top + 1, wz, blockIds.netherWartBlock);
					}

					if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						top = ground + Math.floor(3.5 + random(4.5));
						rand = Math.floor(random(4096));

						//Center
						for (var j = ground + 1; j <= top; j++) {
							this.setBlock(i, j, k, blockIds.crimsonLog);
						}
						this.setBlock(i, top + 1, k, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
						this.setBlock(i, ground, k, blockIds.netherrack);

						//Bottom leaves
						for (var x = choice([-3, -2, -1]); x <= choice([3, 2, 1]); x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top - 2, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top - 2, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//2nd layer leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top - 1, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top - 1, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//3rd layer leaves
						for (var x = choice([-2, -1]); x <= choice([2, 1]); x++) {
							for (var z = -1; z <= 1; z++) {
								if (x || z) {
									if (x & z) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top, wz + z, choice([blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.netherWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//Top leaves
						world.spawnBlock(wx + 1, top + 1, wz, blockIds.netherWartBlock);
						world.spawnBlock(wx, top + 1, wz - 1, blockIds.netherWartBlock);
						world.spawnBlock(wx, top + 1, wz + 1, blockIds.netherWartBlock);
						world.spawnBlock(wx - 1, top + 1, wz, blockIds.netherWartBlock);
					}


				}

				if (biome == "warped") {
					if (random() < 0.06 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						this.setBlock(i, ground + 1, k, blockIds.warpedRoots);
					}
					if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						this.setBlock(i, ground + 1, k, blockIds.crimsonRoots);
					}

					if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						this.setBlock(i, ground + 1, k, blockIds.warpedFungus);
					}

					if (random() < 0.002 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						this.setBlock(i, ground + 1, k, blockIds.crimsonFungus);
					}

					if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						for (var j = 1; j < choice([6, 8, 10, 12, 13, 14, 15, 16]); j++) {
							if (!world.getBlock(i, ground + j, k)) {
								break;
							}
							this.setBlock(i, ground + j, k, blockIds.warpedVines);
						}
					}
					if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						top = ground + Math.floor(3.5 + random(4.5));
						rand = Math.floor(random(4096));

						//Center
						for (var j = ground + 1; j <= top; j++) {
							this.setBlock(i, j, k, blockIds.warpedLog);
						}
						this.setBlock(i, top + 1, k, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
						this.setBlock(i, ground, k, blockIds.netherrack);

						//Bottom leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top - 2, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top - 2, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//2nd layer leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top - 1, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top - 1, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//3rd layer leaves
						for (var x = -1; x <= 1; x++) {
							for (var z = -1; z <= 1; z++) {
								if (x || z) {
									if (x & z) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//Top leaves
						world.spawnBlock(wx + 1, top + 1, wz, blockIds.warpedWartBlock);
						world.spawnBlock(wx, top + 1, wz - 1, blockIds.warpedWartBlock);
						world.spawnBlock(wx, top + 1, wz + 1, blockIds.warpedWartBlock);
						world.spawnBlock(wx - 1, top + 1, wz, blockIds.warpedWartBlock);
					}

					if (random() < 0.01 && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
						top = ground + Math.floor(3.5 + random(4.5));
						rand = Math.floor(random(4096));

						//Center
						for (var j = ground + 1; j <= top; j++) {
							this.setBlock(i, j, k, blockIds.warpedLog);
						}
						this.setBlock(i, top + 1, k, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
						this.setBlock(i, ground, k, blockIds.netherrack);

						//Bottom leaves
						for (var x = choice([-3, -2, -1]); x <= choice([3, 2, 1]); x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top - 2, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top - 2, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//2nd layer leaves
						for (var x = -2; x <= 2; x++) {
							for (var z = -2; z <= 2; z++) {
								if (x || z) {
									if ((x * z & 7) === 4) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top - 1, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top - 1, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//3rd layer leaves
						for (var x = choice([-2, -1]); x <= choice([2, 1]); x++) {
							for (var z = -1; z <= 1; z++) {
								if (x || z) {
									if (x & z) {
										place = rand & 1;
										rand >>>= 1;
										if (place) {
											world.spawnBlock(wx + x, top, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
										}
									} else {
										world.spawnBlock(wx + x, top, wz + z, choice([blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.warpedWartBlock, blockIds.shroomlight]));
									}
								}
							}
						}

						//Top leaves
						world.spawnBlock(wx + 1, top + 1, wz, blockIds.warpedWartBlock);
						world.spawnBlock(wx, top + 1, wz - 1, blockIds.warpedWartBlock);
						world.spawnBlock(wx, top + 1, wz + 1, blockIds.warpedWartBlock);
						world.spawnBlock(wx - 1, top + 1, wz, blockIds.warpedWartBlock);
					}

				}

				if (random() < ((biome == "delta" || biome == "pile" || biome == "brinks") ? 0 : (biome == "warped" ? 0.01 : 0.025)) && i == 8 && k == 4 && this.getBlock(i, ground, k) && noise(wx * caveSmooth, ground * caveSmooth, wz * caveSmooth) > caveFreq) {
					var gr = ground + 8;
					var possibilities = {
						wasteland: [{
							main: [blockIds.netherBricks],
							treasure: [blockIds.goldBlock, blockIds.netheriteBlock]
						}],
						valley: [{
							main: [blockIds.blackstone, blockIds.blackstone, blockIds.blackstone, blockIds.blackstone, blockIds.blackstone, blockIds.blackstone, blockIds.polishedBlackstoneBricks, blockIds.basalt, blockIds.polishedBasalt, blockIds.gildedBlackstone],
							treasure: [blockIds.goldBlock]
						}],
						crimson: [{
								main: [blockIds.netherBricks, blockIds.netherBricks, blockIds.netherBricks, blockIds.netherBricks, blockIds.redNetherBricks],
								treasure: [blockIds.goldBlock, blockIds.netheriteBlock]
							},
							{
								main: [blockIds.redNetherBricks],
								treasure: [blockIds.goldBlock, blockIds.netheriteBlock]
							}
						],
						warped: [{
							main: [blockIds.goldBlock],
							treasure: [blockIds.netheriteBlock]
						}],
					};
					var u = choice(possibilities[biome])

					this.spawnPillar2(i, k + 2, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 2, k + 2, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 3, k + 2, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 3, k + 2, gr + 5, biome, (u.main));

					this.spawnPillar2(i + 4, k + 1, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 4, k + 3, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 4, k + 5, gr + 5, biome, (u.main));
					this.setBlock2(i + 4, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 4, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 4, gr + 5, biome, choice(u.main));

					this.spawnPillar2(i + 3, k + 2, gr, biome, (u.main));
					this.setBlock2(i + 3, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 1, k + 2, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 2, gr + 5, biome, choice(u.main));
					this.spawnPillar2(i + 3, k + 6, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 2, k + 7, gr + 5, biome, (u.main));
					this.spawnPillar2(i, k + 7, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 2, k + 2, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 4, k + 1, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 4, k + 3, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 4, k + 5, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 3, k + 6, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 2, k + 7, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 1, k, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 1, k, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 3, k, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 3, k, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 3, k + 4, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 3, k + 4, gr + 5, biome, (u.main));
					this.spawnPillar2(i - 1, k + 6, gr + 5, biome, (u.main));
					this.spawnPillar2(i + 1, k + 6, gr + 5, biome, (u.main));

					this.bshelf(i, k + 6, gr + 1, biome, ([blockIds.cryingObsidian, blockIds.obsidian]));

					this.bshelf(i, k + 6, gr + 1, biome, ([blockIds.cryingObsidian, blockIds.obsidian]));
					this.bshelf(i - 2, k + 6, gr + 1, biome, ([blockIds.cryingObsidian, blockIds.obsidian]));
					this.bshelf(i + 2, k + 6, gr + 1, biome, ([blockIds.cryingObsidian, blockIds.obsidian]));
					this.bshelf(i + 3, k + 5, gr + 1, biome, ([blockIds.cryingObsidian, blockIds.obsidian]));
					this.bshelf(i - 3, k + 3, gr + 1, biome, ([blockIds.cryingObsidian, blockIds.obsidian]));
					this.bshelf(i + 3, k + 3, gr + 1, biome, ([blockIds.cryingObsidian, blockIds.obsidian]));
					this.bshelf(i - 3, k + 5, gr + 1, biome, ([blockIds.cryingObsidian, blockIds.obsidian]));

					// this.setBlock2(i, k+5, gr+6, biome, ([blockIds.bedrock]));

					this.spawnPillar2(i + 1, k + 2, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 2, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 2, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 2, gr, biome, (u.main));

					this.spawnPillar2(i, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i + 1, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i + 3, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i + 4, k + 1, gr, biome, (u.main));
					this.spawnPillar2(i - 4, k + 1, gr, biome, (u.main));

					this.spawnPillar2(i, k, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k, gr, biome, (u.main));

					this.spawnPillar2(i, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i + 1, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i + 3, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i + 4, k + 3, gr, biome, (u.main));
					this.spawnPillar2(i - 4, k + 3, gr, biome, (u.main));

					this.spawnPillar2(i, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i + 1, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i + 3, k + 4, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 4, gr, biome, (u.main));

					this.spawnPillar2(i, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i + 1, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i - 1, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i + 2, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i + 3, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i - 3, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i + 4, k + 5, gr, biome, (u.main));
					this.spawnPillar2(i - 4, k + 5, gr, biome, (u.main));

					this.spawnPillar2(i, k + 6, gr, biome, (u.main));

					this.setBlock2(i + 1, k + 7, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 7, gr + 5, biome, choice(u.main));

					this.spawnPillar2(i + 2, k + 6, gr, biome, (u.main));
					this.spawnPillar2(i - 2, k + 6, gr, biome, (u.main));

					///
					this.setBlock2(i, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 1, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 3, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 4, k + 1, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 1, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 1, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 3, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 4, k + 3, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 3, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i, k + 4, gr, biome, choice(u.treasure));
					this.setBlock2(i + 1, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 3, k + 4, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 4, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 3, k + 4, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 3, k + 4, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 3, k + 3, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 3, k + 3, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 3, k + 2, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 3, k + 2, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i, k + 1, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 1, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 1, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 1, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 1, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i + 1, k + 4, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i, k + 4, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i - 1, k + 4, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i + 1, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i - 2, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i + 2, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i - 1, k + 3, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i + 1, k + 2, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i - 1, k + 2, gr + 5 + 2, biome, choice(u.main));
					this.setBlock2(i, k + 2, gr + 5 + 2, biome, choice(u.main));

					this.setBlock2(i, k + 5, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 1, k + 5, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 1, k + 5, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i + 2, k + 5, gr + 5 + 1, biome, choice(u.main));
					this.setBlock2(i - 2, k + 5, gr + 5 + 1, biome, choice(u.main));

					this.setBlock2(i, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 1, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 1, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 3, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 3, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 4, k + 5, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 4, k + 5, gr + 5, biome, choice(u.main));

					this.setBlock2(i, k + 6, gr + 5, biome, choice(u.main));
					this.setBlock2(i + 2, k + 6, gr + 5, biome, choice(u.main));
					this.setBlock2(i - 2, k + 6, gr + 5, biome, choice(u.main));

				}

				// Blocks of each per chunk
				// Magma: 60
				// Nether Quartz: 42
				// Nether Gold: 40
				// Ancient Debris: 0.6
				// Gilded Debris: 0.05

				if (random() < 0.05 / 256) {
					ground -= 4;
					var y = random() * 20 | 0 + 1;
					y = y < 2 ? 2 : y;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].crossShape && this.getBlock(i, y + 1, k) && !blockData[this.getBlock(i, y + 1, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.gildedDebris);
					}
					ground += 4;
				}

				if (random() < 0.6 / 256) {
					ground -= 4;
					var y = random() * 16 | 0 + 1;
					y = (y < ground && y >= 1 && ground > 0) ? y : ground;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.ancientDebris);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([1, 2, 3, 4])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], blockIds.ancientDebris);
						} else {
							break;
						}
					}
					ground += 4;
				}

				if (random() < 60 / 256 && biome != "valley" && biome != "brinks" && biome != "crimson" && biome != "warped") {
					var y = random() * ground | 0 + 1;
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.magma);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid && y + p[1] < -10 + Math.round(noise(p[0] * generator.biome[biome].smooth, p[2] * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], blockIds.magma);
						} else {
							break;
						}
					}
				}

				if (random() < 42 / 256) {
					var y = (random() * ground | 0) + 1;
					if (biome != "wasteland") {
						y = y < ground - 3 ? y : ground - 3;
					}
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.netherQuartzOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([4, 5, 6, 7, 8])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid && y + p[1] < -10 + Math.round(noise(p[0] * generator.biome[biome].smooth, p[2] * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], blockIds.netherQuartzOre);
						} else {
							break;
						}
					}
				}

				if (random() < 40 / 256) {
					var y = (random() * ground | 0) + 1;
					if (biome != "wasteland") {
						y = y < ground - 3 ? y : ground - 3;
					}
					y = y < 2 ? 2 : y;
					if (this.getBlock(i, y, k) && !blockData[this.getBlock(i, y, k)].liquid && !blockData[this.getBlock(i, y, k)].crossShape) {
						this.setBlock(i, (y < ground && y >= 1 && ground > 0) ? y : ground, k, blockIds.netherGoldOre);
					}
					var c = 1;
					var p = [0, 0, 0]
					while (c < choice([4, 5, 6, 7, 8])) {
						p[choice([0, 1, 2])]++;
						c++;
						if (y + p[1] != 0 && this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2]) && !blockData[this.getBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2])].liquid && y + p[1] < -10 + Math.round(noise(p[0] * generator.biome[biome].smooth, p[2] * generator.biome[biome].smooth) * generator.biome[biome].height) + generator.biome[biome].extra) {
							this.setBlock(i + p[0], (y < ground && y + p[1] >= 1 && ground > 0) ? y + p[1] : ground, k + p[2], blockIds.netherGoldOre);
						} else {
							break;
						}
					}
				}

			}

		}



		var chunkX = this.x >> 4;
		var chunkZ = this.z >> 4;
		var load = null;

		for (var i = 0; i < world.loadFrom.length; i++) {
			load = world.loadFrom[i];
			if (load.x === chunkX && load.z === chunkZ) {
				var y = load.y * 16;
				for (var j in load.blocks) {
					world.setBlock((j >> 8 & 15) + this.x, (j >> 4 & 15) + y, (j & 15) + this.z, load.blocks[j]);
				}
				world.loadFrom.splice(i--, 1);
			}
		}

		this.populated = true;
	};

	Chunk.prototype.genMesh = function () {
		var start = win.performance.now();
		var barray = bigArray;
		var index = 0;
		var g = gl;
		for (var i = 0; i < this.sections.length; i++) {
			index = this.sections[i].genMesh(barray, index);
		}
		var arrayDone = win.performance.now();

		if (!this.buffer) {
			this.buffer = g.createBuffer();
		}
		var data = barray.slice(0, index);
		this.faces = data.length / 24;
		g.bindBuffer(g.ARRAY_BUFFER, this.buffer);
		g.bufferData(g.ARRAY_BUFFER, data, g.DYNAMIC_DRAW);
		this.lazy = false;
	};

	function newChunk(x, z) {
		var chunk = Object.create(Chunk.prototype);
		Chunk.call(chunk, x, z);
		return chunk;
	}

	var analytics = {
		totalTickTime: 0,
		worstFrameTime: 0,
		totalRenderTime: 0,
		totalFrameTime: 0,
		lastUpdate: 0,
		frames: 1,
		displayedTickTime: "0",
		displayedRenderTime: "0",
		displayedFrameTime: "0",
		displayedwFrameTime: 0,
		fps: 0,
	};

	// Based on disance from player
	function sortChunks(c1, c2) {
		var dx1 = p.x - c1.x - 8;
		var dy1 = p.z - c1.z - 8;
		var dx2 = p.x - c2.x - 8;
		var dy2 = p.z - c2.z - 8;
		return dx1 * dx1 + dy1 * dy1 - (dx2 * dx2 + dy2 * dy2);
	}

	function chunkDist(c) {
		var dx = p.x - c.x
		var dz = p.z - c.z
		if (dx > 16) {
			dx -= 16
		} else if (dx > 0) {
			dx = 0
		}
		if (dz > 16) {
			dz -= 16
		} else if (dz > 0) {
			dz = 0
		}
		return Math.sqrt(dx * dx + dz * dz)
	}

	function optimizeLater(x, z) {
		var chunk = world.chunks[x] ? world.chunks[x][z] : null;
		if (chunk && chunk.buffer && !world.optimizeQueue.includes(chunk)) {
			world.optimizeQueue.push(chunk);
		}
	}

	function euclideanDistance(x1, x2, y1, y2, z1, z2) {
		return Math.floor(Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2) + Math.pow(z1 - z2, 2)))
	}

	var genChunk = function (chunk) {
		var x = chunk.x >> 4;
		var z = chunk.z >> 4;
		var trueX = chunk.x;
		var trueZ = chunk.z;


		if (chunk.generated) {
			return false;
		}
		var hide = !loadString;
		var smoothness = generator.smooth;
		var hilliness = generator.height;
		var gen = 0;
		var caveSmooth = generator.caveSmooth;
		var caveFreq = generator.caveFrequency;
		var b;
		var deepStones = (random() < 0.8) ? {
			stone: choice([blockIds.tuff, blockIds.smoothBasalt]),
			y: choice([1, 3, 6, 9, 12, 15, 18, 20])
		} : false;
		var shallowStones = (random() < 0.8) ? {
			stone: choice([blockIds.andesite, blockIds.diorite, blockIds.granite]),
			y: choice([22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70])
		} : false;
		gl.uniform1f(glCache.locations.lightDepthChange, true);
		if (worldmodes[worldmode].name == "Nether" || worldmodes[worldmode].name == "Stone" || worldmodes[worldmode].name == "Moon") {
			gl.uniform1f(glCache.locations.lightDepthChange, false);
		}
		for (var i = 0; i < 16; i++) {
			b = blockIds.stone;
			for (var k = 0; k < 16; k++) {
				var biome = getBiome(trueX + i, trueZ + k, noise((trueX + i) * generator.biomeSmooth, (trueZ + k) * generator.biomeSmooth));
				var subbiome = getSubBiome(trueX + i, trueZ + k, noise((trueX + i) * generator.biomeSmooth, (trueZ + k) * generator.biomeSmooth));

				if (biome == "superflat") {
					gl.uniform1f(glCache.locations.lightDepthChange, false);
					chunk.setBlock(i, 4, k, blockIds.grassBlock);
					chunk.setBlock(i, 3, k, blockIds.dirt);
					chunk.setBlock(i, 2, k, blockIds.stone);
					chunk.setBlock(i, 1, k, blockIds.stone);
					chunk.setBlock(i, 0, k, blockIds.bedrock);
					continue;
				}

				var smoothness = generator.biome[biome].smooth;
				var hilliness = generator.biome[biome].height;
				var gen = 0;
				var caveSmooth = generator.biome[biome].caveSmooth;
				var caveFreq = generator.biome[biome].caveFrequency;


				if (biome == "forest" || biome == "plains" || biome == "jungle" || biome == "taiga" || biome == "flower_forest" || biome == "forests_edge" || biome == "plains_edge") {
					gen = Math.round(noise((trueX + i) * smoothness, (trueZ + k) * smoothness) * hilliness) + generator.extra;

					if (noise((chunk.x + i) * caveSmooth, (gen) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen, k, (biome == "jungle") ? choice([blockIds.lightGrassBlock, blockIds.grassBlock]) : (biome == "taiga" ? blockIds.darkGrassBlock : (biome == "flower_forest" ? blockIds.lightGrassBlock : blockIds.grassBlock)));
					}

					if (noise((chunk.x + i) * caveSmooth, (gen - 1) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 1, k, blockIds.dirt);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 2) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 2, k, blockIds.dirt);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 3) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 3, k, blockIds.dirt);
					}
					// b = (deepStones) ? deepStones.stone : blockIds.deepslate;
					var rad = choice([2, 3, 4, 5]);
					for (var j = 1; j < gen - 3; j++) {
						if (noise((chunk.x + i) * caveSmooth, j * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq || j < 2) {
							if (j < 20 + choice([0, 1])) {
								if (deepStones && euclideanDistance(i, 8, j, deepStones.y, k, 8) < rad) {
									chunk.setBlock(i, j, k, deepStones.stone);
								} else {
									chunk.setBlock(i, j, k, blockIds.deepslate);
								}
							} else {
								if (shallowStones && euclideanDistance(i, 8, j, shallowStones.y, k, 8) < rad) {
									chunk.setBlock(i, j, k, shallowStones.stone);
								} else {
									chunk.setBlock(i, j, k, blockIds.stone);
								}
								// chunk.setBlock(i, j, k, b);
							}

						} else if (random() < random() / 2) {
							b = blockIds.stone;
						}
					}
          if (!chunk.getBlock(i, 2, k) && chunk.getBlock(i, 1, k)) {
						if (biome == "plains") {
							chunk.setBlock(i, 2, k, blockIds.lava);
						} else {
							chunk.setBlock(i, 2, k, blockIds.deepslate);
						}
					}
					if (!chunk.getBlock(i, 3, k) && chunk.getBlock(i, 2, k)) {
						if (biome != "taiga" && biome != "jungle") {
							chunk.setBlock(i, 3, k, blockIds.lava);
						} else {
							chunk.setBlock(i, 3, k, blockIds.deepslate);
						}
					}
				} else if (biome == "mountain" || biome == "mountains_edge" || biome == "tall_mountain" || biome == "mountain_ridge") {
					gen = Math.round(noise((trueX + i) * smoothness, (trueZ + k) * smoothness) * hilliness) + generator.extra;

					if (noise((chunk.x + i) * caveSmooth, (gen) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen, k, (biome == "mountains_edge" ? choice([blockIds.stone, blockIds.stone, blockIds.gravel]) : (gen > 93 ? blockIds.packedIce : (gen == 93 ? choice([blockIds.snow, blockIds.packedIce]) : (gen > choice([87, 88]) ? blockIds.snow : (subbiome == "dotted_mountains" ? choice([blockIds.stone, blockIds.stone,blockIds.tuff, blockIds.andesite]) : blockIds.stone))))));
					}

					if (noise((chunk.x + i) * caveSmooth, (gen - 1) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 1, k, (gen - 1 > 94 ? blockIds.packedIce : (gen - 1 == 93 ? choice([blockIds.snow, blockIds.packedIce]) : (gen > choice([87, 88]) ? blockIds.snow : (subbiome == "dotted_mountains" ? choice([blockIds.stone, blockIds.stone,blockIds.tuff, blockIds.andesite]) : blockIds.stone)))));
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 2) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 2, k, (gen - 2 > 94 ? blockIds.packedIce : (subbiome == "dotted_mountains" ? choice([blockIds.stone, blockIds.stone,blockIds.tuff, blockIds.andesite]) : blockIds.stone)));
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 3) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 3, k, (gen - 3 > 94 ? blockIds.packedIce : (subbiome == "dotted_mountains" ? choice([blockIds.stone, blockIds.stone,blockIds.tuff, blockIds.andesite]) : blockIds.stone)));
					}
					var rad = choice([2, 3, 4, 5]);
					for (var j = 1; j < gen - 3; j++) {
						if (noise((chunk.x + i) * caveSmooth, j * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq || j < 2) {
							if (j < 20 + choice([0, 1])) {
								if (deepStones && euclideanDistance(i, 8, j, deepStones.y, k, 8) < rad) {
									chunk.setBlock(i, j, k, deepStones.stone);
								} else {
									chunk.setBlock(i, j, k, blockIds.deepslate);
								}
							} else {
								if (shallowStones && euclideanDistance(i, 8, j, shallowStones.y, k, 8) < rad) {
									chunk.setBlock(i, j, k, shallowStones.stone);
								} else {
									chunk.setBlock(i, j, k, blockIds.stone);
								}
								// chunk.setBlock(i, j, k, b);
							}

						} else if (Math.random() < Math.random() / 2) {
							b = blockIds.stone;
						}
					}
          if (!chunk.getBlock(i, 2, k) && chunk.getBlock(i, 1, k)) {
            chunk.setBlock(i, 2, k, blockIds.water);
          }
					if (!chunk.getBlock(i, 3, k) && chunk.getBlock(i, 2, k)) {
						chunk.setBlock(i, 3, k, blockIds.water);
					}
				} else if (biome == "desert") {
					gen = Math.round(noise((trueX + i) * smoothness, (trueZ + k) * smoothness) * hilliness) + generator.extra;

					if (noise((chunk.x + i) * caveSmooth, (gen) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen, k, blockIds.sand);
					}

					if (noise((chunk.x + i) * caveSmooth, (gen - 1) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 1, k, blockIds.sand);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 2) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 2, k, blockIds.sandstone);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 3) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 3, k, blockIds.sandstone);
					}
					var rad = choice([2, 3, 4, 5]);
					for (var j = 1; j < gen - 3; j++) {
						if (noise((chunk.x + i) * caveSmooth, j * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq || j < 4) {
							if (j < 20 + choice([0, 1])) {
								if (deepStones && euclideanDistance(i, 8, j, deepStones.y, k, 8) < rad) {
									chunk.setBlock(i, j, k, deepStones.stone);
								} else {
									chunk.setBlock(i, j, k, blockIds.deepslate);
								}
							} else {
								if (shallowStones && euclideanDistance(i, 8, j, shallowStones.y, k, 8) < rad) {
									chunk.setBlock(i, j, k, shallowStones.stone);
								} else {
									chunk.setBlock(i, j, k, blockIds.stone);
								}
								// chunk.setBlock(i, j, k, b);
							}

						} else if (random() < random() / 2) {
							b = blockIds.stone;
						}
					}
				} else if (biome == "wasteland" || biome == "pile" || biome == "crimson" || biome == "warped") {
					gen = Math.round(noise((trueX + i) * smoothness, (trueZ + k) * smoothness) * hilliness) + generator.extra;

					if (noise((chunk.x + i) * caveSmooth, (gen) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen, k, (biome == "crimson" ? blockIds.crimsonNylium : (biome == "warped" ? blockIds.warpedNylium : blockIds.netherrack)));
					}

					if (noise((chunk.x + i) * caveSmooth, (gen - 1) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 1, k, blockIds.netherrack);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 2) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 2, k, blockIds.netherrack);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 3) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 3, k, blockIds.netherrack);
					}
					for (var j = 1; j < gen - 3; j++) {
						if (noise((chunk.x + i) * caveSmooth, j * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq || j < 3) {
							chunk.setBlock(i, j, k, blockIds.netherrack);
						}
					}
					chunk.setBlock(i, 80, k, blockIds.bedrock);
					for (var jj = choice([77, 78]); jj < 80; jj++) {
						chunk.setBlock(i, jj, k, blockIds.netherrack);
					}
					if (!chunk.getBlock(i, 3, k) && chunk.getBlock(i, 2, k) && biome != "taiga" && biome != "jungle") {
						chunk.setBlock(i, 3, k, blockIds.lava);
					}
				} else if (biome == "valley" || biome == "brinks") {
					gen = Math.round(noise((trueX + i) * smoothness, (trueZ + k) * smoothness) * hilliness) + generator.extra;

					if (noise((chunk.x + i) * caveSmooth, (gen) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen, k, (biome == "valley" ? blockIds.soulSand : blockIds.soulSoil));
					}

					if (noise((chunk.x + i) * caveSmooth, (gen - 1) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 1, k, blockIds.soulSand);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 2) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 2, k, blockIds.netherrack);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 3) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 3, k, blockIds.netherrack);
					}
					for (var j = 1; j < gen - 3; j++) {
						if (noise((chunk.x + i) * caveSmooth, j * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq || j < 3) {
							chunk.setBlock(i, j, k, blockIds.netherrack);
						}
					}
					chunk.setBlock(i, 80, k, blockIds.bedrock);
					for (var jj = choice([77, 78]); jj < 80; jj++) {
						chunk.setBlock(i, jj, k, blockIds.netherrack);
					}
					if (!chunk.getBlock(i, 3, k) && chunk.getBlock(i, 2, k) && biome != "taiga" && biome != "jungle") {
						chunk.setBlock(i, 3, k, blockIds.lava);
					}
				} else if (biome == "delta") {
					gen = Math.round(noise((trueX + i) * smoothness, (trueZ + k) * smoothness) * hilliness) + generator.extra;

					if (noise((chunk.x + i) * caveSmooth, (gen) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen, k, blockIds.basalt);
					}

					if (noise((chunk.x + i) * caveSmooth, (gen - 1) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 1, k, blockIds.basalt);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 2) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 2, k, blockIds.blackstone);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 3) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 3, k, choice([blockIds.blackstone, blockIds.basalt]));
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 4) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 4, k, choice([blockIds.blackstone, blockIds.basalt]));
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 5) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 5, k, blockIds.blackstone);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 6) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 6, k, blockIds.blackstone);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 7) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 7, k, blockIds.blackstone);
					}
					if (noise((chunk.x + i) * caveSmooth, (gen - 8) * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq) {
						chunk.setBlock(i, gen - 8, k, blockIds.blackstone);
					}
					for (var j = 1; j < gen - 8; j++) {
						if (noise((chunk.x + i) * caveSmooth, j * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq || j < 3) {
							chunk.setBlock(i, j, k, blockIds.netherrack);
						}
					}
					chunk.setBlock(i, 80, k, blockIds.bedrock);
					for (var jj = choice([77, 78]); jj < 80; jj++) {
						chunk.setBlock(i, jj, k, blockIds.netherrack);
					}
					if (!chunk.getBlock(i, 3, k) && chunk.getBlock(i, 2, k) && biome != "taiga" && biome != "jungle") {
						chunk.setBlock(i, 3, k, blockIds.lava);
					}
				} else if (biome == "high_spikes" || biome == "spikes" || biome == "low_spikes") {
					gen = Math.round(noise((trueX + i) * smoothness, (trueZ + k) * smoothness) * hilliness) + generator.extra;
					for (var j = 1; j < gen; j++) {
						if (noise((chunk.x + i) * caveSmooth, j * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq || j < 3) {
							chunk.setBlock(i, j, k, choice([blockIds.stone, blockIds.cobblestone, blockIds.mossyCobble, blockIds.stoneBricks, blockIds.mossyStoneBricks, blockIds.chiseledStoneBricks]));
						}
					}
					chunk.setBlock(i, 72, k, blockIds.bedrock);
					chunk.setBlock(i, 71, k, choice([blockIds.stone, blockIds.cobblestone, blockIds.mossyCobble, blockIds.stoneBricks, blockIds.mossyStoneBricks, blockIds.chiseledStoneBricks]));
					for (var j = 70; j > 62; j--) {
						if (noise((chunk.x + i) * 0.16, j * 0.16, (chunk.z + k) * 0.16) > (0.5) || j < 3) {
							chunk.setBlock(i, j, k, choice([blockIds.stone, blockIds.cobblestone, blockIds.mossyCobble, blockIds.stoneBricks, blockIds.mossyStoneBricks, blockIds.chiseledStoneBricks]));
						}
					}
				} else if (biome == "moon_highlands" || biome == "moon_lowlands" || biome == "moon_midlands") {
					gen = Math.round(noise((trueX + i) * smoothness, (trueZ + k) * smoothness) * hilliness) + generator.extra;
					for (var j = 1; j < gen; j++) {
						if (noise((chunk.x + i) * caveSmooth, j * caveSmooth, (chunk.z + k) * caveSmooth) > caveFreq || j < 3) {
							chunk.setBlock(i, j, k, choice([blockIds.calcite, blockIds.polishedDiorite, blockIds.diorite, blockIds.calcite, blockIds.polishedDiorite, blockIds.diorite, blockIds.calcite, blockIds.polishedDiorite, blockIds.diorite, blockIds.calcite, blockIds.polishedDiorite, blockIds.diorite, blockIds.sand, blockIds.smoothSandstone]));
						}
					}
				}

				chunk.setBlock(i, 0, k, blockIds.bedrock);

			}
		}
		chunk.generated = true;
		generatedChunks++;

		optimizeLater(x + 1, z);
		optimizeLater(x - 1, z);
		optimizeLater(x, z + 1);
		optimizeLater(x, z - 1);
	};

	var getAdjacentSubchunks = function (x, y, z) {
		var minChunkX = x - 16 >> 4;
		var maxChunkX = x + 16 >> 4;
		var minChunkY = y - 16 >> 4;
		var maxChunkY = y + 16 >> 4;
		var minChunkZ = z - 16 >> 4;
		var maxChunkZ = z + 16 >> 4;
		var ret = [];
		for (x = minChunkX; x <= maxChunkX; x++) {
			for (var y = minChunkY; y <= maxChunkY; y++) {
				for (z = minChunkZ; z <= maxChunkZ; z++) {
					if (this.chunks[x] && this.chunks[x][z]) {
						ret.push((this.chunks[x][z].sections[y] || emptySection).blocks);
					} else {
						ret.push(emptySection.blocks);
					}
				}
			}
		}
		return ret;
	};

	var updateBlock = function (x, y, z, lazy) {
		if (this.chunks[x >> 4] && this.chunks[x >> 4][z >> 4] && this.chunks[x >> 4][z >> 4].buffer) {
			this.chunks[x >> 4][z >> 4].updateBlock(x & 15, y, z & 15, this, lazy);
		}
	};

	var getWorldBlock = function (x, y, z) {
		if (!this.chunks[x >> 4] || !this.chunks[x >> 4][z >> 4]) {
			return blockIds.air;
		}
		return this.chunks[x >> 4][z >> 4].getBlock(x & 15, y, z & 15);
	};

	var getLoadedBlock = function (x, y, z) {
		var X = (x >> 4) + this.offsetX;
		var Z = (z >> 4) + this.offsetZ;
		if (y < 0 || y > maxHeight) {
			return blockIds.air;
		} else if (X < 0 || X >= this.lwidth || Z < 0 || Z >= this.lwidth) {
			return this.getWorldBlock(x, y, z);
		}
		return this.loaded[X * this.lwidth + Z].getBlock(x & 15, y, z & 15);
	};

	var setBlock = function (x, y, z, blockID, expl, lazy) {
		if (y < 1 && blockID != blockIds.bedrock) {
			return;
		}
		if (!this.chunks[x >> 4] || !this.chunks[x >> 4][z >> 4]) {
			return;
		}
		if (expl) {
			explode(x, y, z, 0, 0);
		}

		var chunk = this.chunks[x >> 4][z >> 4];

		if (blockID) {
			chunk.setBlock(x & 15, y, z & 15, blockID, false, !lazy);
		} else {
			chunk.deleteBlock(x & 15, y, z & 15, !lazy);
		}

		// Update the 6 adjacent blocks and 1 changed block
		this.updateBlock(x - 1, y, z, lazy);
		this.updateBlock(x + 1, y, z, lazy);
		this.updateBlock(x, y - 1, z, lazy);
		this.updateBlock(x, y + 1, z, lazy);
		this.updateBlock(x, y, z - 1, lazy);
		this.updateBlock(x, y, z + 1, lazy);
		this.updateBlock(x, y, z, lazy);

		//Update the 8 corners so shadows in adjacent chunks update correctly
		this.updateBlock(x - 1, y - 1, z - 1, lazy);
		this.updateBlock(x + 1, y - 1, z - 1, lazy);
		this.updateBlock(x - 1, y - 1, z + 1, lazy);
		this.updateBlock(x + 1, y - 1, z + 1, lazy);
		this.updateBlock(x - 1, y + 1, z - 1, lazy);
		this.updateBlock(x + 1, y + 1, z - 1, lazy);
		this.updateBlock(x - 1, y + 1, z + 1, lazy);
		this.updateBlock(x + 1, y + 1, z + 1, lazy);
	};

	var spawnBlock = function (x, y, z, blockID) {
		if (y < 1 && blockData[blockID].textures[0] != "bedrock") {
			return;
		}
		// Sets a block anywhere without causing block updates around it. Only to be used in world gen.
		var chunkX = x >> 4;
		var chunkZ = z >> 4;
		if (!this.chunks[chunkX]) {
			this.chunks[chunkX] = [];
		}
		var chunk = this.chunks[chunkX][chunkZ];
		if (!chunk) {
			chunk = newChunk(chunkX * 16, chunkZ * 16);
			this.chunks[chunkX][chunkZ] = chunk;
		}
		// Spawning a block after generation
		if (chunk.buffer) {
			this.setBlock(x, y, z, blockID, true);
		} else if (!chunk.getBlock(x & 15, y, z & 15)) {
			chunk.setBlock(x & 15, y, z & 15, blockID, false);
		}
	};

	var tick = function () {
		var tickStart = win.performance.now();
		var maxChunkX = (p.x >> 4) + renderDistance;
		var maxChunkZ = (p.z >> 4) + renderDistance;
		var chunk = maxChunkX + "," + maxChunkZ;
		if (chunk !== this.lastChunk) {
			this.lastChunk = chunk;
			this.loadChunks();
			this.chunkGenQueue.sort(sortChunks);
		}

		if (Key.leftMouse && p.lastBreak < Date.now() - 200) {
			if (gamemodes[gamemode].blockBreaking) {
				changeWorldBlock(0);
			}
		}
		if ((Key.rightMouse || Key.leftMouse && Key.control) && p.lastPlace < Date.now() - 200) {
			if (gamemodes[gamemode].blockPlacing) {
				newWorldBlock();
			}

		}

		do {
			var doneWork = false;
			if (this.meshQueue.length) {
				// If the player interacts with blocks, update all chunk meshes. Else, never update more than 1 per frame
				var len = this.meshQueue.length - 1;
				do {
					var chunk = this.meshQueue[len];
					if (chunk.lazy) {
						continue;
					}
					chunk.genMesh();
					this.meshQueue.splice(len, 1);
					doneWork = true;

				} while (len--);
				if (this.meshQueue.length && !doneWork) {
					this.meshQueue.pop().genMesh();
				}
				doneWork = true;
			}

			if (this.chunkGenQueue.length && !doneWork) {
				do {
					var chunk = this.chunkGenQueue[0];
					if (!chunk.generated) {
						this.genChunk(chunk);
					} else if (!chunk.populated && worldmodes[worldmode].populate) {
						chunk.populate();
					} else if (!chunk.populated && worldmodes[worldmode].populateNether) {
						chunk.populateNether();
					} else if (!chunk.populated && worldmodes[worldmode].name == "Moon") {
						chunk.populateMoon();
					} else if (!chunk.populated && worldmodes[worldmode].name == "Stone") {
						chunk.populateStone();
					} else if (!chunk.optimized) {
						chunk.optimize(this);
					} else if (!chunk.buffer) {
						chunk.genMesh();
					} else {
						this.chunkGenQueue.shift();
						if (this.chunkGenQueue.length) {
							continue;
						}
					}
					break;
				} while (this.chunkGenQueue.length);
				doneWork = !!this.chunkGenQueue.length;
			}

			if (this.optimizeQueue.length && !doneWork) {
				this.optimizeQueue.shift().optimize(this);
				doneWork = true;
			}
			if (!doneWork) {
				break;
			}
		} while (win.performance.now() - tickStart < 5);
	};

	var render = function () {
		// if (blockData[world.getBlock(Math.round(p.x), Math.round(p.y), Math.round(p.z))].name == "lava") {
		//   blockData[blockIds.lava].textures = ["transparent", "transparent", "transparent", "transparent", "transparent", "transparent"]
		// }
		// else {
		//   blockData[blockIds.lava].textures = ["lava", "lava", "lava", "lava", "lava", "lava"]
		// }
		// if (blockData[world.getBlock(Math.round(p.x), Math.round(p.y), Math.round(p.z))].name == "water") {
		//   blockData[blockIds.water].textures = ["transparent", "transparent", "transparent", "transparent", "transparent", "transparent"]
		// }
		// else {
		//   blockData[blockIds.water].textures = ["water", "water", "water", "water", "water", "water"]
		// }

		initModelView(p.x, p.y, p.z, p.rx, p.ry);

		p2.x = Math.round(p.x);
		p2.y = Math.round(p.y);
		p2.z = Math.round(p.z);

		renderedChunks = 0;
		if (fogEnabled) {
			var fogDist;
			var dist = renderDistance * 16;
			if (this.chunkGenQueue.length) {
				this.chunkGenQueue.sort(sortChunks);
				var chunk = this.chunkGenQueue[0];
				dist = Math.min(dist, chunkDist(chunk));
			}
			if (dist !== fogDist) {
				if (fogDist < dist - 0.1) {
					fogDist += (dist - fogDist) / 120;
				} else if (fogDist > dist + 0.1) {
					fogDist += (dist - fogDist) / 30;
				} else {
					fogDist = dist;
				}
			}
		}

		gl.uniform3f(glCache.locations.uPos, p.x, p.y, p.z);
		gl.uniform1f(glCache.locations.inSnow, blockData[world.getBlock(Math.round(p.x), Math.round(p.y), Math.round(p.z))].name == "powderedSnow");

		gl.uniform1f(glCache.locations.inWater, blockData[world.getBlock(Math.round(p.x), Math.round(p.y), Math.round(p.z))].name == "water");
		gl.uniform1f(glCache.locations.inLava, blockData[world.getBlock(Math.round(p.x), Math.round(p.y), Math.round(p.z))].name == "lava" || blockData[world.getBlock(Math.round(p.x), Math.round(p.y - 1), Math.round(p.z))].name == "lava");
		gl.uniform1f(glCache.locations.uDist, fogDist)
		gl.enableVertexAttribArray(glCache.locations.aShadow);
		gl.uniform1f(glCache.locations.uTime, skTemp || skyLight);

		var c = this.sortedChunks;
		var lx = p.direction.x;
		var ly = p.direction.y;
		var lz = p.direction.z;
		var nlx = lx < 0 ? 0 : 16;
		var nly = ly < 0;
		var nlz = lz < 0 ? 0 : 16;
		var x = p.x;
		var y = p.y;
		var z = p.z;
		var dx = 0,
			dy = 0,
			dz = 0;
		var chunk = null;
		for (var i = 0, l = c.length; i < l; i++) {
			chunk = c[i];
			dx = chunk.x - x + nlx;
			dy = (nly ? chunk.minY : chunk.maxY) - y;
			dz = chunk.z - z + nlz;
			if (dx * lx + dy * ly + dz * lz > 0) {
				chunk.render();
			}
		}

		if (hitBox.pos) {
			blockOutlines = true;
			blockFill = false;
			block2(hitBox.pos[0], hitBox.pos[1], hitBox.pos[2], 0);
			blockFill = true;
		}
		gl.flush();
	};

	var loadChunks = function () {
		var minChunkX = (p.x >> 4) - renderDistance;
		var maxChunkX = (p.x >> 4) + renderDistance;
		var minChunkZ = (p.z >> 4) - renderDistance;
		var maxChunkZ = (p.z >> 4) + renderDistance;

		this.offsetX = -minChunkX;
		this.offsetZ = -minChunkZ;
		this.lwidth = renderDistance * 2 + 1;

		if (this.loaded.length > this.lwidth * this.lwidth) {
			this.loaded.length = this.lwidth * this.lwidth;
		}

		var i = 0;
		for (var x = minChunkX; x <= maxChunkX; x++) {
			for (var z = minChunkZ; z <= maxChunkZ; z++) {
				var chunk;
				if (!this.chunks[x]) {
					this.chunks[x] = [];
				}
				if (!this.chunks[x][z]) {
					chunk = newChunk(x * 16, z * 16);
					this.chunkGenQueue.push(chunk);
					this.chunks[x][z] = chunk;
				}
				chunk = this.chunks[x][z];
				if (!chunk.generated && !this.chunkGenQueue.includes(chunk)) {
					this.chunkGenQueue.push(chunk);
				}
				this.loaded[i++] = chunk;
			}
		}
		this.sortedChunks = this.loaded.slice();
		this.sortedChunks.sort(sortChunks);
	};

	function getSaveString() {
		var edited = [];
		for (var x in this.chunks) {
			for (var z in this.chunks[x]) {
				var chunk = this.chunks[x][z];
				if (chunk.edited) {
					for (var y = 0; y < chunk.sections.length; y++) {
						if (chunk.sections[y].edited) {
							edited.push([chunk.sections[y], chunk.cleanSections[y]]);
						}
					}
				}
			}
		}

		var str = worldSeed.toString(36) + ";" +
			Math.round(p.x).toString(36) + "," + Math.round(p.y).toString(36) + "," + Math.round(p.z).toString(36) + "," +
			(p.rx * 100 | 0).toString(36) + "," + (p.ry * 100 | 0).toString(36) + ";" +
			edited.length.toString(36) + ";";
		for (var i = 0; i < edited.length; i++) {
			var sc = edited[i][0];
			str += (sc.x / 16).toString(36) + ",";
			str += (sc.y / 16).toString(36) + ",";
			str += (sc.z / 16).toString(36) + ",";
		}
		str = str.substr(0, str.length - 1) + ";";

		for (var i = 0; i < edited.length; i++) {
			var real = edited[i][0];
			var blocks = real.blocks;
			var original = edited[i][1];
			for (var j = 0; j < original.length; j++) {
				if ((blocks[j] & 0xff) !== (original[j] & 0xff)) {
					str += (j << 8 | blocks[j] & 0xff).toString(36) + ",";
				}
			}
			str = str.substr(0, str.length - 1) + ";";
		}
		str = str.substr(0, str.length - 1);
		return gamemode + str;
	}

	function loadSave(str) {
		gamemode = parseInt(str[0]);

		if (gamemodes[gamemode].hotbar !== false && typeof (gamemodes[gamemode].hotbar[0]) == "string") {
			for (var i = 0; i < 9; i++) {
				if (i < gamemodes[gamemode].hotbar.length) {
					gamemodes[gamemode].hotbar[i] = blockIds[gamemodes[gamemode].hotbar[i]];
				} else {
					gamemodes[gamemode].hotbar[i] = 0;
				}
			}
		}
		inventory.hotbar = gamemodes[gamemode].hotbar === true ? [1, 2, 3, 4, 5, 6, 7, 8, 9] : gamemodes[gamemode].hotbar;

		genmode = [gamemode, worldmode];
		p.speed = 0.075;
		p.gravityStrength = -0.032;
		p.jumpSpeed = 0.3;
		str = str.slice(1, str.length);
		var data = str.split(";");
		worldSeed = parseInt(data.shift(), 36);
		seedHash(worldSeed);
		noiseSeed(worldSeed);
		var playerData = data.shift().split(",");
		p.x = parseInt(playerData[0], 36);
		p.y = parseInt(playerData[1], 36);
		p.z = parseInt(playerData[2], 36);
		p.rx = parseInt(playerData[3], 36) / 100;
		p.ry = parseInt(playerData[4], 36) / 100;
		var editCount = parseInt(data.shift(), 36);

		this.loadFrom = [];

		var coords = data.shift().split(",").map(function (n) {
			return parseInt(n, 36);
		});
		for (var j = 0; j < coords.length; j += 3) {
			this.loadFrom.push({
				x: coords[j],
				y: coords[j + 1],
				z: coords[j + 2],
				blocks: [],
			});
		}

		for (var i = 0; data.length > 0; i++) {
			var blocks = data.shift().split(",");
			for (var j = 0; j < blocks.length; j++) {
				var block = parseInt(blocks[j], 36);
				var index = block >> 8;
				var id = block & 0xff;
				this.loadFrom[i].blocks[index] = id;
			}
		}
	}

	function World() {
		var loaded = [];
		var chunks = [];
		var queue = [];
		var lwidth = renderDistance * 2 + 1;
		var cx = renderDistance - (p.x >> 4);
		var cz = renderDistance - (p.z >> 4);
		var i = 0;
		for (var x = 0; x < lwidth; x++) {
			chunks[x - cx] = [];
			for (var z = 0; z < lwidth; z++) {
				var chunk = newChunk((x - cx) * 16, (z - cz) * 16);
				loaded[i++] = chunk;
				chunks[x - cx][z - cz] = chunk;
				queue.push(chunk);
			}
		}
		queue.sort(sortChunks);
		var sorted = queue.slice();
		return {
			chunks: chunks,
			loaded: loaded,
			sortedChunks: sorted,
			offsetX: cx,
			offsetZ: cz,
			lwidth: lwidth,
			chunkGenQueue: queue,
			optimizeQueue: [],
			meshQueue: [],
			loadFrom: [],
			lastChunk: cx + "," + cz,
			genChunk: genChunk,
			getAdjacentSubchunks: getAdjacentSubchunks,
			updateBlock: updateBlock,
			getBlock: getLoadedBlock,
			getWorldBlock: getWorldBlock,
			setBlock: setBlock,
			spawnBlock: spawnBlock,
			tick: tick,
			render: render,
			loadChunks: loadChunks,
			getSaveString: getSaveString,
			loadSave: loadSave,
		};
	}

	var defineWorld = function () {
		var tickStart = win.performance.now();
		world.tick();
		analytics.totalTickTime += win.performance.now() - tickStart;
		var renderStart = win.performance.now();
		world.render();
		analytics.totalRenderTime += win.performance.now() - renderStart;
	};

	var controls = function () {
		move.x = 0;
		move.z = 0;
		var dt = (win.performance.now() - p.lastUpdate) / 33;
		dt = dt > 2 ? 2 : dt;
		if (Key.w) {
			move.z += p.speed;
		}
		if (Key.s) {
			move.z -= p.speed;
		}
		if (Key.a) {
			move.x += p.speed;
		}
		if (Key.d) {
			move.x -= p.speed;
		}
		if (p.flying) {
			if (Key[" "]) {
				p.velocity.y += 0.06 * dt;
			}
			if (Key.shift) {
				p.velocity.y -= 0.06 * dt;
			}
		}
    else if (inLiquid(p.x, p.y, p.z)) {
      if (Key[" "]) {
        p.velocity.y = 0.25
			}
    }
		else if (inSnow(p.x, p.y, p.z)) {
      if (Key[" "]) {
        p.velocity.y = 0.05
			}
    }
    else if (canClimb(p.x, p.y, p.z)) {
      if (Key[" "]) {
        p.velocity.y = 0.15
			}
      if (Key.shift) {
				p.velocity.y -= 0.06 * dt;
			}
    }
		if (Key.arrowleft) {
			p.ry -= 0.1 * dt;
		}
		if (Key.arrowright) {
			p.ry += 0.1 * dt;
		}
		if (Key.arrowup) {
			p.rx += 0.1 * dt;
		}
		if (Key.arrowdown) {
			p.rx -= 0.1 * dt;
		}
		if (Key.q) {
			p.sprinting = true;
		}
		if (p.sprinting) {
			move.x *= p.sprintSpeed;
			move.z *= p.sprintSpeed;
		}
		if (p.flying) {
			move.x *= p.flySpeed;
			move.z *= p.flySpeed;
		}
		if (!move.x && !move.z) {
			p.sprinting = false;
		} else if (Math.abs(move.x) > 0 && Math.abs(move.z) > 0) {
			move.x *= move.ang;
			move.z *= move.ang;
		}
		// Update the velocity
		var co = Math.cos(p.ry);
		var si = Math.sin(p.ry);
		var friction = p.onGround ? 1 : 0.3;
		p.velocity.x += (co * move.x - si * move.z) * friction * dt;
		p.velocity.z += (si * move.x + co * move.z) * friction * dt;

		while (p.ry > Math.PI * 2) {
			p.ry -= Math.PI * 2;
		}
		while (p.ry < 0) {
			p.ry += Math.PI * 2;
		}
		if (p.rx > Math.PI / 2) {
			p.rx = Math.PI / 2;
		}
		if (p.rx < -Math.PI / 2) {
			p.rx = -Math.PI / 2;
		}

		p.direction.set(-si * Math.cos(p.rx), Math.sin(p.rx), co * Math.cos(p.rx));
		computeFrustum();
	};

	// Reconfigure scrolling
	(function () {
		var preventDefault = function (e) {
			e.preventDefault();
			if (e.deltaY > 0) {
				inventory.hotbarSlot++;
			} else if (e.deltaY < 0) {
				inventory.hotbarSlot--;
			}
			if (inventory.hotbarSlot > 8) {
				inventory.hotbarSlot = 0;
			} else if (inventory.hotbarSlot < 0) {
				inventory.hotbarSlot = 8;
			}

			updateHUD = true;
			holding = inventory.hotbar[inventory.hotbarSlot];
		};
		var keys = {
			32: 1,
			37: 1,
			38: 1,
			39: 1,
			40: 1
		};

		function preventDefaultForScrollKeys(e) {
			if (keys[e.keyCode]) {
				e.preventDefault();
				return false;
			}
		}

		var supportsPassive = false;
		try {
			window.addEventListener("test", null, Object.defineProperty({}, 'passive', {
				get: function () {
					supportsPassive = true;
				},
			}));
		} catch (e) {}

		var wheelOpt = supportsPassive ? {
			passive: false
		} : false;
		var wheelEvent = 'onwheel' in document.createElement('div') ? 'wheel' : 'mousewheel';

		function disableScroll() {
			window.addEventListener('DOMMouseScroll', preventDefault, false); // older FF
			window.addEventListener(wheelEvent, preventDefault, wheelOpt); // modern desktop
			window.addEventListener('touchmove', preventDefault, wheelOpt); // mobile
			window.addEventListener('keydown', preventDefaultForScrollKeys, false);
		}

		disableScroll();
	})();

	var buttons = [];

	var button = function (x, y, w, h) {
		return (mouseX > x && mouseY > y && mouseX < x + w && mouseY < y + h);
	};

	var addButton = function (x, y, w, h, text, callback, screen) {
		buttons.push({
			x: x,
			y: y,
			w: w,
			h: h,
			text: text,
			callback: callback,
			screen: screen,
		});
	};

	var clickButton = function (button) {
		if (screen === button.screen && mouseX > button.x && mouseY > button.y && mouseX < button.x + button.w && mouseY < button.y + button.h) {
			button.callback();
		}
	};

	var drawButton = function (button) {
		if (screen === button.screen) {
			if (mouseX > button.x && mouseY > button.y && mouseX < button.x + button.w && mouseY < button.y + button.h) {
				cursor(HAND);
			}
			strokeWeight(4);
			ctx.strokeStyle = "white";
			ctx.fillStyle = "rgb(112, 112, 112)";
			ctx.rect(button.x, button.y, button.w, button.h);
			ctx.stroke();
			ctx.fill();
			ctx.beginPath();
			ctx.fillStyle = "black";
			textSize(24);
			ctx.font = '15px \'Press Start 2P\'';
			ctx.textAlign = 'center';
			fill(255, 255, 255);
			ctx.fillText(button.text, button.x + button.w / 2, button.y + button.h / 2 + 10);
		}
	};

	var initWorld, loadString = "";

	addButton(width / 2 - 190, height / 2, 380, 45, "Play", function () {
		screen = "play menu";
	}, "main menu");

	addButton(width / 2 - 190, height / 2 + 55, 185, 36, "Controls", function () {
		screen = "controls";
	}, "main menu");

	addButton(width / 2 + 5, height / 2 + 55, 185, 36, "Update log", function () {
		window.open("/updates.txt");
	}, "main menu");

	addButton(width / 2 - 190, height / 2 - 50, 380, 35, "Create World", function () {
		if (gamemodes[gamemode].name == "Block Hunt" && (worldmodes[worldmode].name == "Superflat" || worldmodes[worldmode].name == "Nether" || worldmodes[worldmode].name == "Stone" || worldmodes[worldmode].name == "Moon")) {
			alert("You can't do this combo");
			return;
		}
		// try {
		//   if (savebox.value.length) {
		//     loadString = savebox.value;
		//     world.loadSave(loadString);
		//     savebox.value = "";
		//   }
		// } catch(err) { alert("Error with load") }
		if (!(genmode[0] == gamemode && genmode[1] == worldmode)) {
			genmode = [gamemode, worldmode];
			releasePointer();
			if (parseInt(insertedSeed)) {
				initWorld(parseInt(insertedSeed));
			} else if (insertedSeed.length > 0) {
				console.log(parseInt(insertedSeed.toLowerCase(), 36));
				initWorld(parseInt(insertedSeed.toLowerCase(), 36));
			} else {
				initWorld();
			}
		}
		if (gamemodes[gamemode].name == "Block Hunt") {
			newRiddle();
		} else {
			generator = origGen;
		}
		if (worldmodes[worldmode].name != "Nether" && worldmodes[worldmode].name != "Stone" && worldmodes[worldmode].name != "Moon") {
			sky = [169 / 255, 205 / 255, 255 / 255]
			skyLight = 16;
		}
		if (worldmodes[worldmode].name == "Moon") {
			p.gravityStrength = -0.012
		} else {
			p.gravityStrength = -0.032
		}
		p.speed = 0.075;
		p.jumpSpeed = 0.3;
		play();
	}, "play menu");

	addButton(width / 2 - 190, height / 2 - 5, 185, 35, gamemodes[gamemode].name, function () {
		for (var button of buttons) {
			if (button.text == gamemodes[gamemode].name) {
				gamemode = (gamemode + 1) % gamemodes.length;
				button.text = gamemodes[gamemode].name;
			}
		}
	}, "play menu");

	addButton(width / 2 + 5, height / 2 - 5, 185, 35, worldmodes[worldmode].name, function () {
		for (var button of buttons) {
			if (button.text == worldmodes[worldmode].name) {
				worldmode = (worldmode + 1) % worldmodes.length;
				button.text = worldmodes[worldmode].name;
			}
		}
	}, "play menu");

	addButton(width / 2 - 190, height / 2 + 40, 380, 35, "Seed", function () {
		do {
			var n = prompt("Current seed: " + (insertedSeed.length ? insertedSeed : worldSeed.toString(36)) + "\nEnter a new seed:");
			if (n === null || n.length == 0) {
				break;
			}
			insertedSeed = n;
			if (insertedSeed.indexOf(" ") != -1) {
				insertedSeed = "";
			} else {
				alert("Seed is now '" + insertedSeed + "'");
			}
		} while (insertedSeed == "");
	}, "play menu");

	addButton(width / 2 - 190, height / 2 + 85, 380, 35, "Back", function () {
		screen = "main menu";
	}, "play menu");

	addButton(width / 2 - 150, height / 2 - 50, 300, 40, "Resume", function () {
		play();
	}, "pause");

	addButton(width / 2 - 150, height / 2, 300, 40, "Options", function () {
		screen = "pause options";
	}, "pause");

	// addButton(width / 2 - 150, 265, 300, 50, "Toggle Save Code", function() {
	//   if (gamemodes[gamemode].name == "Superflat") {
	//     alert("Saving for superflat worlds not supported yet :(");
	//     return;
	//   }
	//   else if (gamemodes[gamemode].name == "Block Hunt") {
	//     alert("You can't save a block hunt");
	//     return;
	//   }
	//   if (savebox.hidden) {
	//     savebox.hidden = false;
	//     savebox.value = world.getSaveString();
	//   }
	//   else {
	//     savebox.hidden = true;
	//   }
	// }, "pause");

	addButton(width / 2 - 150, height / 2 + 50, 300, 40, "Main Menu", function () {
		screen = "main menu";
	}, "pause");

	addButton(width / 2 - 150, 335, 300, 50, "Back", function () {
		screen = "pause";
	}, "pause options");

	addButton(width / 2 - 150, 380, 300, 50, "Back", function () {
		screen = "main menu";
	}, "controls");

	function initTextures() {
		var textureSize = 256;
		var texturePixels = new Uint8Array(textureSize * textureSize * 4);
		textureMap = {};
		textureCoords = [];

		setPixel = function (textureNum, x, y, r, g, b, a) {
			var texX = textureNum & 15;
			var texY = textureNum >> 4;
			var offset = (texY * 16 + y) * 1024 + texX * 64 + x * 4;
			texturePixels[offset] = r;
			texturePixels[offset + 1] = g;
			texturePixels[offset + 2] = b;
			texturePixels[offset + 3] = a !== undefined ? a : 255;
		};
		getPixels = function (str) {
			try {
				if (str[0] == "[") {
					fff
				}
				var colors = [];
				var pixels = [];
				var dCount = 0;
				for (; str[4 + dCount] === "0"; dCount++) {}
				var ccount = parseInt(str.substr(4 + dCount, dCount + 1), 36);
				for (var i = 0; i < ccount; i++) {
					var num = parseInt(str.substr(5 + 2 * dCount + i * 7, 7), 36);
					colors.push([num >>> 24 & 255, num >>> 16 & 255, num >>> 8 & 255, num & 255]);
				}
				for (var i = 5 + 2 * dCount + ccount * 7; i < str.length; i++) {
					var num = parseInt(str[i], 36);
					pixels.push(colors[num][0], colors[num][1], colors[num][2], colors[num][3]);
				}
				return pixels;
			} catch (err) {
				return JSON.parse(str);
			}
		};

		(function () {
			for (var i = 0; i < 256; i++) {
				var texX = i & 15;
				var texY = i >> 4;
				var offsetX = texX * 0.0625;
				var offsetY = texY * 0.0625;
				textureCoords.push(new Float32Array([0.0625 + offsetX, offsetY, offsetX, offsetY, offsetX, 0.0625 + offsetY, 0.0625 + offsetX, 0.0625 + offsetY]));
			}

			var n = 0;
			for (var i in textures) {
				if (typeof textures[i] === "function") {
					textures[i](n);
				} else if (typeof textures[i] === "string") {
					var pix = getPixels(textures[i]);
					for (var j = 0; j < pix.length; j += 4) {
						setPixel(n, j >> 2 & 15, j >> 6, pix[j], pix[j + 1], pix[j + 2], pix[j + 3]);
					}
				}
				textureMap[i] = n;
				n++;
			}

			for (var i = 0; i < 8; i += 2) {
				textureCoords[textureMap.hitbox][i] = textureCoords[textureMap.hitbox][2] + 0.01;
				textureCoords[textureMap.hitbox][i + 1] = textureCoords[textureMap.hitbox][1] + 0.01;
			}
		})();

		tex = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, tex);
		gl.activeTexture(gl.TEXTURE0);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize, textureSize, 0, gl.RGBA, gl.UNSIGNED_BYTE, texturePixels);
		gl.generateMipmap(gl.TEXTURE_2D);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		gl.uniform1i(glCache.locations.uSampler, 0);

		genIcons();
	}

	function drawIcon(x, y, id) {
		x = x / (3 * height) - 0.1666 * width / height;
		y = y / (3 * height) - 0.1666;
		initModelView(x, y, 0, 0, 0);

		var buffer = blockIcons[id];
		gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
		gl.vertexAttribPointer(glCache.locations.aVertex, 3, gl.FLOAT, false, 24, 0);
		gl.vertexAttribPointer(glCache.locations.aTexture, 2, gl.FLOAT, false, 24, 12);
		gl.vertexAttribPointer(glCache.locations.aShadow, 1, gl.FLOAT, false, 24, 20);
		gl.disableVertexAttribArray(glCache.locations.aSkylight)
		gl.vertexAttrib1f(glCache.locations.aSkylight, 1.0)
		gl.uniform1f(glCache.locations.uDist, 10000000000.0)
		gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_INT, 0);
	}

	function hotbar() {
		var before = currentFov;
		FOV(90);

		for (var i = 0; i < inventory.hotbar.length; i++) {
			if (inventory.hotbar[i]) {
				var x = width / 2 - inventory.hotbar.length / 2 * inventory.size + (i + 0.5) * inventory.size + 25;
				var y = height - inventory.size;
				drawIcon(x, y, inventory.hotbar[i]);
			}
		}
		FOV(before);
	}

	function hud() {
		var s = inventory.size;
		var x = width / 2 + 0.5;
		var y = height / 2 + 0.5;

		ctx.lineWidth = 1;
		ctx.strokeStyle = "white";
		ctx.beginPath();

		ctx.moveTo(x - 10, y);
		ctx.lineTo(x + 10, y);
		ctx.moveTo(x, y - 10);
		ctx.lineTo(x, y + 10);
		ctx.stroke();

		// Hotbar
		x = width / 2 - 9 / 2 * s + 0.5 + 25;
		y = height - s * 1.5 + 0.5;

		ctx.strokeStyle = "black";
		ctx.lineWidth = 2;
		ctx.beginPath();
		ctx.moveTo(x, y);
		ctx.lineTo(x + s * 9, y);
		ctx.moveTo(x, y + s);
		ctx.lineTo(x + s * 9, y + s);
		for (var i = 0; i <= 9; i++) {
			ctx.moveTo(x + i * s, y);
			ctx.lineTo(x + i * s, y + s);
		}
		ctx.stroke();

		ctx.strokeStyle = "white";
		ctx.lineWidth = 2;
		ctx.beginPath();

		ctx.strokeRect(width / 2 - 9 / 2 * s + inventory.hotbarSlot * s + 25, height - s * 1.5, s, s);

		var effcts = (function () {
			var effects = [];
			if (p.speed == 0.1) {
				effects.push("Speed 1");
			}
			if (p.speed == 0.14) {
				effects.push("Speed 2");
			}
			if (p.speed == 0.18) {
				effects.push("Speed 3");
			}
			if (p.jumpSpeed == 0.4) {
				effects.push("Jump Boost 1");
			}
			if (p.jumpSpeed == 0.5) {
				effects.push("Jump Boost 2");
			}
			return effects;
		})();


		var str = "FPS: " + analytics.fps + "\nBiome: " + getBiome(p.x, p.z, noise((p.x) * generator.biomeSmooth, (p.z) * generator.biomeSmooth)) + "\nSub-biome: " + (getSubBiome(p.x, p.z, noise((p.x) * generator.biomeSmooth, (p.z) * generator.biomeSmooth))||"none")  +"\nSeed: " + (parseInt(insertedSeed) ? insertedSeed : worldSeed.toString(36)) + "\nMode: " + worldmodes[worldmode].name + " " + gamemodes[gamemode].name + "\n" +
			"Rendered Chunks: " + renderedChunks.toLocaleString() + "/" + world.loaded.length + "\n" +
			"Generated Chunks: " + generatedChunks.toLocaleString() + "\n" +
			"Effects: " + (!effcts.length ? "None" : effcts.join(", "));

		textSize(10);
		ctx.textAlign = 'right';
		fastText(p2.x + "," + p2.y + "," + p2.z, width - 10, 15, 0, "#dce6e5");
		ctx.textAlign = 'left';
		textSize(8);
		fastText(str, 5, height - 88, 12, "#dce6e5");
		textSize(10);
		if (gamemodes[gamemode].name == "Block Hunt") {
			fastText("Hint: " + blockHunt.riddles[blockHunt.chosen].riddle, 5, 18, 12);
			fastText("Score: " + blockHunt.score, 5, 36, 12);
			textSize(14);
			fastText(blockHunt.message, 5, 70, 12);
			textSize(10);
		} else if (gamemodes[gamemode].name == "Ore Hunt") {
			fastText("Score: " + oreHunt.score, 5, 18, 12);
			fastText(oreHunt.message, 5, 42, 12);
			textSize(10);
		}
		if (Key.middleMouse || toggleLookingAt) {
			var blockId;
			try {
				blockId = world.getBlock(hitBox.pos[0], hitBox.pos[1], hitBox.pos[2]);
			} catch (err) {
				return;
			}
			var ts = blockData[blockId].name.capitalize();
			var old = ts;
			setTimeout(function () {
				if (ts === old) {
					ts = "";
				}
			}, 1);
			textSize(10);
			fastText(ts, 5, (gamemodes[gamemode].name == "Block Hunt" ? 56 : 18), 12);
		}
	}

	var ww;

	function drawInv() {
		var s = inventory.size;
		var s2 = s / 2;
		var before = currentFov;
		var perRow = 16;

		gl.clearColor(0.5, 0.5, 0.5, 0.0);
		gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
		ctx.fillStyle = "rgb(137, 137, 145)";
		ctx.fillRect(0, 0, canvas.width, canvas.height);
		FOV(90);

		// Draw the grid
		ctx.lineWidth = 1;
		ctx.strokeStyle = "black";
		ctx.beginPath();
		ww = canvas.width / 2 - (perRow / 2) * s;
		for (y = 0; y < 13; y++) {
			ctx.moveTo(ww - s2, 50.5 - s2 + y * s);
			ctx.lineTo(ww - s2 + s * perRow, 50.5 - s2 + y * s);
		}
		y--;
		for (x = 0; x < perRow + 1; x++) {
			ctx.moveTo(ww - s2 + s * x, 50.5 - s2);
			ctx.lineTo(ww - s2 + s * x, 50.5 - s2 + y * s);
		}

		// Hotbar
		x = width / 2 - inventory.hotbar.length / 2 * s + 0.5 + 25;
		y = height - s * 1.5 + 0.5;
		ctx.moveTo(x, y);
		ctx.lineTo(x + s * 9, y);
		ctx.moveTo(x, y + s);
		ctx.lineTo(x + s * 9, y + s);
		for (var i = 0; i <= inventory.hotbar.length; i++) {
			ctx.moveTo(x + i * s, y);
			ctx.lineTo(x + i * s, y + s);
		}
		ctx.stroke();

		var overHot = (mouseX - x) / s | 0;
		if (mouseX < x + 9 * s && mouseX > x && mouseY > y && mouseY < y + s) {
			x += s * overHot;
			ctx.lineWidth = 2;
			ctx.strokeStyle = "white";
			ctx.beginPath();
			ctx.strokeRect(x, y, s, s);
		}

		// Box highlight in inventory
		var overInv = Math.round((mouseY - 50) / s) * perRow + Math.round((mouseX - ww - 0.5) / s);
		if (overInv >= 0 && overInv < blockData.length - 1 && mouseX < ww - 0.5 - s2 + perRow * s && mouseX > ww - 0.5 - s2) {
			x = overInv % perRow * s + ww - 0.5 - s2;
			y = (overInv / perRow | 0) * s + 50 - s2;
			ctx.lineWidth = 2;
			ctx.strokeStyle = "white";
			ctx.beginPath();
			ctx.strokeRect(x, y, s, s);
		}

		if (inventory.holding) {
			drawIcon(mouseX, mouseY, inventory.holding);
		}
		for (var i = 1; i < blockData.length; i++) {
			x = (i - 1) % perRow * s + ww - 0.5;
			y = ((i - 1) / perRow | 0) * s + 50;
			drawIcon(x, y, i);
		}

		hotbar();
		ctx.drawImage(gl.canvas, 0, 0);

		FOV(before);
	}

	function clickInv() {
		var s = inventory.size;
		var s2 = s / 2;
		var perRow = 16;
		var over = Math.round((mouseY - 50) / s) * perRow + Math.round((mouseX - ww - 0.5) / s);
		var x = width / 2 - 9 / 2 * s + 25;
		var y = height - s * 1.5;
		var overHot = (mouseX - x) / s | 0;
		if (mouseX < x + 9 * s && mouseX > x && mouseY > y && mouseY < y + s) {
			var temp = inventory.hotbar[overHot];
			inventory.hotbar[overHot] = inventory.holding;
			inventory.holding = temp;
		} else if (over >= 0 && over < blockData.length - 1 && mouseX < ww - 0.5 - s2 + perRow * s && mouseX > ww - 0.5 - s2) {
			inventory.holding = over + 1;
		} else {
			inventory.holding = 0;
		}
	}

	var unpauseDelay = 0;

	function mmoved(e) {
		p.rx -= e.movementY / 300;
		p.ry += e.movementX / 300;

		while (p.ry > Math.PI * 2) {
			p.ry -= Math.PI * 2;
		}
		while (p.ry < 0) {
			p.ry += Math.PI * 2;
		}
		if (p.rx > Math.PI / 2) {
			p.rx = Math.PI / 2;
		}
		if (p.rx < -Math.PI / 2) {
			p.rx = -Math.PI / 2;
		}
	}

	function trackMouse(e) {
		mouseX = e.x;
		mouseY = e.y;
	}

	document.onmousemove = trackMouse;
	document.onpointerlockchange = function () {
		if (doc.pointerLockElement === canvas) {
			doc.onmousemove = mmoved;
		} else {
			doc.onmousemove = trackMouse;
			if (screen === "play" && !freezeFrame) {
				screen = "pause";
				unpauseDelay = Date.now() + 1000;
			}
		}
		for (var key in Key) {
			Key[key] = false;
		}
	};

	canvas.onmousedown = function (e) {
		mouseX = e.x;
		mouseY = e.y;
		switch (e.button) {
		case 0:
			Key.leftMouse = true;
			break;
		case 1:
			Key.middleMouse = true;
			// inventory.hotbar[inventory.hotbarSlot] = world.getBlock(hitBox.pos[0], hitBox.pos[1], hitBox.pos[2]);
			break;
		case 2:
			Key.rightMouse = true;
			break;
		default:
			break;
		}
		if (screen === "play") {
			if (doc.pointerLockElement !== canvas) {
				getPointer();
				p.lastBreak = Date.now();
			} else {
				place = false;
				if (e.button === 0) {
					if (Key.control) {
						place = true;
					} else {
						if (gamemodes[gamemode].blockBreaking) {
							changeWorldBlock(0);
						}
					}
				}
				holding = inventory.hotbar[inventory.hotbarSlot];
				if (e.button === 2 && holding) {
					place = true;
				}
				if (place) {
					if (gamemodes[gamemode].blockPlacing) {
						newWorldBlock();
					}
				}
			}
		} else if (screen === "inventory") {
			clickInv();
		} else if (screen === "pause options") {
			if (button(width / 2 - 200, 125, 50, 50)) {
				if (renderDistance > 1) {
					renderDistance--;
				}
			}
			if (button(width / 2 + 170, 125, 50, 50)) {
				if (renderDistance < 24) {
					renderDistance++;
				}
			}
			if (button(width / 2 - 150, 195, 300, 50)) {
				fogEnabled = !fogEnabled;
			}
			if (button(width / 2 - 150, 260, 300, 50)) {
				dayNightEnabled = !dayNightEnabled;
				lightDay();
			}
		}
		var currentScreen = screen;
		for (var i = 0; i < buttons.length; i++) {
			if (buttons[i].screen === currentScreen) {
				clickButton(buttons[i]);
			}
		}
	};

	canvas.onmouseup = function (e) {
		switch (e.button) {
		case 0:
			Key.leftMouse = false;
			break;
		case 1:
			Key.middleMouse = false;
			break;
		case 2:
			Key.rightMouse = false;
			break;
		default:
			break;
		}
	};

	document.onkeydown = function (e) {
		if (e.repeat) {
			return;
		}
		var k = e.key.toLowerCase();
		Key[k] = true;
		if (k === "delete") {
			initWorld();
			releasePointer();
		}


		if (screen === "play") {
			if (k === "p") {
				releasePointer();
				screen = "pause";
			}

			if (k === " ") {
				if (Date.now() < p.lastJump + 400 && gamemodes[gamemode].flight) {
					player.velocity.y = 0;
					p.flying ^= true;
				} else {
					p.lastJump = Date.now();
				}
			}

			if (k === "z") {
				FOV(10);
			}

			if (k === "e" && gamemodes[gamemode].inventory) {
				screen = "inventory";
				releasePointer();
			}

			if (k === "f") {
				releasePointer();
				freezeFrame = true;
			}

			if (k === "x") {
				toggleLookingAt = true;
			}

			if (k === "r" && gamemodes[gamemode].name == "Block Hunt") {
				newRiddle();
			}

			if (Number(k)) {
				inventory.hotbarSlot = Number(k) - 1;
				holding = inventory.hotbar[inventory.hotbarSlot];
				updateHUD = true;
			}
		} else if (screen === "pause") {
			if (k === "p") {
				play();
			}
		} else if (screen === "inventory") {
			if (k === "e") {
				play();
			}
		}
	};

	document.onkeyup = function (e) {
		var k = e.key.toLowerCase();
		Key[k] = false;
		if (k === "escape" && (screen.includes("pause") || screen === "inventory") && Date.now() > unpauseDelay) {
			play();
		}
		if (screen === "play") {
			if (k === "z") {
				FOV(fov);
			}
			if (k === "x") {
				toggleLookingAt = false;
			}
		}
	};

	canvas.onblur = function () {
		for (var key in Key) {
			Key[key] = false;
		}
	};

	canvas.oncontextmenu = function (e) {
		e.preventDefault();
	}

	function initWorld(seed) {
		if (gamemodes[gamemode].hotbar !== false && typeof (gamemodes[gamemode].hotbar[0]) == "string") {
			for (var i = 0; i < 9; i++) {
				if (i < gamemodes[gamemode].hotbar.length) {
					gamemodes[gamemode].hotbar[i] = blockIds[gamemodes[gamemode].hotbar[i]];
				} else {
					gamemodes[gamemode].hotbar[i] = 0;
				}
			}
		}
		inventory.hotbar = gamemodes[gamemode].hotbar === true ? [1, 2, 3, 4, 5, 6, 7, 8, 9] : gamemodes[gamemode].hotbar;

		worldSeed = seed || Math.random() * 2000000000 | 0;

		seedHash(worldSeed);
		noiseSeed(worldSeed);
		renderDistance = 8;
		fogEnabled = gamemodes[gamemode].fog;
		dayNightEnabled = gamemodes[gamemode].dayNight;
		generatedChunks = 0;

		screen = "main menu";

		p = {
			speed: 0.075,
			velocity: new PVector(0, 0, 0),
			direction: new PVector(0, 0, 0),
			sprintSpeed: 1.8,
			flySpeed: 2.5,
			x: 8,
			y: (worldmodes[worldmode].ySpawn ? worldmodes[worldmode].ySpawn : Math.round(noise(8 * generator.smooth, 8 * generator.smooth) * generator.height) + 2 + generator.extra),
			z: 8,
			w: 3 / 8,
			bottomH: 1.62,
			topH: 0.18,
			rx: random(-0.5),
			ry: random(7),
			onGround: false,
			jumpSpeed: 0.3,
			sprinting: false,
			maxYVelocity: 1.5,
			gravityStrength: -0.032,
			lastUpdate: win.performance.now(),
			lastBreak: Date.now(),
			lastPlace: Date.now(),
			lastJump: Date.now(),
			flying: false,
			frustum: [],
			nut: function() {
				try {
					maxR = euclideanDistance(hitBox.pos[0], p.x, hitBox.pos[1], p.y, hitBox.pos[2], p.z)
					world.spawnBlock(Math.floor(hitBox.pos[0]), Math.floor(hitBox.pos[1]), Math.floor(hitBox.pos[2]), blockIds.powderedSnow)

				} catch (err) {
					return;
				}
			}
		};

		for (var i = 0; i < 4; i++) {
			p.frustum[i] = new Plane();
		}
		world = World();
		win.world = world;

		win.player = p;
		win.p2 = p2;

		if (!win.gl) {
			var canv = document.createElement('canvas');
			canv.width = ctx.canvas.width;
			canv.height = ctx.canvas.height;
			canv.style.position = "absolute";
			canv.style.zIndex = -1;
			canv.style.top = "0px";
			canv.style.left = "0px";
			gl = canv.getContext("webgl", {
				preserveDrawingBuffer: true,
				antialias: false,
				premultipliedAlpha: false
			});
			var ext = gl.getExtension("OES_element_index_uint");
			if (!ext) {
				alert("Browser unsupported")
			}
			gl.viewport(0, 0, canv.width, canv.height);
			gl.enable(gl.DEPTH_TEST);
			gl.enable(gl.BLEND);
			gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
			win.gl = gl;
		} else {
			gl = win.gl;
		}

		if (!document.body.contains(gl.canvas)) {
			document.body.append(gl.canvas);
		}

		modelView = new Float32Array(16);
		glCache = {
			attributes: {},
			locations: {}
		};
		programObject3D = createProgramObject(gl, vertexShaderSrc3D, fragmentShaderSrc3D);
		gl.useProgram(programObject3D);
		glCache.locations.uEdge = gl.getUniformLocation(programObject3D, "uEdge");
		glCache.locations.uSampler = gl.getUniformLocation(programObject3D, "uSampler");
		glCache.locations.aShadow = gl.getAttribLocation(programObject3D, "aShadow");
		glCache.locations.aSkylight = gl.getAttribLocation(programObject3D, "aSkylight");
		glCache.locations.uTime = gl.getUniformLocation(programObject3D, "uTime");
		glCache.locations.uPos = gl.getUniformLocation(programObject3D, "uPos");
		glCache.locations.uDist = gl.getUniformLocation(programObject3D, "uDist");
		glCache.locations.skyColor = gl.getUniformLocation(programObject3D, "skyColor");
		glCache.locations.lightDepthChange = gl.getUniformLocation(programObject3D, "lightDepthChange");
		glCache.locations.inWater = gl.getUniformLocation(programObject3D, "inWater");
		glCache.locations.inLava = gl.getUniformLocation(programObject3D, "inLava");
		glCache.locations.inSnow = gl.getUniformLocation(programObject3D, "inSnow");


		// Send the block textures to the GPU
		initTextures();

		sideEdgeBuffers = {};
		for (var side in sideEdgeVerts) {
			var edgeBuffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, edgeBuffer);
			gl.bufferData(gl.ARRAY_BUFFER, sideEdgeVerts[side], gl.STATIC_DRAW);
			sideEdgeBuffers[side] = edgeBuffer;
		}
		texCoordsBuffers = [];
		for (var t in textureCoords) {
			var buff = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, buff);
			gl.bufferData(gl.ARRAY_BUFFER, textureCoords[t], gl.STATIC_DRAW);
			texCoordsBuffers.push(buff);
		}

		// Bind the Vertex Array Object (VAO) that will be used to draw everything
		indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexOrder, gl.STATIC_DRAW);

		//Tell it not to render the insides of blocks
		gl.enable(gl.CULL_FACE);
		gl.cullFace(gl.BACK);

		gl.disableVertexAttribArray(glCache.locations.aShadow);
		gl.disableVertexAttribArray(glCache.locations.aSkylight);
		gl.vertexAttrib1f(glCache.locations.aShadow, 1.0);
		gl.vertexAttrib1f(glCache.locations.aSkylight, 1.0);
		gl.lineWidth(2);
		blockOutlines = true;
		gl.enable(gl.POLYGON_OFFSET_FILL);
		gl.polygonOffset(1, 1);
		gl.clearColor(sky[0], sky[1], sky[2], 1.0);
		gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);

		FOV(60);
		var HALF_PI = Math.PI / 2;
		initModelView(0, 0, 0, -HALF_PI / 6, -HALF_PI / 2.5);

		FOV(fov);
	}

	function gameLoop() {
		var frameStart = win.performance.now();
		if (!screen) {
			initWorld();
			releasePointer();
		}

		if (screen.includes("menu")) {
			cursor(CROSS);
			strokeWeight(1);
			ctx.clearRect(0, 0, width, height);
			ctx.textAlign = 'center';
			ctx.fillStyle = "gainsboro";
			if (screen === "main menu") {
				textSize(50);
				text("The Craft", width / 2, canvas.height / 2 - 30);
				fill(0, 0, 0);
				textSize(48);
				ctx.fillStyle = "black";
				text("The Craft", width / 2, canvas.height / 2 - 30);
				fill(0, 0, 0);
				textSize(12);
				ctx.textAlign = 'right';
				ctx.fillStyle = "white";
				text("v2.3.1", width - 10, height - 10);
			}
		} else if (screen === "play") {
			controls();
			runGravity();
			resolveContactsAndUpdatePosition();

			if (updateHUD) {
				ctx.clearRect(0, 0, canvas.width, canvas.height);
				gl.clearColor(0.0, 0.0, 0.0, 0.0);
				gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
				hotbar();
				hud();
				ctx.drawImage(gl.canvas, 0, 0);
				updateHUD = false;
				freezeFrame = false;
				gl.clearColor(sky[0], sky[1], sky[2], 1.0);
			}
			gl.clear(gl.DEPTH_BUFFER_BIT | gl.COLOR_BUFFER_BIT);
			defineWorld(); // Load, draw, and update the world
			gl.flush();
			gl.finish();
		} else if (screen === "inventory") {
			drawInv();
		} else if (screen === "controls") {
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			ctx.beginPath();
			ctx.strokeStyle = "white";
			ctx.fillStyle = "rgb(92, 92, 92)";
			strokeWeight(4);
			ctx.rect(width / 2 - 150, 125, 300, 240);
			ctx.stroke();
			ctx.fill();
			fill(255, 255, 255);
			textSize(12);
			ctx.textAlign = 'center';
			text("WASD: move", width / 2, 180);
			text("Q: sprint", width / 2, 240);
			text("SPACE: jump", width / 2, 200);
			text("DOUBLE SPACE: fly", width / 2, 320);
			text("1-9: change slot", width / 2, 300);
			text("Z: zoom in", width / 2, 260);
			text("E: inventory", width / 2, 220);
			text("X: get block name", width / 2, 280);
			text("P: pause", width / 2, 160);
			text("SHIFT: down while flying", width / 2, 340);
			ctx.beginPath();
		} else if (screen.includes("pause")) {
			cursor(CROSS);
			strokeWeight(1);
			ctx.clearRect(0, 0, canvas.width, canvas.height);
			ctx.drawImage(gl.canvas, 0, 0);
			textSize(41);
			fill(255, 255, 255);
			ctx.textAlign = 'center';
			text("Paused", width / 2, height / 2 - 70);
			textSize(40);
			fill(0, 0, 0);
			text("Paused", width / 2, height / 2 - 70);
			if (screen === "pause options") {
				ctx.beginPath();
				ctx.strokeStyle = "white";
				ctx.fillStyle = "rgb(92, 92, 92)";
				strokeWeight(4);
				ctx.rect(width / 2 - 150, 125, 300, 50);
				ctx.rect(width / 2 - 150, 195, 300, 50);
				ctx.rect(width / 2 - 150, 265, 300, 50);
				ctx.stroke();
				ctx.fill();
				fill(255, 255, 255);
				textSize(15);
				ctx.textAlign = 'center';
				text("Render Distance: " + renderDistance, width / 2, 160);
				text("Fog: " + (fogEnabled ? "On" : "Off"), width / 2, 230);
				textSize(15);
				text("Day/Night: " + (dayNightEnabled ? "On" : "Off"), width / 2, 300);
				strokeWeight(7);
				stroke(5, 5, 5);
				ctx.strokeStyle = "gainsboro";
				ctx.beginPath();
				line(width / 2 - 170, 150, width / 2 - 200, 150);
				line(width / 2 + 170, 150, width / 2 + 200, 150);
				line(width / 2 + 185, 135, width / 2 + 185, 165);
				ctx.stroke();
				ctx.beginPath();
			}
		}
		buttons.forEach(drawButton);

		if (Date.now() - analytics.lastUpdate > 500 && analytics.frames) {
			analytics.displayedTickTime = (analytics.totalTickTime / analytics.frames).toFixed(1);
			analytics.displayedRenderTime = (analytics.totalRenderTime / analytics.frames).toFixed(1);
			analytics.displayedFrameTime = (analytics.totalFrameTime / analytics.frames).toFixed(1);
			analytics.fps = Math.round(analytics.frames * 1000 / (Date.now() - analytics.lastUpdate));
			analytics.displayedwFrameTime = analytics.worstFrameTime.toFixed(1);
			analytics.frames = 0;
			analytics.totalRenderTime = 0;
			analytics.totalTickTime = 0;
			analytics.totalFrameTime = 0;
			analytics.worstFrameTime = 0;
			analytics.lastUpdate = Date.now();
			updateHUD = true;
		}

		analytics.frames++;
		analytics.totalFrameTime += win.performance.now() - frameStart;
		analytics.worstFrameTime = Math.max(win.performance.now() - frameStart, analytics.worstFrameTime);
		win.raf = requestAnimationFrame(gameLoop);
	}

	return gameLoop;
})();

if (window.parent.raf) {
	window.cancelAnimationFrame(window.parent.raf);
	console.log("Canceled", window.parent.raf)
}

setTimeout(function () {
	Array.prototype.slice.call(document.getElementsByTagName("background")).forEach(function (item) {
		item.remove();
	});

	(new Sound(sounds["background"][Math.floor(Math.random() * sounds["background"].length)])).play()
}, 5000);

setInterval(function () {
	(new Sound(sounds["background"][Math.floor(Math.random() * sounds["background"].length)])).play()
}, 210000);

init();


//noice
